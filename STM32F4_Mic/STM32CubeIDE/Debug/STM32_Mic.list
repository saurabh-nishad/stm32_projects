
STM32_Mic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009d6c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000464  08009f00  08009f00  00019f00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a364  0800a364  000205dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800a364  0800a364  0001a364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a36c  0800a36c  000205dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a36c  0800a36c  0001a36c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a370  0800a370  0001a370  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000005dc  20000000  0800a374  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000205dc  2**0
                  CONTENTS
 10 .bss          000004a8  200005dc  200005dc  000205dc  2**2
                  ALLOC
 11 ._user_heap_stack 00003004  20000a84  20000a84  000205dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000205dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d82f  00000000  00000000  0002060c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002803  00000000  00000000  0002de3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ab0  00000000  00000000  00030640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000978  00000000  00000000  000310f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022576  00000000  00000000  00031a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ff89  00000000  00000000  00053fde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c6987  00000000  00000000  00063f67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000cf  00000000  00000000  0012a8ee  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003b48  00000000  00000000  0012a9c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200005dc 	.word	0x200005dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009ee4 	.word	0x08009ee4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200005e0 	.word	0x200005e0
 80001cc:	08009ee4 	.word	0x08009ee4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000eb0:	4b06      	ldr	r3, [pc, #24]	; (8000ecc <MX_CRC_Init+0x20>)
 8000eb2:	4a07      	ldr	r2, [pc, #28]	; (8000ed0 <MX_CRC_Init+0x24>)
 8000eb4:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000eb6:	4805      	ldr	r0, [pc, #20]	; (8000ecc <MX_CRC_Init+0x20>)
 8000eb8:	f000 fe47 	bl	8001b4a <HAL_CRC_Init>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000ec2:	f000 faa3 	bl	800140c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000ec6:	bf00      	nop
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	200005fc 	.word	0x200005fc
 8000ed0:	40023000 	.word	0x40023000

08000ed4 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b085      	sub	sp, #20
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a0b      	ldr	r2, [pc, #44]	; (8000f10 <HAL_CRC_MspInit+0x3c>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d10d      	bne.n	8000f02 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	60fb      	str	r3, [r7, #12]
 8000eea:	4b0a      	ldr	r3, [pc, #40]	; (8000f14 <HAL_CRC_MspInit+0x40>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eee:	4a09      	ldr	r2, [pc, #36]	; (8000f14 <HAL_CRC_MspInit+0x40>)
 8000ef0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ef4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef6:	4b07      	ldr	r3, [pc, #28]	; (8000f14 <HAL_CRC_MspInit+0x40>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000efe:	60fb      	str	r3, [r7, #12]
 8000f00:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000f02:	bf00      	nop
 8000f04:	3714      	adds	r7, #20
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	40023000 	.word	0x40023000
 8000f14:	40023800 	.word	0x40023800

08000f18 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f1e:	2300      	movs	r3, #0
 8000f20:	607b      	str	r3, [r7, #4]
 8000f22:	4b0c      	ldr	r3, [pc, #48]	; (8000f54 <MX_DMA_Init+0x3c>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f26:	4a0b      	ldr	r2, [pc, #44]	; (8000f54 <MX_DMA_Init+0x3c>)
 8000f28:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2e:	4b09      	ldr	r3, [pc, #36]	; (8000f54 <MX_DMA_Init+0x3c>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f36:	607b      	str	r3, [r7, #4]
 8000f38:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	200e      	movs	r0, #14
 8000f40:	f000 fdcd 	bl	8001ade <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000f44:	200e      	movs	r0, #14
 8000f46:	f000 fde6 	bl	8001b16 <HAL_NVIC_EnableIRQ>

}
 8000f4a:	bf00      	nop
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	40023800 	.word	0x40023800

08000f58 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b085      	sub	sp, #20
 8000f5c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f5e:	2300      	movs	r3, #0
 8000f60:	60fb      	str	r3, [r7, #12]
 8000f62:	4b1e      	ldr	r3, [pc, #120]	; (8000fdc <MX_GPIO_Init+0x84>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f66:	4a1d      	ldr	r2, [pc, #116]	; (8000fdc <MX_GPIO_Init+0x84>)
 8000f68:	f043 0304 	orr.w	r3, r3, #4
 8000f6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f6e:	4b1b      	ldr	r3, [pc, #108]	; (8000fdc <MX_GPIO_Init+0x84>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f72:	f003 0304 	and.w	r3, r3, #4
 8000f76:	60fb      	str	r3, [r7, #12]
 8000f78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	60bb      	str	r3, [r7, #8]
 8000f7e:	4b17      	ldr	r3, [pc, #92]	; (8000fdc <MX_GPIO_Init+0x84>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f82:	4a16      	ldr	r2, [pc, #88]	; (8000fdc <MX_GPIO_Init+0x84>)
 8000f84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f88:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8a:	4b14      	ldr	r3, [pc, #80]	; (8000fdc <MX_GPIO_Init+0x84>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f92:	60bb      	str	r3, [r7, #8]
 8000f94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f96:	2300      	movs	r3, #0
 8000f98:	607b      	str	r3, [r7, #4]
 8000f9a:	4b10      	ldr	r3, [pc, #64]	; (8000fdc <MX_GPIO_Init+0x84>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9e:	4a0f      	ldr	r2, [pc, #60]	; (8000fdc <MX_GPIO_Init+0x84>)
 8000fa0:	f043 0301 	orr.w	r3, r3, #1
 8000fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa6:	4b0d      	ldr	r3, [pc, #52]	; (8000fdc <MX_GPIO_Init+0x84>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000faa:	f003 0301 	and.w	r3, r3, #1
 8000fae:	607b      	str	r3, [r7, #4]
 8000fb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	603b      	str	r3, [r7, #0]
 8000fb6:	4b09      	ldr	r3, [pc, #36]	; (8000fdc <MX_GPIO_Init+0x84>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fba:	4a08      	ldr	r2, [pc, #32]	; (8000fdc <MX_GPIO_Init+0x84>)
 8000fbc:	f043 0302 	orr.w	r3, r3, #2
 8000fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc2:	4b06      	ldr	r3, [pc, #24]	; (8000fdc <MX_GPIO_Init+0x84>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	f003 0302 	and.w	r3, r3, #2
 8000fca:	603b      	str	r3, [r7, #0]
 8000fcc:	683b      	ldr	r3, [r7, #0]

}
 8000fce:	bf00      	nop
 8000fd0:	3714      	adds	r7, #20
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	40023800 	.word	0x40023800

08000fe0 <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
DMA_HandleTypeDef hdma_spi2_rx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000fe4:	4b13      	ldr	r3, [pc, #76]	; (8001034 <MX_I2S2_Init+0x54>)
 8000fe6:	4a14      	ldr	r2, [pc, #80]	; (8001038 <MX_I2S2_Init+0x58>)
 8000fe8:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 8000fea:	4b12      	ldr	r3, [pc, #72]	; (8001034 <MX_I2S2_Init+0x54>)
 8000fec:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000ff0:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_MSB;
 8000ff2:	4b10      	ldr	r3, [pc, #64]	; (8001034 <MX_I2S2_Init+0x54>)
 8000ff4:	2210      	movs	r2, #16
 8000ff6:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B_EXTENDED;
 8000ff8:	4b0e      	ldr	r3, [pc, #56]	; (8001034 <MX_I2S2_Init+0x54>)
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000ffe:	4b0d      	ldr	r3, [pc, #52]	; (8001034 <MX_I2S2_Init+0x54>)
 8001000:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001004:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8001006:	4b0b      	ldr	r3, [pc, #44]	; (8001034 <MX_I2S2_Init+0x54>)
 8001008:	f64b 3280 	movw	r2, #48000	; 0xbb80
 800100c:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 800100e:	4b09      	ldr	r3, [pc, #36]	; (8001034 <MX_I2S2_Init+0x54>)
 8001010:	2200      	movs	r2, #0
 8001012:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8001014:	4b07      	ldr	r3, [pc, #28]	; (8001034 <MX_I2S2_Init+0x54>)
 8001016:	2200      	movs	r2, #0
 8001018:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800101a:	4b06      	ldr	r3, [pc, #24]	; (8001034 <MX_I2S2_Init+0x54>)
 800101c:	2200      	movs	r2, #0
 800101e:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8001020:	4804      	ldr	r0, [pc, #16]	; (8001034 <MX_I2S2_Init+0x54>)
 8001022:	f001 fb4d 	bl	80026c0 <HAL_I2S_Init>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <MX_I2S2_Init+0x50>
  {
    Error_Handler();
 800102c:	f000 f9ee 	bl	800140c <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8001030:	bf00      	nop
 8001032:	bd80      	pop	{r7, pc}
 8001034:	20000604 	.word	0x20000604
 8001038:	40003800 	.word	0x40003800

0800103c <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b08e      	sub	sp, #56	; 0x38
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001044:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
 800104c:	605a      	str	r2, [r3, #4]
 800104e:	609a      	str	r2, [r3, #8]
 8001050:	60da      	str	r2, [r3, #12]
 8001052:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001054:	f107 0314 	add.w	r3, r7, #20
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
 800105c:	605a      	str	r2, [r3, #4]
 800105e:	609a      	str	r2, [r3, #8]
 8001060:	60da      	str	r2, [r3, #12]
  if(i2sHandle->Instance==SPI2)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4a55      	ldr	r2, [pc, #340]	; (80011bc <HAL_I2S_MspInit+0x180>)
 8001068:	4293      	cmp	r3, r2
 800106a:	f040 80a3 	bne.w	80011b4 <HAL_I2S_MspInit+0x178>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800106e:	2301      	movs	r3, #1
 8001070:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001072:	23c0      	movs	r3, #192	; 0xc0
 8001074:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001076:	2302      	movs	r3, #2
 8001078:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800107a:	f107 0314 	add.w	r3, r7, #20
 800107e:	4618      	mov	r0, r3
 8001080:	f002 fd5e 	bl	8003b40 <HAL_RCCEx_PeriphCLKConfig>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 800108a:	f000 f9bf 	bl	800140c <Error_Handler>
    }

    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800108e:	2300      	movs	r3, #0
 8001090:	613b      	str	r3, [r7, #16]
 8001092:	4b4b      	ldr	r3, [pc, #300]	; (80011c0 <HAL_I2S_MspInit+0x184>)
 8001094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001096:	4a4a      	ldr	r2, [pc, #296]	; (80011c0 <HAL_I2S_MspInit+0x184>)
 8001098:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800109c:	6413      	str	r3, [r2, #64]	; 0x40
 800109e:	4b48      	ldr	r3, [pc, #288]	; (80011c0 <HAL_I2S_MspInit+0x184>)
 80010a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010a6:	613b      	str	r3, [r7, #16]
 80010a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010aa:	2300      	movs	r3, #0
 80010ac:	60fb      	str	r3, [r7, #12]
 80010ae:	4b44      	ldr	r3, [pc, #272]	; (80011c0 <HAL_I2S_MspInit+0x184>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b2:	4a43      	ldr	r2, [pc, #268]	; (80011c0 <HAL_I2S_MspInit+0x184>)
 80010b4:	f043 0304 	orr.w	r3, r3, #4
 80010b8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ba:	4b41      	ldr	r3, [pc, #260]	; (80011c0 <HAL_I2S_MspInit+0x184>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010be:	f003 0304 	and.w	r3, r3, #4
 80010c2:	60fb      	str	r3, [r7, #12]
 80010c4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010c6:	2300      	movs	r3, #0
 80010c8:	60bb      	str	r3, [r7, #8]
 80010ca:	4b3d      	ldr	r3, [pc, #244]	; (80011c0 <HAL_I2S_MspInit+0x184>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ce:	4a3c      	ldr	r2, [pc, #240]	; (80011c0 <HAL_I2S_MspInit+0x184>)
 80010d0:	f043 0302 	orr.w	r3, r3, #2
 80010d4:	6313      	str	r3, [r2, #48]	; 0x30
 80010d6:	4b3a      	ldr	r3, [pc, #232]	; (80011c0 <HAL_I2S_MspInit+0x184>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010da:	f003 0302 	and.w	r3, r3, #2
 80010de:	60bb      	str	r3, [r7, #8]
 80010e0:	68bb      	ldr	r3, [r7, #8]
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    PC6     ------> I2S2_MCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80010e2:	2308      	movs	r3, #8
 80010e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e6:	2302      	movs	r3, #2
 80010e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ea:	2300      	movs	r3, #0
 80010ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ee:	2303      	movs	r3, #3
 80010f0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80010f2:	2305      	movs	r3, #5
 80010f4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010fa:	4619      	mov	r1, r3
 80010fc:	4831      	ldr	r0, [pc, #196]	; (80011c4 <HAL_I2S_MspInit+0x188>)
 80010fe:	f001 f943 	bl	8002388 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8001102:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001106:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001108:	2302      	movs	r3, #2
 800110a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110c:	2300      	movs	r3, #0
 800110e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001110:	2303      	movs	r3, #3
 8001112:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001114:	2305      	movs	r3, #5
 8001116:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001118:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800111c:	4619      	mov	r1, r3
 800111e:	482a      	ldr	r0, [pc, #168]	; (80011c8 <HAL_I2S_MspInit+0x18c>)
 8001120:	f001 f932 	bl	8002388 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001124:	2340      	movs	r3, #64	; 0x40
 8001126:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001128:	2302      	movs	r3, #2
 800112a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112c:	2300      	movs	r3, #0
 800112e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001130:	2300      	movs	r3, #0
 8001132:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001134:	2305      	movs	r3, #5
 8001136:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001138:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800113c:	4619      	mov	r1, r3
 800113e:	4821      	ldr	r0, [pc, #132]	; (80011c4 <HAL_I2S_MspInit+0x188>)
 8001140:	f001 f922 	bl	8002388 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8001144:	4b21      	ldr	r3, [pc, #132]	; (80011cc <HAL_I2S_MspInit+0x190>)
 8001146:	4a22      	ldr	r2, [pc, #136]	; (80011d0 <HAL_I2S_MspInit+0x194>)
 8001148:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 800114a:	4b20      	ldr	r3, [pc, #128]	; (80011cc <HAL_I2S_MspInit+0x190>)
 800114c:	2200      	movs	r2, #0
 800114e:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001150:	4b1e      	ldr	r3, [pc, #120]	; (80011cc <HAL_I2S_MspInit+0x190>)
 8001152:	2200      	movs	r2, #0
 8001154:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001156:	4b1d      	ldr	r3, [pc, #116]	; (80011cc <HAL_I2S_MspInit+0x190>)
 8001158:	2200      	movs	r2, #0
 800115a:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800115c:	4b1b      	ldr	r3, [pc, #108]	; (80011cc <HAL_I2S_MspInit+0x190>)
 800115e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001162:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001164:	4b19      	ldr	r3, [pc, #100]	; (80011cc <HAL_I2S_MspInit+0x190>)
 8001166:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800116a:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800116c:	4b17      	ldr	r3, [pc, #92]	; (80011cc <HAL_I2S_MspInit+0x190>)
 800116e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001172:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8001174:	4b15      	ldr	r3, [pc, #84]	; (80011cc <HAL_I2S_MspInit+0x190>)
 8001176:	f44f 7280 	mov.w	r2, #256	; 0x100
 800117a:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800117c:	4b13      	ldr	r3, [pc, #76]	; (80011cc <HAL_I2S_MspInit+0x190>)
 800117e:	2200      	movs	r2, #0
 8001180:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001182:	4b12      	ldr	r3, [pc, #72]	; (80011cc <HAL_I2S_MspInit+0x190>)
 8001184:	2200      	movs	r2, #0
 8001186:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8001188:	4810      	ldr	r0, [pc, #64]	; (80011cc <HAL_I2S_MspInit+0x190>)
 800118a:	f000 fcfb 	bl	8001b84 <HAL_DMA_Init>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <HAL_I2S_MspInit+0x15c>
    {
      Error_Handler();
 8001194:	f000 f93a 	bl	800140c <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_spi2_rx);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	4a0c      	ldr	r2, [pc, #48]	; (80011cc <HAL_I2S_MspInit+0x190>)
 800119c:	63da      	str	r2, [r3, #60]	; 0x3c
 800119e:	4a0b      	ldr	r2, [pc, #44]	; (80011cc <HAL_I2S_MspInit+0x190>)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2S2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80011a4:	2200      	movs	r2, #0
 80011a6:	2100      	movs	r1, #0
 80011a8:	2024      	movs	r0, #36	; 0x24
 80011aa:	f000 fc98 	bl	8001ade <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80011ae:	2024      	movs	r0, #36	; 0x24
 80011b0:	f000 fcb1 	bl	8001b16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80011b4:	bf00      	nop
 80011b6:	3738      	adds	r7, #56	; 0x38
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	40003800 	.word	0x40003800
 80011c0:	40023800 	.word	0x40023800
 80011c4:	40020800 	.word	0x40020800
 80011c8:	40020400 	.word	0x40020400
 80011cc:	2000064c 	.word	0x2000064c
 80011d0:	40026058 	.word	0x40026058

080011d4 <fifoWrite>:
uint16_t fifoBuf[256];
uint8_t fifo_w_ptr = 0;
uint8_t fifo_r_ptr = 0;
uint8_t fifo_read_enable = 0;

void fifoWrite(uint16_t data) {
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	4603      	mov	r3, r0
 80011dc:	80fb      	strh	r3, [r7, #6]
	fifoBuf[fifo_w_ptr] = data;
 80011de:	4b09      	ldr	r3, [pc, #36]	; (8001204 <fifoWrite+0x30>)
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	4619      	mov	r1, r3
 80011e4:	4a08      	ldr	r2, [pc, #32]	; (8001208 <fifoWrite+0x34>)
 80011e6:	88fb      	ldrh	r3, [r7, #6]
 80011e8:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
	fifo_w_ptr++;
 80011ec:	4b05      	ldr	r3, [pc, #20]	; (8001204 <fifoWrite+0x30>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	3301      	adds	r3, #1
 80011f2:	b2da      	uxtb	r2, r3
 80011f4:	4b03      	ldr	r3, [pc, #12]	; (8001204 <fifoWrite+0x30>)
 80011f6:	701a      	strb	r2, [r3, #0]
}
 80011f8:	bf00      	nop
 80011fa:	370c      	adds	r7, #12
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr
 8001204:	200009d0 	.word	0x200009d0
 8001208:	200007d0 	.word	0x200007d0

0800120c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001212:	f000 fb17 	bl	8001844 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001216:	f000 f85f 	bl	80012d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800121a:	f7ff fe9d 	bl	8000f58 <MX_GPIO_Init>
  MX_DMA_Init();
 800121e:	f7ff fe7b 	bl	8000f18 <MX_DMA_Init>
  MX_I2S2_Init();
 8001222:	f7ff fedd 	bl	8000fe0 <MX_I2S2_Init>
  MX_USART2_UART_Init();
 8001226:	f000 fa2d 	bl	8001684 <MX_USART2_UART_Init>
  MX_CRC_Init();
 800122a:	f7ff fe3f 	bl	8000eac <MX_CRC_Init>
  MX_PDM2PCM_Init();
 800122e:	f000 faa3 	bl	8001778 <MX_PDM2PCM_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit(&huart2, (uint8_t *)"I2S Data Demo..\r\n", 18, 0xFFFF);
 8001232:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001236:	2212      	movs	r2, #18
 8001238:	491c      	ldr	r1, [pc, #112]	; (80012ac <main+0xa0>)
 800123a:	481d      	ldr	r0, [pc, #116]	; (80012b0 <main+0xa4>)
 800123c:	f002 fe0d 	bl	8003e5a <HAL_UART_Transmit>

  HAL_I2S_Receive_DMA(&hi2s2, &rxBuff[0], 64);
 8001240:	2240      	movs	r2, #64	; 0x40
 8001242:	491c      	ldr	r1, [pc, #112]	; (80012b4 <main+0xa8>)
 8001244:	481c      	ldr	r0, [pc, #112]	; (80012b8 <main+0xac>)
 8001246:	f001 fb7b 	bl	8002940 <HAL_I2S_Receive_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

     if (rxState == 1) {
 800124a:	4b1c      	ldr	r3, [pc, #112]	; (80012bc <main+0xb0>)
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	2b01      	cmp	r3, #1
 8001250:	d1fb      	bne.n	800124a <main+0x3e>
    	 PDM_Filter(&rxBuff[0], &midBuff[0], &PDM1_filter_handler);
 8001252:	4a1b      	ldr	r2, [pc, #108]	; (80012c0 <main+0xb4>)
 8001254:	491b      	ldr	r1, [pc, #108]	; (80012c4 <main+0xb8>)
 8001256:	4817      	ldr	r0, [pc, #92]	; (80012b4 <main+0xa8>)
 8001258:	f005 fc92 	bl	8006b80 <PDM_Filter>
    	 for (uint8_t i  = 0; i  < 64; i++ ) {
 800125c:	2300      	movs	r3, #0
 800125e:	71fb      	strb	r3, [r7, #7]
 8001260:	e011      	b.n	8001286 <main+0x7a>
			fifoWrite(midBuff[i]);
 8001262:	79fb      	ldrb	r3, [r7, #7]
 8001264:	4a17      	ldr	r2, [pc, #92]	; (80012c4 <main+0xb8>)
 8001266:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800126a:	4618      	mov	r0, r3
 800126c:	f7ff ffb2 	bl	80011d4 <fifoWrite>
			printf("%d\r\n", midBuff[i]);
 8001270:	79fb      	ldrb	r3, [r7, #7]
 8001272:	4a14      	ldr	r2, [pc, #80]	; (80012c4 <main+0xb8>)
 8001274:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001278:	4619      	mov	r1, r3
 800127a:	4813      	ldr	r0, [pc, #76]	; (80012c8 <main+0xbc>)
 800127c:	f006 f976 	bl	800756c <iprintf>
    	 for (uint8_t i  = 0; i  < 64; i++ ) {
 8001280:	79fb      	ldrb	r3, [r7, #7]
 8001282:	3301      	adds	r3, #1
 8001284:	71fb      	strb	r3, [r7, #7]
 8001286:	79fb      	ldrb	r3, [r7, #7]
 8001288:	2b3f      	cmp	r3, #63	; 0x3f
 800128a:	d9ea      	bls.n	8001262 <main+0x56>
		 }
    	 if (fifo_w_ptr - fifo_r_ptr > 128) {
 800128c:	4b0f      	ldr	r3, [pc, #60]	; (80012cc <main+0xc0>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	461a      	mov	r2, r3
 8001292:	4b0f      	ldr	r3, [pc, #60]	; (80012d0 <main+0xc4>)
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	1ad3      	subs	r3, r2, r3
 8001298:	2b80      	cmp	r3, #128	; 0x80
 800129a:	dd02      	ble.n	80012a2 <main+0x96>
			fifo_read_enable = 1;
 800129c:	4b0d      	ldr	r3, [pc, #52]	; (80012d4 <main+0xc8>)
 800129e:	2201      	movs	r2, #1
 80012a0:	701a      	strb	r2, [r3, #0]
		 }
    	 rxState = 0;
 80012a2:	4b06      	ldr	r3, [pc, #24]	; (80012bc <main+0xb0>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	701a      	strb	r2, [r3, #0]
     if (rxState == 1) {
 80012a8:	e7cf      	b.n	800124a <main+0x3e>
 80012aa:	bf00      	nop
 80012ac:	08009f00 	.word	0x08009f00
 80012b0:	200009d8 	.word	0x200009d8
 80012b4:	200006ac 	.word	0x200006ac
 80012b8:	20000604 	.word	0x20000604
 80012bc:	200007cd 	.word	0x200007cd
 80012c0:	20000a1c 	.word	0x20000a1c
 80012c4:	200007ac 	.word	0x200007ac
 80012c8:	08009f14 	.word	0x08009f14
 80012cc:	200009d0 	.word	0x200009d0
 80012d0:	200009d1 	.word	0x200009d1
 80012d4:	200009d2 	.word	0x200009d2

080012d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b094      	sub	sp, #80	; 0x50
 80012dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012de:	f107 0320 	add.w	r3, r7, #32
 80012e2:	2230      	movs	r2, #48	; 0x30
 80012e4:	2100      	movs	r1, #0
 80012e6:	4618      	mov	r0, r3
 80012e8:	f005 fcce 	bl	8006c88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012ec:	f107 030c 	add.w	r3, r7, #12
 80012f0:	2200      	movs	r2, #0
 80012f2:	601a      	str	r2, [r3, #0]
 80012f4:	605a      	str	r2, [r3, #4]
 80012f6:	609a      	str	r2, [r3, #8]
 80012f8:	60da      	str	r2, [r3, #12]
 80012fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012fc:	2300      	movs	r3, #0
 80012fe:	60bb      	str	r3, [r7, #8]
 8001300:	4b28      	ldr	r3, [pc, #160]	; (80013a4 <SystemClock_Config+0xcc>)
 8001302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001304:	4a27      	ldr	r2, [pc, #156]	; (80013a4 <SystemClock_Config+0xcc>)
 8001306:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800130a:	6413      	str	r3, [r2, #64]	; 0x40
 800130c:	4b25      	ldr	r3, [pc, #148]	; (80013a4 <SystemClock_Config+0xcc>)
 800130e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001310:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001314:	60bb      	str	r3, [r7, #8]
 8001316:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001318:	2300      	movs	r3, #0
 800131a:	607b      	str	r3, [r7, #4]
 800131c:	4b22      	ldr	r3, [pc, #136]	; (80013a8 <SystemClock_Config+0xd0>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a21      	ldr	r2, [pc, #132]	; (80013a8 <SystemClock_Config+0xd0>)
 8001322:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001326:	6013      	str	r3, [r2, #0]
 8001328:	4b1f      	ldr	r3, [pc, #124]	; (80013a8 <SystemClock_Config+0xd0>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001330:	607b      	str	r3, [r7, #4]
 8001332:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001334:	2301      	movs	r3, #1
 8001336:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001338:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800133c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800133e:	2302      	movs	r3, #2
 8001340:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001342:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001346:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001348:	2308      	movs	r3, #8
 800134a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800134c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001350:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001352:	2302      	movs	r3, #2
 8001354:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001356:	2307      	movs	r3, #7
 8001358:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800135a:	f107 0320 	add.w	r3, r7, #32
 800135e:	4618      	mov	r0, r3
 8001360:	f001 ff56 	bl	8003210 <HAL_RCC_OscConfig>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800136a:	f000 f84f 	bl	800140c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800136e:	230f      	movs	r3, #15
 8001370:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001372:	2302      	movs	r3, #2
 8001374:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001376:	2300      	movs	r3, #0
 8001378:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800137a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800137e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001380:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001384:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001386:	f107 030c 	add.w	r3, r7, #12
 800138a:	2105      	movs	r1, #5
 800138c:	4618      	mov	r0, r3
 800138e:	f002 f9b7 	bl	8003700 <HAL_RCC_ClockConfig>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001398:	f000 f838 	bl	800140c <Error_Handler>
  }
}
 800139c:	bf00      	nop
 800139e:	3750      	adds	r7, #80	; 0x50
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	40023800 	.word	0x40023800
 80013a8:	40007000 	.word	0x40007000

080013ac <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 	txState = 2;
 80013b4:	4b04      	ldr	r3, [pc, #16]	; (80013c8 <HAL_I2S_TxCpltCallback+0x1c>)
 80013b6:	2202      	movs	r2, #2
 80013b8:	701a      	strb	r2, [r3, #0]
}
 80013ba:	bf00      	nop
 80013bc:	370c      	adds	r7, #12
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	200007cc 	.word	0x200007cc

080013cc <HAL_I2S_RxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
	rxState = 1;
 80013d4:	4b04      	ldr	r3, [pc, #16]	; (80013e8 <HAL_I2S_RxHalfCpltCallback+0x1c>)
 80013d6:	2201      	movs	r2, #1
 80013d8:	701a      	strb	r2, [r3, #0]
}
 80013da:	bf00      	nop
 80013dc:	370c      	adds	r7, #12
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	200007cd 	.word	0x200007cd

080013ec <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
	rxState = 2;
 80013f4:	4b04      	ldr	r3, [pc, #16]	; (8001408 <HAL_I2S_RxCpltCallback+0x1c>)
 80013f6:	2202      	movs	r2, #2
 80013f8:	701a      	strb	r2, [r3, #0]
}
 80013fa:	bf00      	nop
 80013fc:	370c      	adds	r7, #12
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	200007cd 	.word	0x200007cd

0800140c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001410:	b672      	cpsid	i
}
 8001412:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001414:	e7fe      	b.n	8001414 <Error_Handler+0x8>
	...

08001418 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800141e:	2300      	movs	r3, #0
 8001420:	607b      	str	r3, [r7, #4]
 8001422:	4b10      	ldr	r3, [pc, #64]	; (8001464 <HAL_MspInit+0x4c>)
 8001424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001426:	4a0f      	ldr	r2, [pc, #60]	; (8001464 <HAL_MspInit+0x4c>)
 8001428:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800142c:	6453      	str	r3, [r2, #68]	; 0x44
 800142e:	4b0d      	ldr	r3, [pc, #52]	; (8001464 <HAL_MspInit+0x4c>)
 8001430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001432:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001436:	607b      	str	r3, [r7, #4]
 8001438:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800143a:	2300      	movs	r3, #0
 800143c:	603b      	str	r3, [r7, #0]
 800143e:	4b09      	ldr	r3, [pc, #36]	; (8001464 <HAL_MspInit+0x4c>)
 8001440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001442:	4a08      	ldr	r2, [pc, #32]	; (8001464 <HAL_MspInit+0x4c>)
 8001444:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001448:	6413      	str	r3, [r2, #64]	; 0x40
 800144a:	4b06      	ldr	r3, [pc, #24]	; (8001464 <HAL_MspInit+0x4c>)
 800144c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001452:	603b      	str	r3, [r7, #0]
 8001454:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001456:	2007      	movs	r0, #7
 8001458:	f000 fb36 	bl	8001ac8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800145c:	bf00      	nop
 800145e:	3708      	adds	r7, #8
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	40023800 	.word	0x40023800

08001468 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800146c:	e7fe      	b.n	800146c <NMI_Handler+0x4>

0800146e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800146e:	b480      	push	{r7}
 8001470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001472:	e7fe      	b.n	8001472 <HardFault_Handler+0x4>

08001474 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001478:	e7fe      	b.n	8001478 <MemManage_Handler+0x4>

0800147a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800147a:	b480      	push	{r7}
 800147c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800147e:	e7fe      	b.n	800147e <BusFault_Handler+0x4>

08001480 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001484:	e7fe      	b.n	8001484 <UsageFault_Handler+0x4>

08001486 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001486:	b480      	push	{r7}
 8001488:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800148a:	bf00      	nop
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr

08001494 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001498:	bf00      	nop
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr

080014a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014a2:	b480      	push	{r7}
 80014a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014a6:	bf00      	nop
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr

080014b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014b4:	f000 fa18 	bl	80018e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014b8:	bf00      	nop
 80014ba:	bd80      	pop	{r7, pc}

080014bc <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80014c0:	4802      	ldr	r0, [pc, #8]	; (80014cc <DMA1_Stream3_IRQHandler+0x10>)
 80014c2:	f000 fcf7 	bl	8001eb4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80014c6:	bf00      	nop
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	2000064c 	.word	0x2000064c

080014d0 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s2);
 80014d4:	4802      	ldr	r0, [pc, #8]	; (80014e0 <SPI2_IRQHandler+0x10>)
 80014d6:	f001 faef 	bl	8002ab8 <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80014da:	bf00      	nop
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	20000604 	.word	0x20000604

080014e4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80014e8:	4802      	ldr	r0, [pc, #8]	; (80014f4 <USART2_IRQHandler+0x10>)
 80014ea:	f002 fd49 	bl	8003f80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80014ee:	bf00      	nop
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	200009d8 	.word	0x200009d8

080014f8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
	return 1;
 80014fc:	2301      	movs	r3, #1
}
 80014fe:	4618      	mov	r0, r3
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr

08001508 <_kill>:

int _kill(int pid, int sig)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001512:	f005 fb8f 	bl	8006c34 <__errno>
 8001516:	4603      	mov	r3, r0
 8001518:	2216      	movs	r2, #22
 800151a:	601a      	str	r2, [r3, #0]
	return -1;
 800151c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001520:	4618      	mov	r0, r3
 8001522:	3708      	adds	r7, #8
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}

08001528 <_exit>:

void _exit (int status)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001530:	f04f 31ff 	mov.w	r1, #4294967295
 8001534:	6878      	ldr	r0, [r7, #4]
 8001536:	f7ff ffe7 	bl	8001508 <_kill>
	while (1) {}		/* Make sure we hang here */
 800153a:	e7fe      	b.n	800153a <_exit+0x12>

0800153c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b086      	sub	sp, #24
 8001540:	af00      	add	r7, sp, #0
 8001542:	60f8      	str	r0, [r7, #12]
 8001544:	60b9      	str	r1, [r7, #8]
 8001546:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001548:	2300      	movs	r3, #0
 800154a:	617b      	str	r3, [r7, #20]
 800154c:	e00a      	b.n	8001564 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800154e:	f3af 8000 	nop.w
 8001552:	4601      	mov	r1, r0
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	1c5a      	adds	r2, r3, #1
 8001558:	60ba      	str	r2, [r7, #8]
 800155a:	b2ca      	uxtb	r2, r1
 800155c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	3301      	adds	r3, #1
 8001562:	617b      	str	r3, [r7, #20]
 8001564:	697a      	ldr	r2, [r7, #20]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	429a      	cmp	r2, r3
 800156a:	dbf0      	blt.n	800154e <_read+0x12>
	}

return len;
 800156c:	687b      	ldr	r3, [r7, #4]
}
 800156e:	4618      	mov	r0, r3
 8001570:	3718      	adds	r7, #24
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}

08001576 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001576:	b580      	push	{r7, lr}
 8001578:	b086      	sub	sp, #24
 800157a:	af00      	add	r7, sp, #0
 800157c:	60f8      	str	r0, [r7, #12]
 800157e:	60b9      	str	r1, [r7, #8]
 8001580:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001582:	2300      	movs	r3, #0
 8001584:	617b      	str	r3, [r7, #20]
 8001586:	e009      	b.n	800159c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	1c5a      	adds	r2, r3, #1
 800158c:	60ba      	str	r2, [r7, #8]
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	4618      	mov	r0, r3
 8001592:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	3301      	adds	r3, #1
 800159a:	617b      	str	r3, [r7, #20]
 800159c:	697a      	ldr	r2, [r7, #20]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	429a      	cmp	r2, r3
 80015a2:	dbf1      	blt.n	8001588 <_write+0x12>
	}
	return len;
 80015a4:	687b      	ldr	r3, [r7, #4]
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3718      	adds	r7, #24
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}

080015ae <_close>:

int _close(int file)
{
 80015ae:	b480      	push	{r7}
 80015b0:	b083      	sub	sp, #12
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	6078      	str	r0, [r7, #4]
	return -1;
 80015b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	370c      	adds	r7, #12
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr

080015c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015c6:	b480      	push	{r7}
 80015c8:	b083      	sub	sp, #12
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	6078      	str	r0, [r7, #4]
 80015ce:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015d6:	605a      	str	r2, [r3, #4]
	return 0;
 80015d8:	2300      	movs	r3, #0
}
 80015da:	4618      	mov	r0, r3
 80015dc:	370c      	adds	r7, #12
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr

080015e6 <_isatty>:

int _isatty(int file)
{
 80015e6:	b480      	push	{r7}
 80015e8:	b083      	sub	sp, #12
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	6078      	str	r0, [r7, #4]
	return 1;
 80015ee:	2301      	movs	r3, #1
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	370c      	adds	r7, #12
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr

080015fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b085      	sub	sp, #20
 8001600:	af00      	add	r7, sp, #0
 8001602:	60f8      	str	r0, [r7, #12]
 8001604:	60b9      	str	r1, [r7, #8]
 8001606:	607a      	str	r2, [r7, #4]
	return 0;
 8001608:	2300      	movs	r3, #0
}
 800160a:	4618      	mov	r0, r3
 800160c:	3714      	adds	r7, #20
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
	...

08001618 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b086      	sub	sp, #24
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001620:	4a14      	ldr	r2, [pc, #80]	; (8001674 <_sbrk+0x5c>)
 8001622:	4b15      	ldr	r3, [pc, #84]	; (8001678 <_sbrk+0x60>)
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800162c:	4b13      	ldr	r3, [pc, #76]	; (800167c <_sbrk+0x64>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d102      	bne.n	800163a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001634:	4b11      	ldr	r3, [pc, #68]	; (800167c <_sbrk+0x64>)
 8001636:	4a12      	ldr	r2, [pc, #72]	; (8001680 <_sbrk+0x68>)
 8001638:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800163a:	4b10      	ldr	r3, [pc, #64]	; (800167c <_sbrk+0x64>)
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	4413      	add	r3, r2
 8001642:	693a      	ldr	r2, [r7, #16]
 8001644:	429a      	cmp	r2, r3
 8001646:	d207      	bcs.n	8001658 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001648:	f005 faf4 	bl	8006c34 <__errno>
 800164c:	4603      	mov	r3, r0
 800164e:	220c      	movs	r2, #12
 8001650:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001652:	f04f 33ff 	mov.w	r3, #4294967295
 8001656:	e009      	b.n	800166c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001658:	4b08      	ldr	r3, [pc, #32]	; (800167c <_sbrk+0x64>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800165e:	4b07      	ldr	r3, [pc, #28]	; (800167c <_sbrk+0x64>)
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	4413      	add	r3, r2
 8001666:	4a05      	ldr	r2, [pc, #20]	; (800167c <_sbrk+0x64>)
 8001668:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800166a:	68fb      	ldr	r3, [r7, #12]
}
 800166c:	4618      	mov	r0, r3
 800166e:	3718      	adds	r7, #24
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	20020000 	.word	0x20020000
 8001678:	00002000 	.word	0x00002000
 800167c:	200009d4 	.word	0x200009d4
 8001680:	20000a88 	.word	0x20000a88

08001684 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001688:	4b11      	ldr	r3, [pc, #68]	; (80016d0 <MX_USART2_UART_Init+0x4c>)
 800168a:	4a12      	ldr	r2, [pc, #72]	; (80016d4 <MX_USART2_UART_Init+0x50>)
 800168c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800168e:	4b10      	ldr	r3, [pc, #64]	; (80016d0 <MX_USART2_UART_Init+0x4c>)
 8001690:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001694:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001696:	4b0e      	ldr	r3, [pc, #56]	; (80016d0 <MX_USART2_UART_Init+0x4c>)
 8001698:	2200      	movs	r2, #0
 800169a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800169c:	4b0c      	ldr	r3, [pc, #48]	; (80016d0 <MX_USART2_UART_Init+0x4c>)
 800169e:	2200      	movs	r2, #0
 80016a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016a2:	4b0b      	ldr	r3, [pc, #44]	; (80016d0 <MX_USART2_UART_Init+0x4c>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016a8:	4b09      	ldr	r3, [pc, #36]	; (80016d0 <MX_USART2_UART_Init+0x4c>)
 80016aa:	220c      	movs	r2, #12
 80016ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016ae:	4b08      	ldr	r3, [pc, #32]	; (80016d0 <MX_USART2_UART_Init+0x4c>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016b4:	4b06      	ldr	r3, [pc, #24]	; (80016d0 <MX_USART2_UART_Init+0x4c>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016ba:	4805      	ldr	r0, [pc, #20]	; (80016d0 <MX_USART2_UART_Init+0x4c>)
 80016bc:	f002 fb80 	bl	8003dc0 <HAL_UART_Init>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80016c6:	f7ff fea1 	bl	800140c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016ca:	bf00      	nop
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	200009d8 	.word	0x200009d8
 80016d4:	40004400 	.word	0x40004400

080016d8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b08a      	sub	sp, #40	; 0x28
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e0:	f107 0314 	add.w	r3, r7, #20
 80016e4:	2200      	movs	r2, #0
 80016e6:	601a      	str	r2, [r3, #0]
 80016e8:	605a      	str	r2, [r3, #4]
 80016ea:	609a      	str	r2, [r3, #8]
 80016ec:	60da      	str	r2, [r3, #12]
 80016ee:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a1d      	ldr	r2, [pc, #116]	; (800176c <HAL_UART_MspInit+0x94>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d133      	bne.n	8001762 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016fa:	2300      	movs	r3, #0
 80016fc:	613b      	str	r3, [r7, #16]
 80016fe:	4b1c      	ldr	r3, [pc, #112]	; (8001770 <HAL_UART_MspInit+0x98>)
 8001700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001702:	4a1b      	ldr	r2, [pc, #108]	; (8001770 <HAL_UART_MspInit+0x98>)
 8001704:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001708:	6413      	str	r3, [r2, #64]	; 0x40
 800170a:	4b19      	ldr	r3, [pc, #100]	; (8001770 <HAL_UART_MspInit+0x98>)
 800170c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001712:	613b      	str	r3, [r7, #16]
 8001714:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001716:	2300      	movs	r3, #0
 8001718:	60fb      	str	r3, [r7, #12]
 800171a:	4b15      	ldr	r3, [pc, #84]	; (8001770 <HAL_UART_MspInit+0x98>)
 800171c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171e:	4a14      	ldr	r2, [pc, #80]	; (8001770 <HAL_UART_MspInit+0x98>)
 8001720:	f043 0301 	orr.w	r3, r3, #1
 8001724:	6313      	str	r3, [r2, #48]	; 0x30
 8001726:	4b12      	ldr	r3, [pc, #72]	; (8001770 <HAL_UART_MspInit+0x98>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172a:	f003 0301 	and.w	r3, r3, #1
 800172e:	60fb      	str	r3, [r7, #12]
 8001730:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001732:	230c      	movs	r3, #12
 8001734:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001736:	2302      	movs	r3, #2
 8001738:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173a:	2300      	movs	r3, #0
 800173c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800173e:	2303      	movs	r3, #3
 8001740:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001742:	2307      	movs	r3, #7
 8001744:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001746:	f107 0314 	add.w	r3, r7, #20
 800174a:	4619      	mov	r1, r3
 800174c:	4809      	ldr	r0, [pc, #36]	; (8001774 <HAL_UART_MspInit+0x9c>)
 800174e:	f000 fe1b 	bl	8002388 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001752:	2200      	movs	r2, #0
 8001754:	2100      	movs	r1, #0
 8001756:	2026      	movs	r0, #38	; 0x26
 8001758:	f000 f9c1 	bl	8001ade <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800175c:	2026      	movs	r0, #38	; 0x26
 800175e:	f000 f9da 	bl	8001b16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001762:	bf00      	nop
 8001764:	3728      	adds	r7, #40	; 0x28
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	40004400 	.word	0x40004400
 8001770:	40023800 	.word	0x40023800
 8001774:	40020000 	.word	0x40020000

08001778 <MX_PDM2PCM_Init>:
/* USER CODE BEGIN 1 */
/* USER CODE END 1 */

/* PDM2PCM init function */
void MX_PDM2PCM_Init(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

   /**
  */
  PDM1_filter_handler.bit_order = PDM_FILTER_BIT_ORDER_LSB;
 800177c:	4b10      	ldr	r3, [pc, #64]	; (80017c0 <MX_PDM2PCM_Init+0x48>)
 800177e:	2200      	movs	r2, #0
 8001780:	801a      	strh	r2, [r3, #0]
  PDM1_filter_handler.endianness = PDM_FILTER_ENDIANNESS_BE;
 8001782:	4b0f      	ldr	r3, [pc, #60]	; (80017c0 <MX_PDM2PCM_Init+0x48>)
 8001784:	2201      	movs	r2, #1
 8001786:	805a      	strh	r2, [r3, #2]
  PDM1_filter_handler.high_pass_tap = 2104533974;
 8001788:	4b0d      	ldr	r3, [pc, #52]	; (80017c0 <MX_PDM2PCM_Init+0x48>)
 800178a:	4a0e      	ldr	r2, [pc, #56]	; (80017c4 <MX_PDM2PCM_Init+0x4c>)
 800178c:	605a      	str	r2, [r3, #4]
  PDM1_filter_handler.in_ptr_channels = 1;
 800178e:	4b0c      	ldr	r3, [pc, #48]	; (80017c0 <MX_PDM2PCM_Init+0x48>)
 8001790:	2201      	movs	r2, #1
 8001792:	811a      	strh	r2, [r3, #8]
  PDM1_filter_handler.out_ptr_channels = 1;
 8001794:	4b0a      	ldr	r3, [pc, #40]	; (80017c0 <MX_PDM2PCM_Init+0x48>)
 8001796:	2201      	movs	r2, #1
 8001798:	815a      	strh	r2, [r3, #10]
  PDM_Filter_Init(&PDM1_filter_handler);
 800179a:	4809      	ldr	r0, [pc, #36]	; (80017c0 <MX_PDM2PCM_Init+0x48>)
 800179c:	f005 f874 	bl	8006888 <PDM_Filter_Init>

  PDM1_filter_config.decimation_factor = PDM_FILTER_DEC_FACTOR_64;
 80017a0:	4b09      	ldr	r3, [pc, #36]	; (80017c8 <MX_PDM2PCM_Init+0x50>)
 80017a2:	2202      	movs	r2, #2
 80017a4:	801a      	strh	r2, [r3, #0]
  PDM1_filter_config.output_samples_number = 16;
 80017a6:	4b08      	ldr	r3, [pc, #32]	; (80017c8 <MX_PDM2PCM_Init+0x50>)
 80017a8:	2210      	movs	r2, #16
 80017aa:	805a      	strh	r2, [r3, #2]
  PDM1_filter_config.mic_gain = 0;
 80017ac:	4b06      	ldr	r3, [pc, #24]	; (80017c8 <MX_PDM2PCM_Init+0x50>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	809a      	strh	r2, [r3, #4]
  PDM_Filter_setConfig(&PDM1_filter_handler, &PDM1_filter_config);
 80017b2:	4905      	ldr	r1, [pc, #20]	; (80017c8 <MX_PDM2PCM_Init+0x50>)
 80017b4:	4802      	ldr	r0, [pc, #8]	; (80017c0 <MX_PDM2PCM_Init+0x48>)
 80017b6:	f005 f8f1 	bl	800699c <PDM_Filter_setConfig>

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 80017ba:	bf00      	nop
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	20000a1c 	.word	0x20000a1c
 80017c4:	7d70a3d6 	.word	0x7d70a3d6
 80017c8:	20000a68 	.word	0x20000a68

080017cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80017cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001804 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017d0:	480d      	ldr	r0, [pc, #52]	; (8001808 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80017d2:	490e      	ldr	r1, [pc, #56]	; (800180c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80017d4:	4a0e      	ldr	r2, [pc, #56]	; (8001810 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017d8:	e002      	b.n	80017e0 <LoopCopyDataInit>

080017da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017de:	3304      	adds	r3, #4

080017e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017e4:	d3f9      	bcc.n	80017da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017e6:	4a0b      	ldr	r2, [pc, #44]	; (8001814 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80017e8:	4c0b      	ldr	r4, [pc, #44]	; (8001818 <LoopFillZerobss+0x26>)
  movs r3, #0
 80017ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017ec:	e001      	b.n	80017f2 <LoopFillZerobss>

080017ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017f0:	3204      	adds	r2, #4

080017f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017f4:	d3fb      	bcc.n	80017ee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80017f6:	f000 f813 	bl	8001820 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017fa:	f005 fa21 	bl	8006c40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017fe:	f7ff fd05 	bl	800120c <main>
  bx  lr    
 8001802:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001804:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001808:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800180c:	200005dc 	.word	0x200005dc
  ldr r2, =_sidata
 8001810:	0800a374 	.word	0x0800a374
  ldr r2, =_sbss
 8001814:	200005dc 	.word	0x200005dc
  ldr r4, =_ebss
 8001818:	20000a84 	.word	0x20000a84

0800181c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800181c:	e7fe      	b.n	800181c <ADC_IRQHandler>
	...

08001820 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001824:	4b06      	ldr	r3, [pc, #24]	; (8001840 <SystemInit+0x20>)
 8001826:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800182a:	4a05      	ldr	r2, [pc, #20]	; (8001840 <SystemInit+0x20>)
 800182c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001830:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001834:	bf00      	nop
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	e000ed00 	.word	0xe000ed00

08001844 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001848:	4b0e      	ldr	r3, [pc, #56]	; (8001884 <HAL_Init+0x40>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a0d      	ldr	r2, [pc, #52]	; (8001884 <HAL_Init+0x40>)
 800184e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001852:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001854:	4b0b      	ldr	r3, [pc, #44]	; (8001884 <HAL_Init+0x40>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a0a      	ldr	r2, [pc, #40]	; (8001884 <HAL_Init+0x40>)
 800185a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800185e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001860:	4b08      	ldr	r3, [pc, #32]	; (8001884 <HAL_Init+0x40>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a07      	ldr	r2, [pc, #28]	; (8001884 <HAL_Init+0x40>)
 8001866:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800186a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800186c:	2003      	movs	r0, #3
 800186e:	f000 f92b 	bl	8001ac8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001872:	2000      	movs	r0, #0
 8001874:	f000 f808 	bl	8001888 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001878:	f7ff fdce 	bl	8001418 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800187c:	2300      	movs	r3, #0
}
 800187e:	4618      	mov	r0, r3
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	40023c00 	.word	0x40023c00

08001888 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001890:	4b12      	ldr	r3, [pc, #72]	; (80018dc <HAL_InitTick+0x54>)
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	4b12      	ldr	r3, [pc, #72]	; (80018e0 <HAL_InitTick+0x58>)
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	4619      	mov	r1, r3
 800189a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800189e:	fbb3 f3f1 	udiv	r3, r3, r1
 80018a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80018a6:	4618      	mov	r0, r3
 80018a8:	f000 f943 	bl	8001b32 <HAL_SYSTICK_Config>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e00e      	b.n	80018d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2b0f      	cmp	r3, #15
 80018ba:	d80a      	bhi.n	80018d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018bc:	2200      	movs	r2, #0
 80018be:	6879      	ldr	r1, [r7, #4]
 80018c0:	f04f 30ff 	mov.w	r0, #4294967295
 80018c4:	f000 f90b 	bl	8001ade <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018c8:	4a06      	ldr	r2, [pc, #24]	; (80018e4 <HAL_InitTick+0x5c>)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018ce:	2300      	movs	r3, #0
 80018d0:	e000      	b.n	80018d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	3708      	adds	r7, #8
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	20000400 	.word	0x20000400
 80018e0:	20000408 	.word	0x20000408
 80018e4:	20000404 	.word	0x20000404

080018e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018ec:	4b06      	ldr	r3, [pc, #24]	; (8001908 <HAL_IncTick+0x20>)
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	461a      	mov	r2, r3
 80018f2:	4b06      	ldr	r3, [pc, #24]	; (800190c <HAL_IncTick+0x24>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4413      	add	r3, r2
 80018f8:	4a04      	ldr	r2, [pc, #16]	; (800190c <HAL_IncTick+0x24>)
 80018fa:	6013      	str	r3, [r2, #0]
}
 80018fc:	bf00      	nop
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	20000408 	.word	0x20000408
 800190c:	20000a70 	.word	0x20000a70

08001910 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  return uwTick;
 8001914:	4b03      	ldr	r3, [pc, #12]	; (8001924 <HAL_GetTick+0x14>)
 8001916:	681b      	ldr	r3, [r3, #0]
}
 8001918:	4618      	mov	r0, r3
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	20000a70 	.word	0x20000a70

08001928 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001928:	b480      	push	{r7}
 800192a:	b085      	sub	sp, #20
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	f003 0307 	and.w	r3, r3, #7
 8001936:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001938:	4b0c      	ldr	r3, [pc, #48]	; (800196c <__NVIC_SetPriorityGrouping+0x44>)
 800193a:	68db      	ldr	r3, [r3, #12]
 800193c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800193e:	68ba      	ldr	r2, [r7, #8]
 8001940:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001944:	4013      	ands	r3, r2
 8001946:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001950:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001954:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001958:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800195a:	4a04      	ldr	r2, [pc, #16]	; (800196c <__NVIC_SetPriorityGrouping+0x44>)
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	60d3      	str	r3, [r2, #12]
}
 8001960:	bf00      	nop
 8001962:	3714      	adds	r7, #20
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr
 800196c:	e000ed00 	.word	0xe000ed00

08001970 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001974:	4b04      	ldr	r3, [pc, #16]	; (8001988 <__NVIC_GetPriorityGrouping+0x18>)
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	0a1b      	lsrs	r3, r3, #8
 800197a:	f003 0307 	and.w	r3, r3, #7
}
 800197e:	4618      	mov	r0, r3
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr
 8001988:	e000ed00 	.word	0xe000ed00

0800198c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	4603      	mov	r3, r0
 8001994:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800199a:	2b00      	cmp	r3, #0
 800199c:	db0b      	blt.n	80019b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800199e:	79fb      	ldrb	r3, [r7, #7]
 80019a0:	f003 021f 	and.w	r2, r3, #31
 80019a4:	4907      	ldr	r1, [pc, #28]	; (80019c4 <__NVIC_EnableIRQ+0x38>)
 80019a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019aa:	095b      	lsrs	r3, r3, #5
 80019ac:	2001      	movs	r0, #1
 80019ae:	fa00 f202 	lsl.w	r2, r0, r2
 80019b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019b6:	bf00      	nop
 80019b8:	370c      	adds	r7, #12
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	e000e100 	.word	0xe000e100

080019c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	4603      	mov	r3, r0
 80019d0:	6039      	str	r1, [r7, #0]
 80019d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	db0a      	blt.n	80019f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	b2da      	uxtb	r2, r3
 80019e0:	490c      	ldr	r1, [pc, #48]	; (8001a14 <__NVIC_SetPriority+0x4c>)
 80019e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e6:	0112      	lsls	r2, r2, #4
 80019e8:	b2d2      	uxtb	r2, r2
 80019ea:	440b      	add	r3, r1
 80019ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019f0:	e00a      	b.n	8001a08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	b2da      	uxtb	r2, r3
 80019f6:	4908      	ldr	r1, [pc, #32]	; (8001a18 <__NVIC_SetPriority+0x50>)
 80019f8:	79fb      	ldrb	r3, [r7, #7]
 80019fa:	f003 030f 	and.w	r3, r3, #15
 80019fe:	3b04      	subs	r3, #4
 8001a00:	0112      	lsls	r2, r2, #4
 8001a02:	b2d2      	uxtb	r2, r2
 8001a04:	440b      	add	r3, r1
 8001a06:	761a      	strb	r2, [r3, #24]
}
 8001a08:	bf00      	nop
 8001a0a:	370c      	adds	r7, #12
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr
 8001a14:	e000e100 	.word	0xe000e100
 8001a18:	e000ed00 	.word	0xe000ed00

08001a1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b089      	sub	sp, #36	; 0x24
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	60f8      	str	r0, [r7, #12]
 8001a24:	60b9      	str	r1, [r7, #8]
 8001a26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	f003 0307 	and.w	r3, r3, #7
 8001a2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a30:	69fb      	ldr	r3, [r7, #28]
 8001a32:	f1c3 0307 	rsb	r3, r3, #7
 8001a36:	2b04      	cmp	r3, #4
 8001a38:	bf28      	it	cs
 8001a3a:	2304      	movcs	r3, #4
 8001a3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	3304      	adds	r3, #4
 8001a42:	2b06      	cmp	r3, #6
 8001a44:	d902      	bls.n	8001a4c <NVIC_EncodePriority+0x30>
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	3b03      	subs	r3, #3
 8001a4a:	e000      	b.n	8001a4e <NVIC_EncodePriority+0x32>
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a50:	f04f 32ff 	mov.w	r2, #4294967295
 8001a54:	69bb      	ldr	r3, [r7, #24]
 8001a56:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5a:	43da      	mvns	r2, r3
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	401a      	ands	r2, r3
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a64:	f04f 31ff 	mov.w	r1, #4294967295
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a6e:	43d9      	mvns	r1, r3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a74:	4313      	orrs	r3, r2
         );
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3724      	adds	r7, #36	; 0x24
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
	...

08001a84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	3b01      	subs	r3, #1
 8001a90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a94:	d301      	bcc.n	8001a9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a96:	2301      	movs	r3, #1
 8001a98:	e00f      	b.n	8001aba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a9a:	4a0a      	ldr	r2, [pc, #40]	; (8001ac4 <SysTick_Config+0x40>)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	3b01      	subs	r3, #1
 8001aa0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001aa2:	210f      	movs	r1, #15
 8001aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8001aa8:	f7ff ff8e 	bl	80019c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001aac:	4b05      	ldr	r3, [pc, #20]	; (8001ac4 <SysTick_Config+0x40>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ab2:	4b04      	ldr	r3, [pc, #16]	; (8001ac4 <SysTick_Config+0x40>)
 8001ab4:	2207      	movs	r2, #7
 8001ab6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ab8:	2300      	movs	r3, #0
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3708      	adds	r7, #8
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	e000e010 	.word	0xe000e010

08001ac8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f7ff ff29 	bl	8001928 <__NVIC_SetPriorityGrouping>
}
 8001ad6:	bf00      	nop
 8001ad8:	3708      	adds	r7, #8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}

08001ade <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ade:	b580      	push	{r7, lr}
 8001ae0:	b086      	sub	sp, #24
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	60b9      	str	r1, [r7, #8]
 8001ae8:	607a      	str	r2, [r7, #4]
 8001aea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001aec:	2300      	movs	r3, #0
 8001aee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001af0:	f7ff ff3e 	bl	8001970 <__NVIC_GetPriorityGrouping>
 8001af4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001af6:	687a      	ldr	r2, [r7, #4]
 8001af8:	68b9      	ldr	r1, [r7, #8]
 8001afa:	6978      	ldr	r0, [r7, #20]
 8001afc:	f7ff ff8e 	bl	8001a1c <NVIC_EncodePriority>
 8001b00:	4602      	mov	r2, r0
 8001b02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b06:	4611      	mov	r1, r2
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7ff ff5d 	bl	80019c8 <__NVIC_SetPriority>
}
 8001b0e:	bf00      	nop
 8001b10:	3718      	adds	r7, #24
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}

08001b16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b16:	b580      	push	{r7, lr}
 8001b18:	b082      	sub	sp, #8
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b24:	4618      	mov	r0, r3
 8001b26:	f7ff ff31 	bl	800198c <__NVIC_EnableIRQ>
}
 8001b2a:	bf00      	nop
 8001b2c:	3708      	adds	r7, #8
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}

08001b32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b32:	b580      	push	{r7, lr}
 8001b34:	b082      	sub	sp, #8
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f7ff ffa2 	bl	8001a84 <SysTick_Config>
 8001b40:	4603      	mov	r3, r0
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3708      	adds	r7, #8
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}

08001b4a <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001b4a:	b580      	push	{r7, lr}
 8001b4c:	b082      	sub	sp, #8
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d101      	bne.n	8001b5c <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e00e      	b.n	8001b7a <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	795b      	ldrb	r3, [r3, #5]
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d105      	bne.n	8001b72 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f7ff f9b1 	bl	8000ed4 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2201      	movs	r2, #1
 8001b76:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001b78:	2300      	movs	r3, #0
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3708      	adds	r7, #8
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
	...

08001b84 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b086      	sub	sp, #24
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001b90:	f7ff febe 	bl	8001910 <HAL_GetTick>
 8001b94:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d101      	bne.n	8001ba0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e099      	b.n	8001cd4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2202      	movs	r2, #2
 8001ba4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2200      	movs	r2, #0
 8001bac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f022 0201 	bic.w	r2, r2, #1
 8001bbe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bc0:	e00f      	b.n	8001be2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001bc2:	f7ff fea5 	bl	8001910 <HAL_GetTick>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	1ad3      	subs	r3, r2, r3
 8001bcc:	2b05      	cmp	r3, #5
 8001bce:	d908      	bls.n	8001be2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2220      	movs	r2, #32
 8001bd4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2203      	movs	r2, #3
 8001bda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001bde:	2303      	movs	r3, #3
 8001be0:	e078      	b.n	8001cd4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f003 0301 	and.w	r3, r3, #1
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d1e8      	bne.n	8001bc2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001bf8:	697a      	ldr	r2, [r7, #20]
 8001bfa:	4b38      	ldr	r3, [pc, #224]	; (8001cdc <HAL_DMA_Init+0x158>)
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	685a      	ldr	r2, [r3, #4]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	691b      	ldr	r3, [r3, #16]
 8001c14:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c1a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	699b      	ldr	r3, [r3, #24]
 8001c20:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c26:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6a1b      	ldr	r3, [r3, #32]
 8001c2c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c2e:	697a      	ldr	r2, [r7, #20]
 8001c30:	4313      	orrs	r3, r2
 8001c32:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c38:	2b04      	cmp	r3, #4
 8001c3a:	d107      	bne.n	8001c4c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c44:	4313      	orrs	r3, r2
 8001c46:	697a      	ldr	r2, [r7, #20]
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	697a      	ldr	r2, [r7, #20]
 8001c52:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	695b      	ldr	r3, [r3, #20]
 8001c5a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	f023 0307 	bic.w	r3, r3, #7
 8001c62:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c68:	697a      	ldr	r2, [r7, #20]
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c72:	2b04      	cmp	r3, #4
 8001c74:	d117      	bne.n	8001ca6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c7a:	697a      	ldr	r2, [r7, #20]
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d00e      	beq.n	8001ca6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	f000 fb01 	bl	8002290 <DMA_CheckFifoParam>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d008      	beq.n	8001ca6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2240      	movs	r2, #64	; 0x40
 8001c98:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e016      	b.n	8001cd4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	697a      	ldr	r2, [r7, #20]
 8001cac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f000 fab8 	bl	8002224 <DMA_CalcBaseAndBitshift>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cbc:	223f      	movs	r2, #63	; 0x3f
 8001cbe:	409a      	lsls	r2, r3
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2201      	movs	r2, #1
 8001cce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001cd2:	2300      	movs	r3, #0
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3718      	adds	r7, #24
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	f010803f 	.word	0xf010803f

08001ce0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b086      	sub	sp, #24
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	60f8      	str	r0, [r7, #12]
 8001ce8:	60b9      	str	r1, [r7, #8]
 8001cea:	607a      	str	r2, [r7, #4]
 8001cec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cf6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d101      	bne.n	8001d06 <HAL_DMA_Start_IT+0x26>
 8001d02:	2302      	movs	r3, #2
 8001d04:	e040      	b.n	8001d88 <HAL_DMA_Start_IT+0xa8>
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	2201      	movs	r2, #1
 8001d0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d12f      	bne.n	8001d7a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	2202      	movs	r2, #2
 8001d1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	2200      	movs	r2, #0
 8001d26:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	687a      	ldr	r2, [r7, #4]
 8001d2c:	68b9      	ldr	r1, [r7, #8]
 8001d2e:	68f8      	ldr	r0, [r7, #12]
 8001d30:	f000 fa4a 	bl	80021c8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d38:	223f      	movs	r2, #63	; 0x3f
 8001d3a:	409a      	lsls	r2, r3
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f042 0216 	orr.w	r2, r2, #22
 8001d4e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d007      	beq.n	8001d68 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f042 0208 	orr.w	r2, r2, #8
 8001d66:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f042 0201 	orr.w	r2, r2, #1
 8001d76:	601a      	str	r2, [r3, #0]
 8001d78:	e005      	b.n	8001d86 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001d82:	2302      	movs	r3, #2
 8001d84:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001d86:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3718      	adds	r7, #24
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}

08001d90 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b084      	sub	sp, #16
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d9c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001d9e:	f7ff fdb7 	bl	8001910 <HAL_GetTick>
 8001da2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	2b02      	cmp	r3, #2
 8001dae:	d008      	beq.n	8001dc2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2280      	movs	r2, #128	; 0x80
 8001db4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2200      	movs	r2, #0
 8001dba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e052      	b.n	8001e68 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f022 0216 	bic.w	r2, r2, #22
 8001dd0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	695a      	ldr	r2, [r3, #20]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001de0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d103      	bne.n	8001df2 <HAL_DMA_Abort+0x62>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d007      	beq.n	8001e02 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f022 0208 	bic.w	r2, r2, #8
 8001e00:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f022 0201 	bic.w	r2, r2, #1
 8001e10:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e12:	e013      	b.n	8001e3c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e14:	f7ff fd7c 	bl	8001910 <HAL_GetTick>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	2b05      	cmp	r3, #5
 8001e20:	d90c      	bls.n	8001e3c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2220      	movs	r2, #32
 8001e26:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2203      	movs	r2, #3
 8001e2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2200      	movs	r2, #0
 8001e34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001e38:	2303      	movs	r3, #3
 8001e3a:	e015      	b.n	8001e68 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 0301 	and.w	r3, r3, #1
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d1e4      	bne.n	8001e14 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e4e:	223f      	movs	r2, #63	; 0x3f
 8001e50:	409a      	lsls	r2, r3
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2201      	movs	r2, #1
 8001e5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2200      	movs	r2, #0
 8001e62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001e66:	2300      	movs	r3, #0
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3710      	adds	r7, #16
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}

08001e70 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	2b02      	cmp	r3, #2
 8001e82:	d004      	beq.n	8001e8e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2280      	movs	r2, #128	; 0x80
 8001e88:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e00c      	b.n	8001ea8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2205      	movs	r2, #5
 8001e92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f022 0201 	bic.w	r2, r2, #1
 8001ea4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001ea6:	2300      	movs	r3, #0
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	370c      	adds	r7, #12
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr

08001eb4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b086      	sub	sp, #24
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001ec0:	4b8e      	ldr	r3, [pc, #568]	; (80020fc <HAL_DMA_IRQHandler+0x248>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a8e      	ldr	r2, [pc, #568]	; (8002100 <HAL_DMA_IRQHandler+0x24c>)
 8001ec6:	fba2 2303 	umull	r2, r3, r2, r3
 8001eca:	0a9b      	lsrs	r3, r3, #10
 8001ecc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ed2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ede:	2208      	movs	r2, #8
 8001ee0:	409a      	lsls	r2, r3
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d01a      	beq.n	8001f20 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 0304 	and.w	r3, r3, #4
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d013      	beq.n	8001f20 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f022 0204 	bic.w	r2, r2, #4
 8001f06:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f0c:	2208      	movs	r2, #8
 8001f0e:	409a      	lsls	r2, r3
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f18:	f043 0201 	orr.w	r2, r3, #1
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f24:	2201      	movs	r2, #1
 8001f26:	409a      	lsls	r2, r3
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d012      	beq.n	8001f56 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	695b      	ldr	r3, [r3, #20]
 8001f36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d00b      	beq.n	8001f56 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f42:	2201      	movs	r2, #1
 8001f44:	409a      	lsls	r2, r3
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f4e:	f043 0202 	orr.w	r2, r3, #2
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f5a:	2204      	movs	r2, #4
 8001f5c:	409a      	lsls	r2, r3
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	4013      	ands	r3, r2
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d012      	beq.n	8001f8c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 0302 	and.w	r3, r3, #2
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d00b      	beq.n	8001f8c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f78:	2204      	movs	r2, #4
 8001f7a:	409a      	lsls	r2, r3
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f84:	f043 0204 	orr.w	r2, r3, #4
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f90:	2210      	movs	r2, #16
 8001f92:	409a      	lsls	r2, r3
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	4013      	ands	r3, r2
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d043      	beq.n	8002024 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0308 	and.w	r3, r3, #8
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d03c      	beq.n	8002024 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fae:	2210      	movs	r2, #16
 8001fb0:	409a      	lsls	r2, r3
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d018      	beq.n	8001ff6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d108      	bne.n	8001fe4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d024      	beq.n	8002024 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	4798      	blx	r3
 8001fe2:	e01f      	b.n	8002024 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d01b      	beq.n	8002024 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	4798      	blx	r3
 8001ff4:	e016      	b.n	8002024 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002000:	2b00      	cmp	r3, #0
 8002002:	d107      	bne.n	8002014 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f022 0208 	bic.w	r2, r2, #8
 8002012:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002018:	2b00      	cmp	r3, #0
 800201a:	d003      	beq.n	8002024 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002028:	2220      	movs	r2, #32
 800202a:	409a      	lsls	r2, r3
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	4013      	ands	r3, r2
 8002030:	2b00      	cmp	r3, #0
 8002032:	f000 808f 	beq.w	8002154 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0310 	and.w	r3, r3, #16
 8002040:	2b00      	cmp	r3, #0
 8002042:	f000 8087 	beq.w	8002154 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800204a:	2220      	movs	r2, #32
 800204c:	409a      	lsls	r2, r3
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002058:	b2db      	uxtb	r3, r3
 800205a:	2b05      	cmp	r3, #5
 800205c:	d136      	bne.n	80020cc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f022 0216 	bic.w	r2, r2, #22
 800206c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	695a      	ldr	r2, [r3, #20]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800207c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002082:	2b00      	cmp	r3, #0
 8002084:	d103      	bne.n	800208e <HAL_DMA_IRQHandler+0x1da>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800208a:	2b00      	cmp	r3, #0
 800208c:	d007      	beq.n	800209e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f022 0208 	bic.w	r2, r2, #8
 800209c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020a2:	223f      	movs	r2, #63	; 0x3f
 80020a4:	409a      	lsls	r2, r3
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2201      	movs	r2, #1
 80020ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2200      	movs	r2, #0
 80020b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d07e      	beq.n	80021c0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	4798      	blx	r3
        }
        return;
 80020ca:	e079      	b.n	80021c0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d01d      	beq.n	8002116 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d10d      	bne.n	8002104 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d031      	beq.n	8002154 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	4798      	blx	r3
 80020f8:	e02c      	b.n	8002154 <HAL_DMA_IRQHandler+0x2a0>
 80020fa:	bf00      	nop
 80020fc:	20000400 	.word	0x20000400
 8002100:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002108:	2b00      	cmp	r3, #0
 800210a:	d023      	beq.n	8002154 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	4798      	blx	r3
 8002114:	e01e      	b.n	8002154 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002120:	2b00      	cmp	r3, #0
 8002122:	d10f      	bne.n	8002144 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f022 0210 	bic.w	r2, r2, #16
 8002132:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2201      	movs	r2, #1
 8002138:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2200      	movs	r2, #0
 8002140:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002148:	2b00      	cmp	r3, #0
 800214a:	d003      	beq.n	8002154 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002158:	2b00      	cmp	r3, #0
 800215a:	d032      	beq.n	80021c2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002160:	f003 0301 	and.w	r3, r3, #1
 8002164:	2b00      	cmp	r3, #0
 8002166:	d022      	beq.n	80021ae <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2205      	movs	r2, #5
 800216c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f022 0201 	bic.w	r2, r2, #1
 800217e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	3301      	adds	r3, #1
 8002184:	60bb      	str	r3, [r7, #8]
 8002186:	697a      	ldr	r2, [r7, #20]
 8002188:	429a      	cmp	r2, r3
 800218a:	d307      	bcc.n	800219c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0301 	and.w	r3, r3, #1
 8002196:	2b00      	cmp	r3, #0
 8002198:	d1f2      	bne.n	8002180 <HAL_DMA_IRQHandler+0x2cc>
 800219a:	e000      	b.n	800219e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800219c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2201      	movs	r2, #1
 80021a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2200      	movs	r2, #0
 80021aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d005      	beq.n	80021c2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	4798      	blx	r3
 80021be:	e000      	b.n	80021c2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80021c0:	bf00      	nop
    }
  }
}
 80021c2:	3718      	adds	r7, #24
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}

080021c8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b085      	sub	sp, #20
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	60f8      	str	r0, [r7, #12]
 80021d0:	60b9      	str	r1, [r7, #8]
 80021d2:	607a      	str	r2, [r7, #4]
 80021d4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80021e4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	683a      	ldr	r2, [r7, #0]
 80021ec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	2b40      	cmp	r3, #64	; 0x40
 80021f4:	d108      	bne.n	8002208 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	68ba      	ldr	r2, [r7, #8]
 8002204:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002206:	e007      	b.n	8002218 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	68ba      	ldr	r2, [r7, #8]
 800220e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	687a      	ldr	r2, [r7, #4]
 8002216:	60da      	str	r2, [r3, #12]
}
 8002218:	bf00      	nop
 800221a:	3714      	adds	r7, #20
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr

08002224 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002224:	b480      	push	{r7}
 8002226:	b085      	sub	sp, #20
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	b2db      	uxtb	r3, r3
 8002232:	3b10      	subs	r3, #16
 8002234:	4a14      	ldr	r2, [pc, #80]	; (8002288 <DMA_CalcBaseAndBitshift+0x64>)
 8002236:	fba2 2303 	umull	r2, r3, r2, r3
 800223a:	091b      	lsrs	r3, r3, #4
 800223c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800223e:	4a13      	ldr	r2, [pc, #76]	; (800228c <DMA_CalcBaseAndBitshift+0x68>)
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	4413      	add	r3, r2
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	461a      	mov	r2, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2b03      	cmp	r3, #3
 8002250:	d909      	bls.n	8002266 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800225a:	f023 0303 	bic.w	r3, r3, #3
 800225e:	1d1a      	adds	r2, r3, #4
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	659a      	str	r2, [r3, #88]	; 0x58
 8002264:	e007      	b.n	8002276 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800226e:	f023 0303 	bic.w	r3, r3, #3
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800227a:	4618      	mov	r0, r3
 800227c:	3714      	adds	r7, #20
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr
 8002286:	bf00      	nop
 8002288:	aaaaaaab 	.word	0xaaaaaaab
 800228c:	08009f6c 	.word	0x08009f6c

08002290 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002290:	b480      	push	{r7}
 8002292:	b085      	sub	sp, #20
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002298:	2300      	movs	r3, #0
 800229a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022a0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	699b      	ldr	r3, [r3, #24]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d11f      	bne.n	80022ea <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	2b03      	cmp	r3, #3
 80022ae:	d856      	bhi.n	800235e <DMA_CheckFifoParam+0xce>
 80022b0:	a201      	add	r2, pc, #4	; (adr r2, 80022b8 <DMA_CheckFifoParam+0x28>)
 80022b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022b6:	bf00      	nop
 80022b8:	080022c9 	.word	0x080022c9
 80022bc:	080022db 	.word	0x080022db
 80022c0:	080022c9 	.word	0x080022c9
 80022c4:	0800235f 	.word	0x0800235f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d046      	beq.n	8002362 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022d8:	e043      	b.n	8002362 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022de:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80022e2:	d140      	bne.n	8002366 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022e8:	e03d      	b.n	8002366 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	699b      	ldr	r3, [r3, #24]
 80022ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022f2:	d121      	bne.n	8002338 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	2b03      	cmp	r3, #3
 80022f8:	d837      	bhi.n	800236a <DMA_CheckFifoParam+0xda>
 80022fa:	a201      	add	r2, pc, #4	; (adr r2, 8002300 <DMA_CheckFifoParam+0x70>)
 80022fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002300:	08002311 	.word	0x08002311
 8002304:	08002317 	.word	0x08002317
 8002308:	08002311 	.word	0x08002311
 800230c:	08002329 	.word	0x08002329
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	73fb      	strb	r3, [r7, #15]
      break;
 8002314:	e030      	b.n	8002378 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800231a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d025      	beq.n	800236e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002326:	e022      	b.n	800236e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800232c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002330:	d11f      	bne.n	8002372 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002336:	e01c      	b.n	8002372 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	2b02      	cmp	r3, #2
 800233c:	d903      	bls.n	8002346 <DMA_CheckFifoParam+0xb6>
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	2b03      	cmp	r3, #3
 8002342:	d003      	beq.n	800234c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002344:	e018      	b.n	8002378 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	73fb      	strb	r3, [r7, #15]
      break;
 800234a:	e015      	b.n	8002378 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002350:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002354:	2b00      	cmp	r3, #0
 8002356:	d00e      	beq.n	8002376 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	73fb      	strb	r3, [r7, #15]
      break;
 800235c:	e00b      	b.n	8002376 <DMA_CheckFifoParam+0xe6>
      break;
 800235e:	bf00      	nop
 8002360:	e00a      	b.n	8002378 <DMA_CheckFifoParam+0xe8>
      break;
 8002362:	bf00      	nop
 8002364:	e008      	b.n	8002378 <DMA_CheckFifoParam+0xe8>
      break;
 8002366:	bf00      	nop
 8002368:	e006      	b.n	8002378 <DMA_CheckFifoParam+0xe8>
      break;
 800236a:	bf00      	nop
 800236c:	e004      	b.n	8002378 <DMA_CheckFifoParam+0xe8>
      break;
 800236e:	bf00      	nop
 8002370:	e002      	b.n	8002378 <DMA_CheckFifoParam+0xe8>
      break;   
 8002372:	bf00      	nop
 8002374:	e000      	b.n	8002378 <DMA_CheckFifoParam+0xe8>
      break;
 8002376:	bf00      	nop
    }
  } 
  
  return status; 
 8002378:	7bfb      	ldrb	r3, [r7, #15]
}
 800237a:	4618      	mov	r0, r3
 800237c:	3714      	adds	r7, #20
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr
 8002386:	bf00      	nop

08002388 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002388:	b480      	push	{r7}
 800238a:	b089      	sub	sp, #36	; 0x24
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002392:	2300      	movs	r3, #0
 8002394:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002396:	2300      	movs	r3, #0
 8002398:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800239a:	2300      	movs	r3, #0
 800239c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800239e:	2300      	movs	r3, #0
 80023a0:	61fb      	str	r3, [r7, #28]
 80023a2:	e16b      	b.n	800267c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80023a4:	2201      	movs	r2, #1
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	697a      	ldr	r2, [r7, #20]
 80023b4:	4013      	ands	r3, r2
 80023b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023b8:	693a      	ldr	r2, [r7, #16]
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	429a      	cmp	r2, r3
 80023be:	f040 815a 	bne.w	8002676 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	f003 0303 	and.w	r3, r3, #3
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	d005      	beq.n	80023da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d130      	bne.n	800243c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	005b      	lsls	r3, r3, #1
 80023e4:	2203      	movs	r2, #3
 80023e6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ea:	43db      	mvns	r3, r3
 80023ec:	69ba      	ldr	r2, [r7, #24]
 80023ee:	4013      	ands	r3, r2
 80023f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	68da      	ldr	r2, [r3, #12]
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	005b      	lsls	r3, r3, #1
 80023fa:	fa02 f303 	lsl.w	r3, r2, r3
 80023fe:	69ba      	ldr	r2, [r7, #24]
 8002400:	4313      	orrs	r3, r2
 8002402:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	69ba      	ldr	r2, [r7, #24]
 8002408:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002410:	2201      	movs	r2, #1
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	fa02 f303 	lsl.w	r3, r2, r3
 8002418:	43db      	mvns	r3, r3
 800241a:	69ba      	ldr	r2, [r7, #24]
 800241c:	4013      	ands	r3, r2
 800241e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	091b      	lsrs	r3, r3, #4
 8002426:	f003 0201 	and.w	r2, r3, #1
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	fa02 f303 	lsl.w	r3, r2, r3
 8002430:	69ba      	ldr	r2, [r7, #24]
 8002432:	4313      	orrs	r3, r2
 8002434:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	69ba      	ldr	r2, [r7, #24]
 800243a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f003 0303 	and.w	r3, r3, #3
 8002444:	2b03      	cmp	r3, #3
 8002446:	d017      	beq.n	8002478 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	005b      	lsls	r3, r3, #1
 8002452:	2203      	movs	r2, #3
 8002454:	fa02 f303 	lsl.w	r3, r2, r3
 8002458:	43db      	mvns	r3, r3
 800245a:	69ba      	ldr	r2, [r7, #24]
 800245c:	4013      	ands	r3, r2
 800245e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	689a      	ldr	r2, [r3, #8]
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	005b      	lsls	r3, r3, #1
 8002468:	fa02 f303 	lsl.w	r3, r2, r3
 800246c:	69ba      	ldr	r2, [r7, #24]
 800246e:	4313      	orrs	r3, r2
 8002470:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	69ba      	ldr	r2, [r7, #24]
 8002476:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f003 0303 	and.w	r3, r3, #3
 8002480:	2b02      	cmp	r3, #2
 8002482:	d123      	bne.n	80024cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	08da      	lsrs	r2, r3, #3
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	3208      	adds	r2, #8
 800248c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002490:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	f003 0307 	and.w	r3, r3, #7
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	220f      	movs	r2, #15
 800249c:	fa02 f303 	lsl.w	r3, r2, r3
 80024a0:	43db      	mvns	r3, r3
 80024a2:	69ba      	ldr	r2, [r7, #24]
 80024a4:	4013      	ands	r3, r2
 80024a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	691a      	ldr	r2, [r3, #16]
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	f003 0307 	and.w	r3, r3, #7
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	fa02 f303 	lsl.w	r3, r2, r3
 80024b8:	69ba      	ldr	r2, [r7, #24]
 80024ba:	4313      	orrs	r3, r2
 80024bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	08da      	lsrs	r2, r3, #3
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	3208      	adds	r2, #8
 80024c6:	69b9      	ldr	r1, [r7, #24]
 80024c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	005b      	lsls	r3, r3, #1
 80024d6:	2203      	movs	r2, #3
 80024d8:	fa02 f303 	lsl.w	r3, r2, r3
 80024dc:	43db      	mvns	r3, r3
 80024de:	69ba      	ldr	r2, [r7, #24]
 80024e0:	4013      	ands	r3, r2
 80024e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f003 0203 	and.w	r2, r3, #3
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	005b      	lsls	r3, r3, #1
 80024f0:	fa02 f303 	lsl.w	r3, r2, r3
 80024f4:	69ba      	ldr	r2, [r7, #24]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	69ba      	ldr	r2, [r7, #24]
 80024fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002508:	2b00      	cmp	r3, #0
 800250a:	f000 80b4 	beq.w	8002676 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800250e:	2300      	movs	r3, #0
 8002510:	60fb      	str	r3, [r7, #12]
 8002512:	4b60      	ldr	r3, [pc, #384]	; (8002694 <HAL_GPIO_Init+0x30c>)
 8002514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002516:	4a5f      	ldr	r2, [pc, #380]	; (8002694 <HAL_GPIO_Init+0x30c>)
 8002518:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800251c:	6453      	str	r3, [r2, #68]	; 0x44
 800251e:	4b5d      	ldr	r3, [pc, #372]	; (8002694 <HAL_GPIO_Init+0x30c>)
 8002520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002522:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002526:	60fb      	str	r3, [r7, #12]
 8002528:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800252a:	4a5b      	ldr	r2, [pc, #364]	; (8002698 <HAL_GPIO_Init+0x310>)
 800252c:	69fb      	ldr	r3, [r7, #28]
 800252e:	089b      	lsrs	r3, r3, #2
 8002530:	3302      	adds	r3, #2
 8002532:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002536:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	f003 0303 	and.w	r3, r3, #3
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	220f      	movs	r2, #15
 8002542:	fa02 f303 	lsl.w	r3, r2, r3
 8002546:	43db      	mvns	r3, r3
 8002548:	69ba      	ldr	r2, [r7, #24]
 800254a:	4013      	ands	r3, r2
 800254c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4a52      	ldr	r2, [pc, #328]	; (800269c <HAL_GPIO_Init+0x314>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d02b      	beq.n	80025ae <HAL_GPIO_Init+0x226>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	4a51      	ldr	r2, [pc, #324]	; (80026a0 <HAL_GPIO_Init+0x318>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d025      	beq.n	80025aa <HAL_GPIO_Init+0x222>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	4a50      	ldr	r2, [pc, #320]	; (80026a4 <HAL_GPIO_Init+0x31c>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d01f      	beq.n	80025a6 <HAL_GPIO_Init+0x21e>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	4a4f      	ldr	r2, [pc, #316]	; (80026a8 <HAL_GPIO_Init+0x320>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d019      	beq.n	80025a2 <HAL_GPIO_Init+0x21a>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	4a4e      	ldr	r2, [pc, #312]	; (80026ac <HAL_GPIO_Init+0x324>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d013      	beq.n	800259e <HAL_GPIO_Init+0x216>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	4a4d      	ldr	r2, [pc, #308]	; (80026b0 <HAL_GPIO_Init+0x328>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d00d      	beq.n	800259a <HAL_GPIO_Init+0x212>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	4a4c      	ldr	r2, [pc, #304]	; (80026b4 <HAL_GPIO_Init+0x32c>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d007      	beq.n	8002596 <HAL_GPIO_Init+0x20e>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4a4b      	ldr	r2, [pc, #300]	; (80026b8 <HAL_GPIO_Init+0x330>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d101      	bne.n	8002592 <HAL_GPIO_Init+0x20a>
 800258e:	2307      	movs	r3, #7
 8002590:	e00e      	b.n	80025b0 <HAL_GPIO_Init+0x228>
 8002592:	2308      	movs	r3, #8
 8002594:	e00c      	b.n	80025b0 <HAL_GPIO_Init+0x228>
 8002596:	2306      	movs	r3, #6
 8002598:	e00a      	b.n	80025b0 <HAL_GPIO_Init+0x228>
 800259a:	2305      	movs	r3, #5
 800259c:	e008      	b.n	80025b0 <HAL_GPIO_Init+0x228>
 800259e:	2304      	movs	r3, #4
 80025a0:	e006      	b.n	80025b0 <HAL_GPIO_Init+0x228>
 80025a2:	2303      	movs	r3, #3
 80025a4:	e004      	b.n	80025b0 <HAL_GPIO_Init+0x228>
 80025a6:	2302      	movs	r3, #2
 80025a8:	e002      	b.n	80025b0 <HAL_GPIO_Init+0x228>
 80025aa:	2301      	movs	r3, #1
 80025ac:	e000      	b.n	80025b0 <HAL_GPIO_Init+0x228>
 80025ae:	2300      	movs	r3, #0
 80025b0:	69fa      	ldr	r2, [r7, #28]
 80025b2:	f002 0203 	and.w	r2, r2, #3
 80025b6:	0092      	lsls	r2, r2, #2
 80025b8:	4093      	lsls	r3, r2
 80025ba:	69ba      	ldr	r2, [r7, #24]
 80025bc:	4313      	orrs	r3, r2
 80025be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025c0:	4935      	ldr	r1, [pc, #212]	; (8002698 <HAL_GPIO_Init+0x310>)
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	089b      	lsrs	r3, r3, #2
 80025c6:	3302      	adds	r3, #2
 80025c8:	69ba      	ldr	r2, [r7, #24]
 80025ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025ce:	4b3b      	ldr	r3, [pc, #236]	; (80026bc <HAL_GPIO_Init+0x334>)
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	43db      	mvns	r3, r3
 80025d8:	69ba      	ldr	r2, [r7, #24]
 80025da:	4013      	ands	r3, r2
 80025dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d003      	beq.n	80025f2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80025ea:	69ba      	ldr	r2, [r7, #24]
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80025f2:	4a32      	ldr	r2, [pc, #200]	; (80026bc <HAL_GPIO_Init+0x334>)
 80025f4:	69bb      	ldr	r3, [r7, #24]
 80025f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025f8:	4b30      	ldr	r3, [pc, #192]	; (80026bc <HAL_GPIO_Init+0x334>)
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	43db      	mvns	r3, r3
 8002602:	69ba      	ldr	r2, [r7, #24]
 8002604:	4013      	ands	r3, r2
 8002606:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002610:	2b00      	cmp	r3, #0
 8002612:	d003      	beq.n	800261c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002614:	69ba      	ldr	r2, [r7, #24]
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	4313      	orrs	r3, r2
 800261a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800261c:	4a27      	ldr	r2, [pc, #156]	; (80026bc <HAL_GPIO_Init+0x334>)
 800261e:	69bb      	ldr	r3, [r7, #24]
 8002620:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002622:	4b26      	ldr	r3, [pc, #152]	; (80026bc <HAL_GPIO_Init+0x334>)
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	43db      	mvns	r3, r3
 800262c:	69ba      	ldr	r2, [r7, #24]
 800262e:	4013      	ands	r3, r2
 8002630:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800263a:	2b00      	cmp	r3, #0
 800263c:	d003      	beq.n	8002646 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800263e:	69ba      	ldr	r2, [r7, #24]
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	4313      	orrs	r3, r2
 8002644:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002646:	4a1d      	ldr	r2, [pc, #116]	; (80026bc <HAL_GPIO_Init+0x334>)
 8002648:	69bb      	ldr	r3, [r7, #24]
 800264a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800264c:	4b1b      	ldr	r3, [pc, #108]	; (80026bc <HAL_GPIO_Init+0x334>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	43db      	mvns	r3, r3
 8002656:	69ba      	ldr	r2, [r7, #24]
 8002658:	4013      	ands	r3, r2
 800265a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002664:	2b00      	cmp	r3, #0
 8002666:	d003      	beq.n	8002670 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002668:	69ba      	ldr	r2, [r7, #24]
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	4313      	orrs	r3, r2
 800266e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002670:	4a12      	ldr	r2, [pc, #72]	; (80026bc <HAL_GPIO_Init+0x334>)
 8002672:	69bb      	ldr	r3, [r7, #24]
 8002674:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	3301      	adds	r3, #1
 800267a:	61fb      	str	r3, [r7, #28]
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	2b0f      	cmp	r3, #15
 8002680:	f67f ae90 	bls.w	80023a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002684:	bf00      	nop
 8002686:	bf00      	nop
 8002688:	3724      	adds	r7, #36	; 0x24
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr
 8002692:	bf00      	nop
 8002694:	40023800 	.word	0x40023800
 8002698:	40013800 	.word	0x40013800
 800269c:	40020000 	.word	0x40020000
 80026a0:	40020400 	.word	0x40020400
 80026a4:	40020800 	.word	0x40020800
 80026a8:	40020c00 	.word	0x40020c00
 80026ac:	40021000 	.word	0x40021000
 80026b0:	40021400 	.word	0x40021400
 80026b4:	40021800 	.word	0x40021800
 80026b8:	40021c00 	.word	0x40021c00
 80026bc:	40013c00 	.word	0x40013c00

080026c0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b088      	sub	sp, #32
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d101      	bne.n	80026d2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e128      	b.n	8002924 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d109      	bne.n	80026f2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2200      	movs	r2, #0
 80026e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4a90      	ldr	r2, [pc, #576]	; (800292c <HAL_I2S_Init+0x26c>)
 80026ea:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f7fe fca5 	bl	800103c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2202      	movs	r2, #2
 80026f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	69db      	ldr	r3, [r3, #28]
 8002700:	687a      	ldr	r2, [r7, #4]
 8002702:	6812      	ldr	r2, [r2, #0]
 8002704:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002708:	f023 030f 	bic.w	r3, r3, #15
 800270c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	2202      	movs	r2, #2
 8002714:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	695b      	ldr	r3, [r3, #20]
 800271a:	2b02      	cmp	r3, #2
 800271c:	d060      	beq.n	80027e0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	68db      	ldr	r3, [r3, #12]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d102      	bne.n	800272c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002726:	2310      	movs	r3, #16
 8002728:	617b      	str	r3, [r7, #20]
 800272a:	e001      	b.n	8002730 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800272c:	2320      	movs	r3, #32
 800272e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	2b20      	cmp	r3, #32
 8002736:	d802      	bhi.n	800273e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	005b      	lsls	r3, r3, #1
 800273c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800273e:	2001      	movs	r0, #1
 8002740:	f001 fae0 	bl	8003d04 <HAL_RCCEx_GetPeriphCLKFreq>
 8002744:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	691b      	ldr	r3, [r3, #16]
 800274a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800274e:	d125      	bne.n	800279c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d010      	beq.n	800277a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	68fa      	ldr	r2, [r7, #12]
 800275e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002762:	4613      	mov	r3, r2
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	4413      	add	r3, r2
 8002768:	005b      	lsls	r3, r3, #1
 800276a:	461a      	mov	r2, r3
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	695b      	ldr	r3, [r3, #20]
 8002770:	fbb2 f3f3 	udiv	r3, r2, r3
 8002774:	3305      	adds	r3, #5
 8002776:	613b      	str	r3, [r7, #16]
 8002778:	e01f      	b.n	80027ba <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	00db      	lsls	r3, r3, #3
 800277e:	68fa      	ldr	r2, [r7, #12]
 8002780:	fbb2 f2f3 	udiv	r2, r2, r3
 8002784:	4613      	mov	r3, r2
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	4413      	add	r3, r2
 800278a:	005b      	lsls	r3, r3, #1
 800278c:	461a      	mov	r2, r3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	695b      	ldr	r3, [r3, #20]
 8002792:	fbb2 f3f3 	udiv	r3, r2, r3
 8002796:	3305      	adds	r3, #5
 8002798:	613b      	str	r3, [r7, #16]
 800279a:	e00e      	b.n	80027ba <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800279c:	68fa      	ldr	r2, [r7, #12]
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80027a4:	4613      	mov	r3, r2
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	4413      	add	r3, r2
 80027aa:	005b      	lsls	r3, r3, #1
 80027ac:	461a      	mov	r2, r3
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	695b      	ldr	r3, [r3, #20]
 80027b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80027b6:	3305      	adds	r3, #5
 80027b8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	4a5c      	ldr	r2, [pc, #368]	; (8002930 <HAL_I2S_Init+0x270>)
 80027be:	fba2 2303 	umull	r2, r3, r2, r3
 80027c2:	08db      	lsrs	r3, r3, #3
 80027c4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	f003 0301 	and.w	r3, r3, #1
 80027cc:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80027ce:	693a      	ldr	r2, [r7, #16]
 80027d0:	69bb      	ldr	r3, [r7, #24]
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	085b      	lsrs	r3, r3, #1
 80027d6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80027d8:	69bb      	ldr	r3, [r7, #24]
 80027da:	021b      	lsls	r3, r3, #8
 80027dc:	61bb      	str	r3, [r7, #24]
 80027de:	e003      	b.n	80027e8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80027e0:	2302      	movs	r3, #2
 80027e2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80027e4:	2300      	movs	r3, #0
 80027e6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d902      	bls.n	80027f4 <HAL_I2S_Init+0x134>
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	2bff      	cmp	r3, #255	; 0xff
 80027f2:	d907      	bls.n	8002804 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027f8:	f043 0210 	orr.w	r2, r3, #16
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e08f      	b.n	8002924 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	691a      	ldr	r2, [r3, #16]
 8002808:	69bb      	ldr	r3, [r7, #24]
 800280a:	ea42 0103 	orr.w	r1, r2, r3
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	69fa      	ldr	r2, [r7, #28]
 8002814:	430a      	orrs	r2, r1
 8002816:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	69db      	ldr	r3, [r3, #28]
 800281e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002822:	f023 030f 	bic.w	r3, r3, #15
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	6851      	ldr	r1, [r2, #4]
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	6892      	ldr	r2, [r2, #8]
 800282e:	4311      	orrs	r1, r2
 8002830:	687a      	ldr	r2, [r7, #4]
 8002832:	68d2      	ldr	r2, [r2, #12]
 8002834:	4311      	orrs	r1, r2
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	6992      	ldr	r2, [r2, #24]
 800283a:	430a      	orrs	r2, r1
 800283c:	431a      	orrs	r2, r3
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002846:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6a1b      	ldr	r3, [r3, #32]
 800284c:	2b01      	cmp	r3, #1
 800284e:	d161      	bne.n	8002914 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	4a38      	ldr	r2, [pc, #224]	; (8002934 <HAL_I2S_Init+0x274>)
 8002854:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a37      	ldr	r2, [pc, #220]	; (8002938 <HAL_I2S_Init+0x278>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d101      	bne.n	8002864 <HAL_I2S_Init+0x1a4>
 8002860:	4b36      	ldr	r3, [pc, #216]	; (800293c <HAL_I2S_Init+0x27c>)
 8002862:	e001      	b.n	8002868 <HAL_I2S_Init+0x1a8>
 8002864:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002868:	69db      	ldr	r3, [r3, #28]
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	6812      	ldr	r2, [r2, #0]
 800286e:	4932      	ldr	r1, [pc, #200]	; (8002938 <HAL_I2S_Init+0x278>)
 8002870:	428a      	cmp	r2, r1
 8002872:	d101      	bne.n	8002878 <HAL_I2S_Init+0x1b8>
 8002874:	4a31      	ldr	r2, [pc, #196]	; (800293c <HAL_I2S_Init+0x27c>)
 8002876:	e001      	b.n	800287c <HAL_I2S_Init+0x1bc>
 8002878:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800287c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002880:	f023 030f 	bic.w	r3, r3, #15
 8002884:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a2b      	ldr	r2, [pc, #172]	; (8002938 <HAL_I2S_Init+0x278>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d101      	bne.n	8002894 <HAL_I2S_Init+0x1d4>
 8002890:	4b2a      	ldr	r3, [pc, #168]	; (800293c <HAL_I2S_Init+0x27c>)
 8002892:	e001      	b.n	8002898 <HAL_I2S_Init+0x1d8>
 8002894:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002898:	2202      	movs	r2, #2
 800289a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a25      	ldr	r2, [pc, #148]	; (8002938 <HAL_I2S_Init+0x278>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d101      	bne.n	80028aa <HAL_I2S_Init+0x1ea>
 80028a6:	4b25      	ldr	r3, [pc, #148]	; (800293c <HAL_I2S_Init+0x27c>)
 80028a8:	e001      	b.n	80028ae <HAL_I2S_Init+0x1ee>
 80028aa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80028ae:	69db      	ldr	r3, [r3, #28]
 80028b0:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028ba:	d003      	beq.n	80028c4 <HAL_I2S_Init+0x204>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d103      	bne.n	80028cc <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80028c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028c8:	613b      	str	r3, [r7, #16]
 80028ca:	e001      	b.n	80028d0 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80028cc:	2300      	movs	r3, #0
 80028ce:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80028da:	4313      	orrs	r3, r2
 80028dc:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	68db      	ldr	r3, [r3, #12]
 80028e2:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80028e4:	4313      	orrs	r3, r2
 80028e6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	699b      	ldr	r3, [r3, #24]
 80028ec:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80028ee:	4313      	orrs	r3, r2
 80028f0:	b29a      	uxth	r2, r3
 80028f2:	897b      	ldrh	r3, [r7, #10]
 80028f4:	4313      	orrs	r3, r2
 80028f6:	b29b      	uxth	r3, r3
 80028f8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80028fc:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a0d      	ldr	r2, [pc, #52]	; (8002938 <HAL_I2S_Init+0x278>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d101      	bne.n	800290c <HAL_I2S_Init+0x24c>
 8002908:	4b0c      	ldr	r3, [pc, #48]	; (800293c <HAL_I2S_Init+0x27c>)
 800290a:	e001      	b.n	8002910 <HAL_I2S_Init+0x250>
 800290c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002910:	897a      	ldrh	r2, [r7, #10]
 8002912:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2200      	movs	r2, #0
 8002918:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2201      	movs	r2, #1
 800291e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8002922:	2300      	movs	r3, #0
}
 8002924:	4618      	mov	r0, r3
 8002926:	3720      	adds	r7, #32
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}
 800292c:	08002c49 	.word	0x08002c49
 8002930:	cccccccd 	.word	0xcccccccd
 8002934:	08002d5d 	.word	0x08002d5d
 8002938:	40003800 	.word	0x40003800
 800293c:	40003400 	.word	0x40003400

08002940 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b086      	sub	sp, #24
 8002944:	af00      	add	r7, sp, #0
 8002946:	60f8      	str	r0, [r7, #12]
 8002948:	60b9      	str	r1, [r7, #8]
 800294a:	4613      	mov	r3, r2
 800294c:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d002      	beq.n	800295a <HAL_I2S_Receive_DMA+0x1a>
 8002954:	88fb      	ldrh	r3, [r7, #6]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d101      	bne.n	800295e <HAL_I2S_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e0a1      	b.n	8002aa2 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002964:	b2db      	uxtb	r3, r3
 8002966:	2b01      	cmp	r3, #1
 8002968:	d101      	bne.n	800296e <HAL_I2S_Receive_DMA+0x2e>
 800296a:	2302      	movs	r3, #2
 800296c:	e099      	b.n	8002aa2 <HAL_I2S_Receive_DMA+0x162>
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2201      	movs	r2, #1
 8002972:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800297c:	b2db      	uxtb	r3, r3
 800297e:	2b01      	cmp	r3, #1
 8002980:	d005      	beq.n	800298e <HAL_I2S_Receive_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2200      	movs	r2, #0
 8002986:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 800298a:	2302      	movs	r3, #2
 800298c:	e089      	b.n	8002aa2 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	2204      	movs	r2, #4
 8002992:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	2200      	movs	r2, #0
 800299a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pRxBuffPtr = pData;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	68ba      	ldr	r2, [r7, #8]
 80029a0:	62da      	str	r2, [r3, #44]	; 0x2c

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	69db      	ldr	r3, [r3, #28]
 80029a8:	f003 0307 	and.w	r3, r3, #7
 80029ac:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	2b03      	cmp	r3, #3
 80029b2:	d002      	beq.n	80029ba <HAL_I2S_Receive_DMA+0x7a>
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	2b05      	cmp	r3, #5
 80029b8:	d10a      	bne.n	80029d0 <HAL_I2S_Receive_DMA+0x90>
  {
    hi2s->RxXferSize = (Size << 1U);
 80029ba:	88fb      	ldrh	r3, [r7, #6]
 80029bc:	005b      	lsls	r3, r3, #1
 80029be:	b29a      	uxth	r2, r3
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 80029c4:	88fb      	ldrh	r3, [r7, #6]
 80029c6:	005b      	lsls	r3, r3, #1
 80029c8:	b29a      	uxth	r2, r3
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	865a      	strh	r2, [r3, #50]	; 0x32
 80029ce:	e005      	b.n	80029dc <HAL_I2S_Receive_DMA+0x9c>
  }
  else
  {
    hi2s->RxXferSize = Size;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	88fa      	ldrh	r2, [r7, #6]
 80029d4:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	88fa      	ldrh	r2, [r7, #6]
 80029da:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029e0:	4a32      	ldr	r2, [pc, #200]	; (8002aac <HAL_I2S_Receive_DMA+0x16c>)
 80029e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029e8:	4a31      	ldr	r2, [pc, #196]	; (8002ab0 <HAL_I2S_Receive_DMA+0x170>)
 80029ea:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029f0:	4a30      	ldr	r2, [pc, #192]	; (8002ab4 <HAL_I2S_Receive_DMA+0x174>)
 80029f2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	69db      	ldr	r3, [r3, #28]
 80029fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a02:	d10a      	bne.n	8002a1a <HAL_I2S_Receive_DMA+0xda>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002a04:	2300      	movs	r3, #0
 8002a06:	613b      	str	r3, [r7, #16]
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	68db      	ldr	r3, [r3, #12]
 8002a0e:	613b      	str	r3, [r7, #16]
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	613b      	str	r3, [r7, #16]
 8002a18:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	330c      	adds	r3, #12
 8002a24:	4619      	mov	r1, r3
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a2a:	461a      	mov	r2, r3
                                 hi2s->RxXferSize))
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8002a30:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8002a32:	f7ff f955 	bl	8001ce0 <HAL_DMA_Start_IT>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d00f      	beq.n	8002a5c <HAL_I2S_Receive_DMA+0x11c>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a40:	f043 0208 	orr.w	r2, r3, #8
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2200      	movs	r2, #0
 8002a54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e022      	b.n	8002aa2 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	69db      	ldr	r3, [r3, #28]
 8002a62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d107      	bne.n	8002a7a <HAL_I2S_Receive_DMA+0x13a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	69da      	ldr	r2, [r3, #28]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002a78:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	f003 0301 	and.w	r3, r3, #1
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d107      	bne.n	8002a98 <HAL_I2S_Receive_DMA+0x158>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	685a      	ldr	r2, [r3, #4]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f042 0201 	orr.w	r2, r2, #1
 8002a96:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8002aa0:	2300      	movs	r3, #0
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3718      	adds	r7, #24
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	08002b27 	.word	0x08002b27
 8002ab0:	08002ae5 	.word	0x08002ae5
 8002ab4:	08002b43 	.word	0x08002b43

08002ab8 <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b082      	sub	sp, #8
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  /* Call the IrqHandler ISR set during HAL_I2S_INIT */
  hi2s->IrqHandlerISR(hi2s);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	4798      	blx	r3
}
 8002ac8:	bf00      	nop
 8002aca:	3708      	adds	r7, #8
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}

08002ad0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002ad8:	bf00      	nop
 8002ada:	370c      	adds	r7, #12
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr

08002ae4 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b084      	sub	sp, #16
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002af0:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	69db      	ldr	r3, [r3, #28]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d10e      	bne.n	8002b18 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	685a      	ldr	r2, [r3, #4]
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f022 0201 	bic.w	r2, r2, #1
 8002b08:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	865a      	strh	r2, [r3, #50]	; 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2201      	movs	r2, #1
 8002b14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8002b18:	68f8      	ldr	r0, [r7, #12]
 8002b1a:	f7fe fc67 	bl	80013ec <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002b1e:	bf00      	nop
 8002b20:	3710      	adds	r7, #16
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}

08002b26 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002b26:	b580      	push	{r7, lr}
 8002b28:	b084      	sub	sp, #16
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b32:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8002b34:	68f8      	ldr	r0, [r7, #12]
 8002b36:	f7fe fc49 	bl	80013cc <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002b3a:	bf00      	nop
 8002b3c:	3710      	adds	r7, #16
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}

08002b42 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8002b42:	b580      	push	{r7, lr}
 8002b44:	b084      	sub	sp, #16
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b4e:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	685a      	ldr	r2, [r3, #4]
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f022 0203 	bic.w	r2, r2, #3
 8002b5e:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2200      	movs	r2, #0
 8002b64:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b78:	f043 0208 	orr.w	r2, r3, #8
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8002b80:	68f8      	ldr	r0, [r7, #12]
 8002b82:	f7ff ffa5 	bl	8002ad0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002b86:	bf00      	nop
 8002b88:	3710      	adds	r7, #16
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}

08002b8e <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002b8e:	b580      	push	{r7, lr}
 8002b90:	b082      	sub	sp, #8
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b9a:	881a      	ldrh	r2, [r3, #0]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba6:	1c9a      	adds	r2, r3, #2
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	3b01      	subs	r3, #1
 8002bb4:	b29a      	uxth	r2, r3
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bbe:	b29b      	uxth	r3, r3
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d10e      	bne.n	8002be2 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	685a      	ldr	r2, [r3, #4]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002bd2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f7fe fbe5 	bl	80013ac <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002be2:	bf00      	nop
 8002be4:	3708      	adds	r7, #8
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}

08002bea <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002bea:	b580      	push	{r7, lr}
 8002bec:	b082      	sub	sp, #8
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	68da      	ldr	r2, [r3, #12]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bfc:	b292      	uxth	r2, r2
 8002bfe:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c04:	1c9a      	adds	r2, r3, #2
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	3b01      	subs	r3, #1
 8002c12:	b29a      	uxth	r2, r3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002c1c:	b29b      	uxth	r3, r3
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d10e      	bne.n	8002c40 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	685a      	ldr	r2, [r3, #4]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002c30:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2201      	movs	r2, #1
 8002c36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f7fe fbd6 	bl	80013ec <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002c40:	bf00      	nop
 8002c42:	3708      	adds	r7, #8
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}

08002c48 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b086      	sub	sp, #24
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	2b04      	cmp	r3, #4
 8002c62:	d13a      	bne.n	8002cda <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	f003 0301 	and.w	r3, r3, #1
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d109      	bne.n	8002c82 <I2S_IRQHandler+0x3a>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c78:	2b40      	cmp	r3, #64	; 0x40
 8002c7a:	d102      	bne.n	8002c82 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	f7ff ffb4 	bl	8002bea <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c88:	2b40      	cmp	r3, #64	; 0x40
 8002c8a:	d126      	bne.n	8002cda <I2S_IRQHandler+0x92>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	f003 0320 	and.w	r3, r3, #32
 8002c96:	2b20      	cmp	r3, #32
 8002c98:	d11f      	bne.n	8002cda <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	685a      	ldr	r2, [r3, #4]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002ca8:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002caa:	2300      	movs	r3, #0
 8002cac:	613b      	str	r3, [r7, #16]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	613b      	str	r3, [r7, #16]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	613b      	str	r3, [r7, #16]
 8002cbe:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ccc:	f043 0202 	orr.w	r2, r3, #2
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	f7ff fefb 	bl	8002ad0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	2b03      	cmp	r3, #3
 8002ce4:	d136      	bne.n	8002d54 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	f003 0302 	and.w	r3, r3, #2
 8002cec:	2b02      	cmp	r3, #2
 8002cee:	d109      	bne.n	8002d04 <I2S_IRQHandler+0xbc>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cfa:	2b80      	cmp	r3, #128	; 0x80
 8002cfc:	d102      	bne.n	8002d04 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f7ff ff45 	bl	8002b8e <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	f003 0308 	and.w	r3, r3, #8
 8002d0a:	2b08      	cmp	r3, #8
 8002d0c:	d122      	bne.n	8002d54 <I2S_IRQHandler+0x10c>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f003 0320 	and.w	r3, r3, #32
 8002d18:	2b20      	cmp	r3, #32
 8002d1a:	d11b      	bne.n	8002d54 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	685a      	ldr	r2, [r3, #4]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002d2a:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	60fb      	str	r3, [r7, #12]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	60fb      	str	r3, [r7, #12]
 8002d38:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d46:	f043 0204 	orr.w	r2, r3, #4
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	f7ff febe 	bl	8002ad0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002d54:	bf00      	nop
 8002d56:	3718      	adds	r7, #24
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}

08002d5c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b088      	sub	sp, #32
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a92      	ldr	r2, [pc, #584]	; (8002fbc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d101      	bne.n	8002d7a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8002d76:	4b92      	ldr	r3, [pc, #584]	; (8002fc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002d78:	e001      	b.n	8002d7e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8002d7a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a8b      	ldr	r2, [pc, #556]	; (8002fbc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d101      	bne.n	8002d98 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002d94:	4b8a      	ldr	r3, [pc, #552]	; (8002fc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002d96:	e001      	b.n	8002d9c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002d98:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002da8:	d004      	beq.n	8002db4 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	f040 8099 	bne.w	8002ee6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8002db4:	69fb      	ldr	r3, [r7, #28]
 8002db6:	f003 0302 	and.w	r3, r3, #2
 8002dba:	2b02      	cmp	r3, #2
 8002dbc:	d107      	bne.n	8002dce <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d002      	beq.n	8002dce <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f000 f925 	bl	8003018 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8002dce:	69bb      	ldr	r3, [r7, #24]
 8002dd0:	f003 0301 	and.w	r3, r3, #1
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d107      	bne.n	8002de8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d002      	beq.n	8002de8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f000 f9c8 	bl	8003178 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002de8:	69bb      	ldr	r3, [r7, #24]
 8002dea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dee:	2b40      	cmp	r3, #64	; 0x40
 8002df0:	d13a      	bne.n	8002e68 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	f003 0320 	and.w	r3, r3, #32
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d035      	beq.n	8002e68 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a6e      	ldr	r2, [pc, #440]	; (8002fbc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d101      	bne.n	8002e0a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8002e06:	4b6e      	ldr	r3, [pc, #440]	; (8002fc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002e08:	e001      	b.n	8002e0e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8002e0a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e0e:	685a      	ldr	r2, [r3, #4]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4969      	ldr	r1, [pc, #420]	; (8002fbc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002e16:	428b      	cmp	r3, r1
 8002e18:	d101      	bne.n	8002e1e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8002e1a:	4b69      	ldr	r3, [pc, #420]	; (8002fc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002e1c:	e001      	b.n	8002e22 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8002e1e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e22:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002e26:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	685a      	ldr	r2, [r3, #4]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002e36:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002e38:	2300      	movs	r3, #0
 8002e3a:	60fb      	str	r3, [r7, #12]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	68db      	ldr	r3, [r3, #12]
 8002e42:	60fb      	str	r3, [r7, #12]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	60fb      	str	r3, [r7, #12]
 8002e4c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2201      	movs	r2, #1
 8002e52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e5a:	f043 0202 	orr.w	r2, r3, #2
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f7ff fe34 	bl	8002ad0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	f003 0308 	and.w	r3, r3, #8
 8002e6e:	2b08      	cmp	r3, #8
 8002e70:	f040 80c3 	bne.w	8002ffa <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	f003 0320 	and.w	r3, r3, #32
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	f000 80bd 	beq.w	8002ffa <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	685a      	ldr	r2, [r3, #4]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002e8e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a49      	ldr	r2, [pc, #292]	; (8002fbc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d101      	bne.n	8002e9e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8002e9a:	4b49      	ldr	r3, [pc, #292]	; (8002fc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002e9c:	e001      	b.n	8002ea2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8002e9e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002ea2:	685a      	ldr	r2, [r3, #4]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4944      	ldr	r1, [pc, #272]	; (8002fbc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002eaa:	428b      	cmp	r3, r1
 8002eac:	d101      	bne.n	8002eb2 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8002eae:	4b44      	ldr	r3, [pc, #272]	; (8002fc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002eb0:	e001      	b.n	8002eb6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8002eb2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002eb6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002eba:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	60bb      	str	r3, [r7, #8]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	60bb      	str	r3, [r7, #8]
 8002ec8:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2201      	movs	r2, #1
 8002ece:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ed6:	f043 0204 	orr.w	r2, r3, #4
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f7ff fdf6 	bl	8002ad0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002ee4:	e089      	b.n	8002ffa <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8002ee6:	69bb      	ldr	r3, [r7, #24]
 8002ee8:	f003 0302 	and.w	r3, r3, #2
 8002eec:	2b02      	cmp	r3, #2
 8002eee:	d107      	bne.n	8002f00 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d002      	beq.n	8002f00 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f000 f8be 	bl	800307c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002f00:	69fb      	ldr	r3, [r7, #28]
 8002f02:	f003 0301 	and.w	r3, r3, #1
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d107      	bne.n	8002f1a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d002      	beq.n	8002f1a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	f000 f8fd 	bl	8003114 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f20:	2b40      	cmp	r3, #64	; 0x40
 8002f22:	d12f      	bne.n	8002f84 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	f003 0320 	and.w	r3, r3, #32
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d02a      	beq.n	8002f84 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	685a      	ldr	r2, [r3, #4]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002f3c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a1e      	ldr	r2, [pc, #120]	; (8002fbc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d101      	bne.n	8002f4c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002f48:	4b1d      	ldr	r3, [pc, #116]	; (8002fc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002f4a:	e001      	b.n	8002f50 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002f4c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f50:	685a      	ldr	r2, [r3, #4]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4919      	ldr	r1, [pc, #100]	; (8002fbc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002f58:	428b      	cmp	r3, r1
 8002f5a:	d101      	bne.n	8002f60 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002f5c:	4b18      	ldr	r3, [pc, #96]	; (8002fc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002f5e:	e001      	b.n	8002f64 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002f60:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f64:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002f68:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f76:	f043 0202 	orr.w	r2, r3, #2
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f7ff fda6 	bl	8002ad0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002f84:	69bb      	ldr	r3, [r7, #24]
 8002f86:	f003 0308 	and.w	r3, r3, #8
 8002f8a:	2b08      	cmp	r3, #8
 8002f8c:	d136      	bne.n	8002ffc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	f003 0320 	and.w	r3, r3, #32
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d031      	beq.n	8002ffc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a07      	ldr	r2, [pc, #28]	; (8002fbc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d101      	bne.n	8002fa6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8002fa2:	4b07      	ldr	r3, [pc, #28]	; (8002fc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002fa4:	e001      	b.n	8002faa <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8002fa6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002faa:	685a      	ldr	r2, [r3, #4]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4902      	ldr	r1, [pc, #8]	; (8002fbc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002fb2:	428b      	cmp	r3, r1
 8002fb4:	d106      	bne.n	8002fc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8002fb6:	4b02      	ldr	r3, [pc, #8]	; (8002fc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002fb8:	e006      	b.n	8002fc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8002fba:	bf00      	nop
 8002fbc:	40003800 	.word	0x40003800
 8002fc0:	40003400 	.word	0x40003400
 8002fc4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002fc8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002fcc:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	685a      	ldr	r2, [r3, #4]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002fdc:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fea:	f043 0204 	orr.w	r2, r3, #4
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f7ff fd6c 	bl	8002ad0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002ff8:	e000      	b.n	8002ffc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002ffa:	bf00      	nop
}
 8002ffc:	bf00      	nop
 8002ffe:	3720      	adds	r7, #32
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}

08003004 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003004:	b480      	push	{r7}
 8003006:	b083      	sub	sp, #12
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800300c:	bf00      	nop
 800300e:	370c      	adds	r7, #12
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr

08003018 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b082      	sub	sp, #8
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003024:	1c99      	adds	r1, r3, #2
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	6251      	str	r1, [r2, #36]	; 0x24
 800302a:	881a      	ldrh	r2, [r3, #0]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003036:	b29b      	uxth	r3, r3
 8003038:	3b01      	subs	r3, #1
 800303a:	b29a      	uxth	r2, r3
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003044:	b29b      	uxth	r3, r3
 8003046:	2b00      	cmp	r3, #0
 8003048:	d113      	bne.n	8003072 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	685a      	ldr	r2, [r3, #4]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003058:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800305e:	b29b      	uxth	r3, r3
 8003060:	2b00      	cmp	r3, #0
 8003062:	d106      	bne.n	8003072 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2201      	movs	r2, #1
 8003068:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	f7ff ffc9 	bl	8003004 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003072:	bf00      	nop
 8003074:	3708      	adds	r7, #8
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
	...

0800307c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b082      	sub	sp, #8
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003088:	1c99      	adds	r1, r3, #2
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	6251      	str	r1, [r2, #36]	; 0x24
 800308e:	8819      	ldrh	r1, [r3, #0]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a1d      	ldr	r2, [pc, #116]	; (800310c <I2SEx_TxISR_I2SExt+0x90>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d101      	bne.n	800309e <I2SEx_TxISR_I2SExt+0x22>
 800309a:	4b1d      	ldr	r3, [pc, #116]	; (8003110 <I2SEx_TxISR_I2SExt+0x94>)
 800309c:	e001      	b.n	80030a2 <I2SEx_TxISR_I2SExt+0x26>
 800309e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80030a2:	460a      	mov	r2, r1
 80030a4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030aa:	b29b      	uxth	r3, r3
 80030ac:	3b01      	subs	r3, #1
 80030ae:	b29a      	uxth	r2, r3
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030b8:	b29b      	uxth	r3, r3
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d121      	bne.n	8003102 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a12      	ldr	r2, [pc, #72]	; (800310c <I2SEx_TxISR_I2SExt+0x90>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d101      	bne.n	80030cc <I2SEx_TxISR_I2SExt+0x50>
 80030c8:	4b11      	ldr	r3, [pc, #68]	; (8003110 <I2SEx_TxISR_I2SExt+0x94>)
 80030ca:	e001      	b.n	80030d0 <I2SEx_TxISR_I2SExt+0x54>
 80030cc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80030d0:	685a      	ldr	r2, [r3, #4]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	490d      	ldr	r1, [pc, #52]	; (800310c <I2SEx_TxISR_I2SExt+0x90>)
 80030d8:	428b      	cmp	r3, r1
 80030da:	d101      	bne.n	80030e0 <I2SEx_TxISR_I2SExt+0x64>
 80030dc:	4b0c      	ldr	r3, [pc, #48]	; (8003110 <I2SEx_TxISR_I2SExt+0x94>)
 80030de:	e001      	b.n	80030e4 <I2SEx_TxISR_I2SExt+0x68>
 80030e0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80030e4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80030e8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d106      	bne.n	8003102 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2201      	movs	r2, #1
 80030f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	f7ff ff81 	bl	8003004 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003102:	bf00      	nop
 8003104:	3708      	adds	r7, #8
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	40003800 	.word	0x40003800
 8003110:	40003400 	.word	0x40003400

08003114 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b082      	sub	sp, #8
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	68d8      	ldr	r0, [r3, #12]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003126:	1c99      	adds	r1, r3, #2
 8003128:	687a      	ldr	r2, [r7, #4]
 800312a:	62d1      	str	r1, [r2, #44]	; 0x2c
 800312c:	b282      	uxth	r2, r0
 800312e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003134:	b29b      	uxth	r3, r3
 8003136:	3b01      	subs	r3, #1
 8003138:	b29a      	uxth	r2, r3
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003142:	b29b      	uxth	r3, r3
 8003144:	2b00      	cmp	r3, #0
 8003146:	d113      	bne.n	8003170 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	685a      	ldr	r2, [r3, #4]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003156:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800315c:	b29b      	uxth	r3, r3
 800315e:	2b00      	cmp	r3, #0
 8003160:	d106      	bne.n	8003170 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2201      	movs	r2, #1
 8003166:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f7ff ff4a 	bl	8003004 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003170:	bf00      	nop
 8003172:	3708      	adds	r7, #8
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}

08003178 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a20      	ldr	r2, [pc, #128]	; (8003208 <I2SEx_RxISR_I2SExt+0x90>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d101      	bne.n	800318e <I2SEx_RxISR_I2SExt+0x16>
 800318a:	4b20      	ldr	r3, [pc, #128]	; (800320c <I2SEx_RxISR_I2SExt+0x94>)
 800318c:	e001      	b.n	8003192 <I2SEx_RxISR_I2SExt+0x1a>
 800318e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003192:	68d8      	ldr	r0, [r3, #12]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003198:	1c99      	adds	r1, r3, #2
 800319a:	687a      	ldr	r2, [r7, #4]
 800319c:	62d1      	str	r1, [r2, #44]	; 0x2c
 800319e:	b282      	uxth	r2, r0
 80031a0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	3b01      	subs	r3, #1
 80031aa:	b29a      	uxth	r2, r3
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80031b4:	b29b      	uxth	r3, r3
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d121      	bne.n	80031fe <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a12      	ldr	r2, [pc, #72]	; (8003208 <I2SEx_RxISR_I2SExt+0x90>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d101      	bne.n	80031c8 <I2SEx_RxISR_I2SExt+0x50>
 80031c4:	4b11      	ldr	r3, [pc, #68]	; (800320c <I2SEx_RxISR_I2SExt+0x94>)
 80031c6:	e001      	b.n	80031cc <I2SEx_RxISR_I2SExt+0x54>
 80031c8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80031cc:	685a      	ldr	r2, [r3, #4]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	490d      	ldr	r1, [pc, #52]	; (8003208 <I2SEx_RxISR_I2SExt+0x90>)
 80031d4:	428b      	cmp	r3, r1
 80031d6:	d101      	bne.n	80031dc <I2SEx_RxISR_I2SExt+0x64>
 80031d8:	4b0c      	ldr	r3, [pc, #48]	; (800320c <I2SEx_RxISR_I2SExt+0x94>)
 80031da:	e001      	b.n	80031e0 <I2SEx_RxISR_I2SExt+0x68>
 80031dc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80031e0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80031e4:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031ea:	b29b      	uxth	r3, r3
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d106      	bne.n	80031fe <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	f7ff ff03 	bl	8003004 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80031fe:	bf00      	nop
 8003200:	3708      	adds	r7, #8
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	40003800 	.word	0x40003800
 800320c:	40003400 	.word	0x40003400

08003210 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b086      	sub	sp, #24
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d101      	bne.n	8003222 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e267      	b.n	80036f2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0301 	and.w	r3, r3, #1
 800322a:	2b00      	cmp	r3, #0
 800322c:	d075      	beq.n	800331a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800322e:	4b88      	ldr	r3, [pc, #544]	; (8003450 <HAL_RCC_OscConfig+0x240>)
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	f003 030c 	and.w	r3, r3, #12
 8003236:	2b04      	cmp	r3, #4
 8003238:	d00c      	beq.n	8003254 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800323a:	4b85      	ldr	r3, [pc, #532]	; (8003450 <HAL_RCC_OscConfig+0x240>)
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003242:	2b08      	cmp	r3, #8
 8003244:	d112      	bne.n	800326c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003246:	4b82      	ldr	r3, [pc, #520]	; (8003450 <HAL_RCC_OscConfig+0x240>)
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800324e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003252:	d10b      	bne.n	800326c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003254:	4b7e      	ldr	r3, [pc, #504]	; (8003450 <HAL_RCC_OscConfig+0x240>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800325c:	2b00      	cmp	r3, #0
 800325e:	d05b      	beq.n	8003318 <HAL_RCC_OscConfig+0x108>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d157      	bne.n	8003318 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	e242      	b.n	80036f2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003274:	d106      	bne.n	8003284 <HAL_RCC_OscConfig+0x74>
 8003276:	4b76      	ldr	r3, [pc, #472]	; (8003450 <HAL_RCC_OscConfig+0x240>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a75      	ldr	r2, [pc, #468]	; (8003450 <HAL_RCC_OscConfig+0x240>)
 800327c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003280:	6013      	str	r3, [r2, #0]
 8003282:	e01d      	b.n	80032c0 <HAL_RCC_OscConfig+0xb0>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800328c:	d10c      	bne.n	80032a8 <HAL_RCC_OscConfig+0x98>
 800328e:	4b70      	ldr	r3, [pc, #448]	; (8003450 <HAL_RCC_OscConfig+0x240>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a6f      	ldr	r2, [pc, #444]	; (8003450 <HAL_RCC_OscConfig+0x240>)
 8003294:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003298:	6013      	str	r3, [r2, #0]
 800329a:	4b6d      	ldr	r3, [pc, #436]	; (8003450 <HAL_RCC_OscConfig+0x240>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a6c      	ldr	r2, [pc, #432]	; (8003450 <HAL_RCC_OscConfig+0x240>)
 80032a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032a4:	6013      	str	r3, [r2, #0]
 80032a6:	e00b      	b.n	80032c0 <HAL_RCC_OscConfig+0xb0>
 80032a8:	4b69      	ldr	r3, [pc, #420]	; (8003450 <HAL_RCC_OscConfig+0x240>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a68      	ldr	r2, [pc, #416]	; (8003450 <HAL_RCC_OscConfig+0x240>)
 80032ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032b2:	6013      	str	r3, [r2, #0]
 80032b4:	4b66      	ldr	r3, [pc, #408]	; (8003450 <HAL_RCC_OscConfig+0x240>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a65      	ldr	r2, [pc, #404]	; (8003450 <HAL_RCC_OscConfig+0x240>)
 80032ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d013      	beq.n	80032f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032c8:	f7fe fb22 	bl	8001910 <HAL_GetTick>
 80032cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032ce:	e008      	b.n	80032e2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032d0:	f7fe fb1e 	bl	8001910 <HAL_GetTick>
 80032d4:	4602      	mov	r2, r0
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	2b64      	cmp	r3, #100	; 0x64
 80032dc:	d901      	bls.n	80032e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80032de:	2303      	movs	r3, #3
 80032e0:	e207      	b.n	80036f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032e2:	4b5b      	ldr	r3, [pc, #364]	; (8003450 <HAL_RCC_OscConfig+0x240>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d0f0      	beq.n	80032d0 <HAL_RCC_OscConfig+0xc0>
 80032ee:	e014      	b.n	800331a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032f0:	f7fe fb0e 	bl	8001910 <HAL_GetTick>
 80032f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032f6:	e008      	b.n	800330a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032f8:	f7fe fb0a 	bl	8001910 <HAL_GetTick>
 80032fc:	4602      	mov	r2, r0
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	2b64      	cmp	r3, #100	; 0x64
 8003304:	d901      	bls.n	800330a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003306:	2303      	movs	r3, #3
 8003308:	e1f3      	b.n	80036f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800330a:	4b51      	ldr	r3, [pc, #324]	; (8003450 <HAL_RCC_OscConfig+0x240>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003312:	2b00      	cmp	r3, #0
 8003314:	d1f0      	bne.n	80032f8 <HAL_RCC_OscConfig+0xe8>
 8003316:	e000      	b.n	800331a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003318:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0302 	and.w	r3, r3, #2
 8003322:	2b00      	cmp	r3, #0
 8003324:	d063      	beq.n	80033ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003326:	4b4a      	ldr	r3, [pc, #296]	; (8003450 <HAL_RCC_OscConfig+0x240>)
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	f003 030c 	and.w	r3, r3, #12
 800332e:	2b00      	cmp	r3, #0
 8003330:	d00b      	beq.n	800334a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003332:	4b47      	ldr	r3, [pc, #284]	; (8003450 <HAL_RCC_OscConfig+0x240>)
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800333a:	2b08      	cmp	r3, #8
 800333c:	d11c      	bne.n	8003378 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800333e:	4b44      	ldr	r3, [pc, #272]	; (8003450 <HAL_RCC_OscConfig+0x240>)
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003346:	2b00      	cmp	r3, #0
 8003348:	d116      	bne.n	8003378 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800334a:	4b41      	ldr	r3, [pc, #260]	; (8003450 <HAL_RCC_OscConfig+0x240>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 0302 	and.w	r3, r3, #2
 8003352:	2b00      	cmp	r3, #0
 8003354:	d005      	beq.n	8003362 <HAL_RCC_OscConfig+0x152>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	68db      	ldr	r3, [r3, #12]
 800335a:	2b01      	cmp	r3, #1
 800335c:	d001      	beq.n	8003362 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e1c7      	b.n	80036f2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003362:	4b3b      	ldr	r3, [pc, #236]	; (8003450 <HAL_RCC_OscConfig+0x240>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	691b      	ldr	r3, [r3, #16]
 800336e:	00db      	lsls	r3, r3, #3
 8003370:	4937      	ldr	r1, [pc, #220]	; (8003450 <HAL_RCC_OscConfig+0x240>)
 8003372:	4313      	orrs	r3, r2
 8003374:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003376:	e03a      	b.n	80033ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d020      	beq.n	80033c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003380:	4b34      	ldr	r3, [pc, #208]	; (8003454 <HAL_RCC_OscConfig+0x244>)
 8003382:	2201      	movs	r2, #1
 8003384:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003386:	f7fe fac3 	bl	8001910 <HAL_GetTick>
 800338a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800338c:	e008      	b.n	80033a0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800338e:	f7fe fabf 	bl	8001910 <HAL_GetTick>
 8003392:	4602      	mov	r2, r0
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	1ad3      	subs	r3, r2, r3
 8003398:	2b02      	cmp	r3, #2
 800339a:	d901      	bls.n	80033a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800339c:	2303      	movs	r3, #3
 800339e:	e1a8      	b.n	80036f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033a0:	4b2b      	ldr	r3, [pc, #172]	; (8003450 <HAL_RCC_OscConfig+0x240>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 0302 	and.w	r3, r3, #2
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d0f0      	beq.n	800338e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033ac:	4b28      	ldr	r3, [pc, #160]	; (8003450 <HAL_RCC_OscConfig+0x240>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	691b      	ldr	r3, [r3, #16]
 80033b8:	00db      	lsls	r3, r3, #3
 80033ba:	4925      	ldr	r1, [pc, #148]	; (8003450 <HAL_RCC_OscConfig+0x240>)
 80033bc:	4313      	orrs	r3, r2
 80033be:	600b      	str	r3, [r1, #0]
 80033c0:	e015      	b.n	80033ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033c2:	4b24      	ldr	r3, [pc, #144]	; (8003454 <HAL_RCC_OscConfig+0x244>)
 80033c4:	2200      	movs	r2, #0
 80033c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033c8:	f7fe faa2 	bl	8001910 <HAL_GetTick>
 80033cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033ce:	e008      	b.n	80033e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033d0:	f7fe fa9e 	bl	8001910 <HAL_GetTick>
 80033d4:	4602      	mov	r2, r0
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	2b02      	cmp	r3, #2
 80033dc:	d901      	bls.n	80033e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	e187      	b.n	80036f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033e2:	4b1b      	ldr	r3, [pc, #108]	; (8003450 <HAL_RCC_OscConfig+0x240>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 0302 	and.w	r3, r3, #2
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d1f0      	bne.n	80033d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 0308 	and.w	r3, r3, #8
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d036      	beq.n	8003468 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	695b      	ldr	r3, [r3, #20]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d016      	beq.n	8003430 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003402:	4b15      	ldr	r3, [pc, #84]	; (8003458 <HAL_RCC_OscConfig+0x248>)
 8003404:	2201      	movs	r2, #1
 8003406:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003408:	f7fe fa82 	bl	8001910 <HAL_GetTick>
 800340c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800340e:	e008      	b.n	8003422 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003410:	f7fe fa7e 	bl	8001910 <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	2b02      	cmp	r3, #2
 800341c:	d901      	bls.n	8003422 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	e167      	b.n	80036f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003422:	4b0b      	ldr	r3, [pc, #44]	; (8003450 <HAL_RCC_OscConfig+0x240>)
 8003424:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003426:	f003 0302 	and.w	r3, r3, #2
 800342a:	2b00      	cmp	r3, #0
 800342c:	d0f0      	beq.n	8003410 <HAL_RCC_OscConfig+0x200>
 800342e:	e01b      	b.n	8003468 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003430:	4b09      	ldr	r3, [pc, #36]	; (8003458 <HAL_RCC_OscConfig+0x248>)
 8003432:	2200      	movs	r2, #0
 8003434:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003436:	f7fe fa6b 	bl	8001910 <HAL_GetTick>
 800343a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800343c:	e00e      	b.n	800345c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800343e:	f7fe fa67 	bl	8001910 <HAL_GetTick>
 8003442:	4602      	mov	r2, r0
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	1ad3      	subs	r3, r2, r3
 8003448:	2b02      	cmp	r3, #2
 800344a:	d907      	bls.n	800345c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800344c:	2303      	movs	r3, #3
 800344e:	e150      	b.n	80036f2 <HAL_RCC_OscConfig+0x4e2>
 8003450:	40023800 	.word	0x40023800
 8003454:	42470000 	.word	0x42470000
 8003458:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800345c:	4b88      	ldr	r3, [pc, #544]	; (8003680 <HAL_RCC_OscConfig+0x470>)
 800345e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003460:	f003 0302 	and.w	r3, r3, #2
 8003464:	2b00      	cmp	r3, #0
 8003466:	d1ea      	bne.n	800343e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 0304 	and.w	r3, r3, #4
 8003470:	2b00      	cmp	r3, #0
 8003472:	f000 8097 	beq.w	80035a4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003476:	2300      	movs	r3, #0
 8003478:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800347a:	4b81      	ldr	r3, [pc, #516]	; (8003680 <HAL_RCC_OscConfig+0x470>)
 800347c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d10f      	bne.n	80034a6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003486:	2300      	movs	r3, #0
 8003488:	60bb      	str	r3, [r7, #8]
 800348a:	4b7d      	ldr	r3, [pc, #500]	; (8003680 <HAL_RCC_OscConfig+0x470>)
 800348c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348e:	4a7c      	ldr	r2, [pc, #496]	; (8003680 <HAL_RCC_OscConfig+0x470>)
 8003490:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003494:	6413      	str	r3, [r2, #64]	; 0x40
 8003496:	4b7a      	ldr	r3, [pc, #488]	; (8003680 <HAL_RCC_OscConfig+0x470>)
 8003498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800349e:	60bb      	str	r3, [r7, #8]
 80034a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034a2:	2301      	movs	r3, #1
 80034a4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034a6:	4b77      	ldr	r3, [pc, #476]	; (8003684 <HAL_RCC_OscConfig+0x474>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d118      	bne.n	80034e4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034b2:	4b74      	ldr	r3, [pc, #464]	; (8003684 <HAL_RCC_OscConfig+0x474>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a73      	ldr	r2, [pc, #460]	; (8003684 <HAL_RCC_OscConfig+0x474>)
 80034b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034be:	f7fe fa27 	bl	8001910 <HAL_GetTick>
 80034c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034c4:	e008      	b.n	80034d8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034c6:	f7fe fa23 	bl	8001910 <HAL_GetTick>
 80034ca:	4602      	mov	r2, r0
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	1ad3      	subs	r3, r2, r3
 80034d0:	2b02      	cmp	r3, #2
 80034d2:	d901      	bls.n	80034d8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80034d4:	2303      	movs	r3, #3
 80034d6:	e10c      	b.n	80036f2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034d8:	4b6a      	ldr	r3, [pc, #424]	; (8003684 <HAL_RCC_OscConfig+0x474>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d0f0      	beq.n	80034c6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d106      	bne.n	80034fa <HAL_RCC_OscConfig+0x2ea>
 80034ec:	4b64      	ldr	r3, [pc, #400]	; (8003680 <HAL_RCC_OscConfig+0x470>)
 80034ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034f0:	4a63      	ldr	r2, [pc, #396]	; (8003680 <HAL_RCC_OscConfig+0x470>)
 80034f2:	f043 0301 	orr.w	r3, r3, #1
 80034f6:	6713      	str	r3, [r2, #112]	; 0x70
 80034f8:	e01c      	b.n	8003534 <HAL_RCC_OscConfig+0x324>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	2b05      	cmp	r3, #5
 8003500:	d10c      	bne.n	800351c <HAL_RCC_OscConfig+0x30c>
 8003502:	4b5f      	ldr	r3, [pc, #380]	; (8003680 <HAL_RCC_OscConfig+0x470>)
 8003504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003506:	4a5e      	ldr	r2, [pc, #376]	; (8003680 <HAL_RCC_OscConfig+0x470>)
 8003508:	f043 0304 	orr.w	r3, r3, #4
 800350c:	6713      	str	r3, [r2, #112]	; 0x70
 800350e:	4b5c      	ldr	r3, [pc, #368]	; (8003680 <HAL_RCC_OscConfig+0x470>)
 8003510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003512:	4a5b      	ldr	r2, [pc, #364]	; (8003680 <HAL_RCC_OscConfig+0x470>)
 8003514:	f043 0301 	orr.w	r3, r3, #1
 8003518:	6713      	str	r3, [r2, #112]	; 0x70
 800351a:	e00b      	b.n	8003534 <HAL_RCC_OscConfig+0x324>
 800351c:	4b58      	ldr	r3, [pc, #352]	; (8003680 <HAL_RCC_OscConfig+0x470>)
 800351e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003520:	4a57      	ldr	r2, [pc, #348]	; (8003680 <HAL_RCC_OscConfig+0x470>)
 8003522:	f023 0301 	bic.w	r3, r3, #1
 8003526:	6713      	str	r3, [r2, #112]	; 0x70
 8003528:	4b55      	ldr	r3, [pc, #340]	; (8003680 <HAL_RCC_OscConfig+0x470>)
 800352a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800352c:	4a54      	ldr	r2, [pc, #336]	; (8003680 <HAL_RCC_OscConfig+0x470>)
 800352e:	f023 0304 	bic.w	r3, r3, #4
 8003532:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d015      	beq.n	8003568 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800353c:	f7fe f9e8 	bl	8001910 <HAL_GetTick>
 8003540:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003542:	e00a      	b.n	800355a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003544:	f7fe f9e4 	bl	8001910 <HAL_GetTick>
 8003548:	4602      	mov	r2, r0
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003552:	4293      	cmp	r3, r2
 8003554:	d901      	bls.n	800355a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003556:	2303      	movs	r3, #3
 8003558:	e0cb      	b.n	80036f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800355a:	4b49      	ldr	r3, [pc, #292]	; (8003680 <HAL_RCC_OscConfig+0x470>)
 800355c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800355e:	f003 0302 	and.w	r3, r3, #2
 8003562:	2b00      	cmp	r3, #0
 8003564:	d0ee      	beq.n	8003544 <HAL_RCC_OscConfig+0x334>
 8003566:	e014      	b.n	8003592 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003568:	f7fe f9d2 	bl	8001910 <HAL_GetTick>
 800356c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800356e:	e00a      	b.n	8003586 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003570:	f7fe f9ce 	bl	8001910 <HAL_GetTick>
 8003574:	4602      	mov	r2, r0
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	f241 3288 	movw	r2, #5000	; 0x1388
 800357e:	4293      	cmp	r3, r2
 8003580:	d901      	bls.n	8003586 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003582:	2303      	movs	r3, #3
 8003584:	e0b5      	b.n	80036f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003586:	4b3e      	ldr	r3, [pc, #248]	; (8003680 <HAL_RCC_OscConfig+0x470>)
 8003588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800358a:	f003 0302 	and.w	r3, r3, #2
 800358e:	2b00      	cmp	r3, #0
 8003590:	d1ee      	bne.n	8003570 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003592:	7dfb      	ldrb	r3, [r7, #23]
 8003594:	2b01      	cmp	r3, #1
 8003596:	d105      	bne.n	80035a4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003598:	4b39      	ldr	r3, [pc, #228]	; (8003680 <HAL_RCC_OscConfig+0x470>)
 800359a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359c:	4a38      	ldr	r2, [pc, #224]	; (8003680 <HAL_RCC_OscConfig+0x470>)
 800359e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035a2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	699b      	ldr	r3, [r3, #24]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	f000 80a1 	beq.w	80036f0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80035ae:	4b34      	ldr	r3, [pc, #208]	; (8003680 <HAL_RCC_OscConfig+0x470>)
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	f003 030c 	and.w	r3, r3, #12
 80035b6:	2b08      	cmp	r3, #8
 80035b8:	d05c      	beq.n	8003674 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	699b      	ldr	r3, [r3, #24]
 80035be:	2b02      	cmp	r3, #2
 80035c0:	d141      	bne.n	8003646 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035c2:	4b31      	ldr	r3, [pc, #196]	; (8003688 <HAL_RCC_OscConfig+0x478>)
 80035c4:	2200      	movs	r2, #0
 80035c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035c8:	f7fe f9a2 	bl	8001910 <HAL_GetTick>
 80035cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035ce:	e008      	b.n	80035e2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035d0:	f7fe f99e 	bl	8001910 <HAL_GetTick>
 80035d4:	4602      	mov	r2, r0
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	2b02      	cmp	r3, #2
 80035dc:	d901      	bls.n	80035e2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80035de:	2303      	movs	r3, #3
 80035e0:	e087      	b.n	80036f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035e2:	4b27      	ldr	r3, [pc, #156]	; (8003680 <HAL_RCC_OscConfig+0x470>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d1f0      	bne.n	80035d0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	69da      	ldr	r2, [r3, #28]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6a1b      	ldr	r3, [r3, #32]
 80035f6:	431a      	orrs	r2, r3
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fc:	019b      	lsls	r3, r3, #6
 80035fe:	431a      	orrs	r2, r3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003604:	085b      	lsrs	r3, r3, #1
 8003606:	3b01      	subs	r3, #1
 8003608:	041b      	lsls	r3, r3, #16
 800360a:	431a      	orrs	r2, r3
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003610:	061b      	lsls	r3, r3, #24
 8003612:	491b      	ldr	r1, [pc, #108]	; (8003680 <HAL_RCC_OscConfig+0x470>)
 8003614:	4313      	orrs	r3, r2
 8003616:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003618:	4b1b      	ldr	r3, [pc, #108]	; (8003688 <HAL_RCC_OscConfig+0x478>)
 800361a:	2201      	movs	r2, #1
 800361c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800361e:	f7fe f977 	bl	8001910 <HAL_GetTick>
 8003622:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003624:	e008      	b.n	8003638 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003626:	f7fe f973 	bl	8001910 <HAL_GetTick>
 800362a:	4602      	mov	r2, r0
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	1ad3      	subs	r3, r2, r3
 8003630:	2b02      	cmp	r3, #2
 8003632:	d901      	bls.n	8003638 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003634:	2303      	movs	r3, #3
 8003636:	e05c      	b.n	80036f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003638:	4b11      	ldr	r3, [pc, #68]	; (8003680 <HAL_RCC_OscConfig+0x470>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003640:	2b00      	cmp	r3, #0
 8003642:	d0f0      	beq.n	8003626 <HAL_RCC_OscConfig+0x416>
 8003644:	e054      	b.n	80036f0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003646:	4b10      	ldr	r3, [pc, #64]	; (8003688 <HAL_RCC_OscConfig+0x478>)
 8003648:	2200      	movs	r2, #0
 800364a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800364c:	f7fe f960 	bl	8001910 <HAL_GetTick>
 8003650:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003652:	e008      	b.n	8003666 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003654:	f7fe f95c 	bl	8001910 <HAL_GetTick>
 8003658:	4602      	mov	r2, r0
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	1ad3      	subs	r3, r2, r3
 800365e:	2b02      	cmp	r3, #2
 8003660:	d901      	bls.n	8003666 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003662:	2303      	movs	r3, #3
 8003664:	e045      	b.n	80036f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003666:	4b06      	ldr	r3, [pc, #24]	; (8003680 <HAL_RCC_OscConfig+0x470>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800366e:	2b00      	cmp	r3, #0
 8003670:	d1f0      	bne.n	8003654 <HAL_RCC_OscConfig+0x444>
 8003672:	e03d      	b.n	80036f0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	699b      	ldr	r3, [r3, #24]
 8003678:	2b01      	cmp	r3, #1
 800367a:	d107      	bne.n	800368c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	e038      	b.n	80036f2 <HAL_RCC_OscConfig+0x4e2>
 8003680:	40023800 	.word	0x40023800
 8003684:	40007000 	.word	0x40007000
 8003688:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800368c:	4b1b      	ldr	r3, [pc, #108]	; (80036fc <HAL_RCC_OscConfig+0x4ec>)
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	699b      	ldr	r3, [r3, #24]
 8003696:	2b01      	cmp	r3, #1
 8003698:	d028      	beq.n	80036ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d121      	bne.n	80036ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d11a      	bne.n	80036ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036b6:	68fa      	ldr	r2, [r7, #12]
 80036b8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80036bc:	4013      	ands	r3, r2
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80036c2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d111      	bne.n	80036ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036d2:	085b      	lsrs	r3, r3, #1
 80036d4:	3b01      	subs	r3, #1
 80036d6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036d8:	429a      	cmp	r2, r3
 80036da:	d107      	bne.n	80036ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d001      	beq.n	80036f0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	e000      	b.n	80036f2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80036f0:	2300      	movs	r3, #0
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3718      	adds	r7, #24
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}
 80036fa:	bf00      	nop
 80036fc:	40023800 	.word	0x40023800

08003700 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b084      	sub	sp, #16
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
 8003708:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d101      	bne.n	8003714 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	e0cc      	b.n	80038ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003714:	4b68      	ldr	r3, [pc, #416]	; (80038b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 0307 	and.w	r3, r3, #7
 800371c:	683a      	ldr	r2, [r7, #0]
 800371e:	429a      	cmp	r2, r3
 8003720:	d90c      	bls.n	800373c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003722:	4b65      	ldr	r3, [pc, #404]	; (80038b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003724:	683a      	ldr	r2, [r7, #0]
 8003726:	b2d2      	uxtb	r2, r2
 8003728:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800372a:	4b63      	ldr	r3, [pc, #396]	; (80038b8 <HAL_RCC_ClockConfig+0x1b8>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 0307 	and.w	r3, r3, #7
 8003732:	683a      	ldr	r2, [r7, #0]
 8003734:	429a      	cmp	r2, r3
 8003736:	d001      	beq.n	800373c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e0b8      	b.n	80038ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 0302 	and.w	r3, r3, #2
 8003744:	2b00      	cmp	r3, #0
 8003746:	d020      	beq.n	800378a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 0304 	and.w	r3, r3, #4
 8003750:	2b00      	cmp	r3, #0
 8003752:	d005      	beq.n	8003760 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003754:	4b59      	ldr	r3, [pc, #356]	; (80038bc <HAL_RCC_ClockConfig+0x1bc>)
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	4a58      	ldr	r2, [pc, #352]	; (80038bc <HAL_RCC_ClockConfig+0x1bc>)
 800375a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800375e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 0308 	and.w	r3, r3, #8
 8003768:	2b00      	cmp	r3, #0
 800376a:	d005      	beq.n	8003778 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800376c:	4b53      	ldr	r3, [pc, #332]	; (80038bc <HAL_RCC_ClockConfig+0x1bc>)
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	4a52      	ldr	r2, [pc, #328]	; (80038bc <HAL_RCC_ClockConfig+0x1bc>)
 8003772:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003776:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003778:	4b50      	ldr	r3, [pc, #320]	; (80038bc <HAL_RCC_ClockConfig+0x1bc>)
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	494d      	ldr	r1, [pc, #308]	; (80038bc <HAL_RCC_ClockConfig+0x1bc>)
 8003786:	4313      	orrs	r3, r2
 8003788:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 0301 	and.w	r3, r3, #1
 8003792:	2b00      	cmp	r3, #0
 8003794:	d044      	beq.n	8003820 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	2b01      	cmp	r3, #1
 800379c:	d107      	bne.n	80037ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800379e:	4b47      	ldr	r3, [pc, #284]	; (80038bc <HAL_RCC_ClockConfig+0x1bc>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d119      	bne.n	80037de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e07f      	b.n	80038ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	2b02      	cmp	r3, #2
 80037b4:	d003      	beq.n	80037be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037ba:	2b03      	cmp	r3, #3
 80037bc:	d107      	bne.n	80037ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037be:	4b3f      	ldr	r3, [pc, #252]	; (80038bc <HAL_RCC_ClockConfig+0x1bc>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d109      	bne.n	80037de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e06f      	b.n	80038ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037ce:	4b3b      	ldr	r3, [pc, #236]	; (80038bc <HAL_RCC_ClockConfig+0x1bc>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 0302 	and.w	r3, r3, #2
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d101      	bne.n	80037de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e067      	b.n	80038ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037de:	4b37      	ldr	r3, [pc, #220]	; (80038bc <HAL_RCC_ClockConfig+0x1bc>)
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	f023 0203 	bic.w	r2, r3, #3
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	4934      	ldr	r1, [pc, #208]	; (80038bc <HAL_RCC_ClockConfig+0x1bc>)
 80037ec:	4313      	orrs	r3, r2
 80037ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037f0:	f7fe f88e 	bl	8001910 <HAL_GetTick>
 80037f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037f6:	e00a      	b.n	800380e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037f8:	f7fe f88a 	bl	8001910 <HAL_GetTick>
 80037fc:	4602      	mov	r2, r0
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	f241 3288 	movw	r2, #5000	; 0x1388
 8003806:	4293      	cmp	r3, r2
 8003808:	d901      	bls.n	800380e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800380a:	2303      	movs	r3, #3
 800380c:	e04f      	b.n	80038ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800380e:	4b2b      	ldr	r3, [pc, #172]	; (80038bc <HAL_RCC_ClockConfig+0x1bc>)
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	f003 020c 	and.w	r2, r3, #12
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	009b      	lsls	r3, r3, #2
 800381c:	429a      	cmp	r2, r3
 800381e:	d1eb      	bne.n	80037f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003820:	4b25      	ldr	r3, [pc, #148]	; (80038b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f003 0307 	and.w	r3, r3, #7
 8003828:	683a      	ldr	r2, [r7, #0]
 800382a:	429a      	cmp	r2, r3
 800382c:	d20c      	bcs.n	8003848 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800382e:	4b22      	ldr	r3, [pc, #136]	; (80038b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003830:	683a      	ldr	r2, [r7, #0]
 8003832:	b2d2      	uxtb	r2, r2
 8003834:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003836:	4b20      	ldr	r3, [pc, #128]	; (80038b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 0307 	and.w	r3, r3, #7
 800383e:	683a      	ldr	r2, [r7, #0]
 8003840:	429a      	cmp	r2, r3
 8003842:	d001      	beq.n	8003848 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	e032      	b.n	80038ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 0304 	and.w	r3, r3, #4
 8003850:	2b00      	cmp	r3, #0
 8003852:	d008      	beq.n	8003866 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003854:	4b19      	ldr	r3, [pc, #100]	; (80038bc <HAL_RCC_ClockConfig+0x1bc>)
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	68db      	ldr	r3, [r3, #12]
 8003860:	4916      	ldr	r1, [pc, #88]	; (80038bc <HAL_RCC_ClockConfig+0x1bc>)
 8003862:	4313      	orrs	r3, r2
 8003864:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 0308 	and.w	r3, r3, #8
 800386e:	2b00      	cmp	r3, #0
 8003870:	d009      	beq.n	8003886 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003872:	4b12      	ldr	r3, [pc, #72]	; (80038bc <HAL_RCC_ClockConfig+0x1bc>)
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	691b      	ldr	r3, [r3, #16]
 800387e:	00db      	lsls	r3, r3, #3
 8003880:	490e      	ldr	r1, [pc, #56]	; (80038bc <HAL_RCC_ClockConfig+0x1bc>)
 8003882:	4313      	orrs	r3, r2
 8003884:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003886:	f000 f821 	bl	80038cc <HAL_RCC_GetSysClockFreq>
 800388a:	4602      	mov	r2, r0
 800388c:	4b0b      	ldr	r3, [pc, #44]	; (80038bc <HAL_RCC_ClockConfig+0x1bc>)
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	091b      	lsrs	r3, r3, #4
 8003892:	f003 030f 	and.w	r3, r3, #15
 8003896:	490a      	ldr	r1, [pc, #40]	; (80038c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003898:	5ccb      	ldrb	r3, [r1, r3]
 800389a:	fa22 f303 	lsr.w	r3, r2, r3
 800389e:	4a09      	ldr	r2, [pc, #36]	; (80038c4 <HAL_RCC_ClockConfig+0x1c4>)
 80038a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80038a2:	4b09      	ldr	r3, [pc, #36]	; (80038c8 <HAL_RCC_ClockConfig+0x1c8>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4618      	mov	r0, r3
 80038a8:	f7fd ffee 	bl	8001888 <HAL_InitTick>

  return HAL_OK;
 80038ac:	2300      	movs	r3, #0
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3710      	adds	r7, #16
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	bf00      	nop
 80038b8:	40023c00 	.word	0x40023c00
 80038bc:	40023800 	.word	0x40023800
 80038c0:	08009f54 	.word	0x08009f54
 80038c4:	20000400 	.word	0x20000400
 80038c8:	20000404 	.word	0x20000404

080038cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038d0:	b094      	sub	sp, #80	; 0x50
 80038d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80038d4:	2300      	movs	r3, #0
 80038d6:	647b      	str	r3, [r7, #68]	; 0x44
 80038d8:	2300      	movs	r3, #0
 80038da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038dc:	2300      	movs	r3, #0
 80038de:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80038e0:	2300      	movs	r3, #0
 80038e2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80038e4:	4b79      	ldr	r3, [pc, #484]	; (8003acc <HAL_RCC_GetSysClockFreq+0x200>)
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	f003 030c 	and.w	r3, r3, #12
 80038ec:	2b08      	cmp	r3, #8
 80038ee:	d00d      	beq.n	800390c <HAL_RCC_GetSysClockFreq+0x40>
 80038f0:	2b08      	cmp	r3, #8
 80038f2:	f200 80e1 	bhi.w	8003ab8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d002      	beq.n	8003900 <HAL_RCC_GetSysClockFreq+0x34>
 80038fa:	2b04      	cmp	r3, #4
 80038fc:	d003      	beq.n	8003906 <HAL_RCC_GetSysClockFreq+0x3a>
 80038fe:	e0db      	b.n	8003ab8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003900:	4b73      	ldr	r3, [pc, #460]	; (8003ad0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003902:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003904:	e0db      	b.n	8003abe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003906:	4b73      	ldr	r3, [pc, #460]	; (8003ad4 <HAL_RCC_GetSysClockFreq+0x208>)
 8003908:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800390a:	e0d8      	b.n	8003abe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800390c:	4b6f      	ldr	r3, [pc, #444]	; (8003acc <HAL_RCC_GetSysClockFreq+0x200>)
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003914:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003916:	4b6d      	ldr	r3, [pc, #436]	; (8003acc <HAL_RCC_GetSysClockFreq+0x200>)
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800391e:	2b00      	cmp	r3, #0
 8003920:	d063      	beq.n	80039ea <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003922:	4b6a      	ldr	r3, [pc, #424]	; (8003acc <HAL_RCC_GetSysClockFreq+0x200>)
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	099b      	lsrs	r3, r3, #6
 8003928:	2200      	movs	r2, #0
 800392a:	63bb      	str	r3, [r7, #56]	; 0x38
 800392c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800392e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003930:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003934:	633b      	str	r3, [r7, #48]	; 0x30
 8003936:	2300      	movs	r3, #0
 8003938:	637b      	str	r3, [r7, #52]	; 0x34
 800393a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800393e:	4622      	mov	r2, r4
 8003940:	462b      	mov	r3, r5
 8003942:	f04f 0000 	mov.w	r0, #0
 8003946:	f04f 0100 	mov.w	r1, #0
 800394a:	0159      	lsls	r1, r3, #5
 800394c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003950:	0150      	lsls	r0, r2, #5
 8003952:	4602      	mov	r2, r0
 8003954:	460b      	mov	r3, r1
 8003956:	4621      	mov	r1, r4
 8003958:	1a51      	subs	r1, r2, r1
 800395a:	6139      	str	r1, [r7, #16]
 800395c:	4629      	mov	r1, r5
 800395e:	eb63 0301 	sbc.w	r3, r3, r1
 8003962:	617b      	str	r3, [r7, #20]
 8003964:	f04f 0200 	mov.w	r2, #0
 8003968:	f04f 0300 	mov.w	r3, #0
 800396c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003970:	4659      	mov	r1, fp
 8003972:	018b      	lsls	r3, r1, #6
 8003974:	4651      	mov	r1, sl
 8003976:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800397a:	4651      	mov	r1, sl
 800397c:	018a      	lsls	r2, r1, #6
 800397e:	4651      	mov	r1, sl
 8003980:	ebb2 0801 	subs.w	r8, r2, r1
 8003984:	4659      	mov	r1, fp
 8003986:	eb63 0901 	sbc.w	r9, r3, r1
 800398a:	f04f 0200 	mov.w	r2, #0
 800398e:	f04f 0300 	mov.w	r3, #0
 8003992:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003996:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800399a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800399e:	4690      	mov	r8, r2
 80039a0:	4699      	mov	r9, r3
 80039a2:	4623      	mov	r3, r4
 80039a4:	eb18 0303 	adds.w	r3, r8, r3
 80039a8:	60bb      	str	r3, [r7, #8]
 80039aa:	462b      	mov	r3, r5
 80039ac:	eb49 0303 	adc.w	r3, r9, r3
 80039b0:	60fb      	str	r3, [r7, #12]
 80039b2:	f04f 0200 	mov.w	r2, #0
 80039b6:	f04f 0300 	mov.w	r3, #0
 80039ba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80039be:	4629      	mov	r1, r5
 80039c0:	024b      	lsls	r3, r1, #9
 80039c2:	4621      	mov	r1, r4
 80039c4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80039c8:	4621      	mov	r1, r4
 80039ca:	024a      	lsls	r2, r1, #9
 80039cc:	4610      	mov	r0, r2
 80039ce:	4619      	mov	r1, r3
 80039d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039d2:	2200      	movs	r2, #0
 80039d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80039d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80039d8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80039dc:	f7fd f8e4 	bl	8000ba8 <__aeabi_uldivmod>
 80039e0:	4602      	mov	r2, r0
 80039e2:	460b      	mov	r3, r1
 80039e4:	4613      	mov	r3, r2
 80039e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039e8:	e058      	b.n	8003a9c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039ea:	4b38      	ldr	r3, [pc, #224]	; (8003acc <HAL_RCC_GetSysClockFreq+0x200>)
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	099b      	lsrs	r3, r3, #6
 80039f0:	2200      	movs	r2, #0
 80039f2:	4618      	mov	r0, r3
 80039f4:	4611      	mov	r1, r2
 80039f6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80039fa:	623b      	str	r3, [r7, #32]
 80039fc:	2300      	movs	r3, #0
 80039fe:	627b      	str	r3, [r7, #36]	; 0x24
 8003a00:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003a04:	4642      	mov	r2, r8
 8003a06:	464b      	mov	r3, r9
 8003a08:	f04f 0000 	mov.w	r0, #0
 8003a0c:	f04f 0100 	mov.w	r1, #0
 8003a10:	0159      	lsls	r1, r3, #5
 8003a12:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a16:	0150      	lsls	r0, r2, #5
 8003a18:	4602      	mov	r2, r0
 8003a1a:	460b      	mov	r3, r1
 8003a1c:	4641      	mov	r1, r8
 8003a1e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003a22:	4649      	mov	r1, r9
 8003a24:	eb63 0b01 	sbc.w	fp, r3, r1
 8003a28:	f04f 0200 	mov.w	r2, #0
 8003a2c:	f04f 0300 	mov.w	r3, #0
 8003a30:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003a34:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003a38:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003a3c:	ebb2 040a 	subs.w	r4, r2, sl
 8003a40:	eb63 050b 	sbc.w	r5, r3, fp
 8003a44:	f04f 0200 	mov.w	r2, #0
 8003a48:	f04f 0300 	mov.w	r3, #0
 8003a4c:	00eb      	lsls	r3, r5, #3
 8003a4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a52:	00e2      	lsls	r2, r4, #3
 8003a54:	4614      	mov	r4, r2
 8003a56:	461d      	mov	r5, r3
 8003a58:	4643      	mov	r3, r8
 8003a5a:	18e3      	adds	r3, r4, r3
 8003a5c:	603b      	str	r3, [r7, #0]
 8003a5e:	464b      	mov	r3, r9
 8003a60:	eb45 0303 	adc.w	r3, r5, r3
 8003a64:	607b      	str	r3, [r7, #4]
 8003a66:	f04f 0200 	mov.w	r2, #0
 8003a6a:	f04f 0300 	mov.w	r3, #0
 8003a6e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003a72:	4629      	mov	r1, r5
 8003a74:	028b      	lsls	r3, r1, #10
 8003a76:	4621      	mov	r1, r4
 8003a78:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a7c:	4621      	mov	r1, r4
 8003a7e:	028a      	lsls	r2, r1, #10
 8003a80:	4610      	mov	r0, r2
 8003a82:	4619      	mov	r1, r3
 8003a84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a86:	2200      	movs	r2, #0
 8003a88:	61bb      	str	r3, [r7, #24]
 8003a8a:	61fa      	str	r2, [r7, #28]
 8003a8c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a90:	f7fd f88a 	bl	8000ba8 <__aeabi_uldivmod>
 8003a94:	4602      	mov	r2, r0
 8003a96:	460b      	mov	r3, r1
 8003a98:	4613      	mov	r3, r2
 8003a9a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003a9c:	4b0b      	ldr	r3, [pc, #44]	; (8003acc <HAL_RCC_GetSysClockFreq+0x200>)
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	0c1b      	lsrs	r3, r3, #16
 8003aa2:	f003 0303 	and.w	r3, r3, #3
 8003aa6:	3301      	adds	r3, #1
 8003aa8:	005b      	lsls	r3, r3, #1
 8003aaa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003aac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003aae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ab0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ab4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003ab6:	e002      	b.n	8003abe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ab8:	4b05      	ldr	r3, [pc, #20]	; (8003ad0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003aba:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003abc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003abe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	3750      	adds	r7, #80	; 0x50
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003aca:	bf00      	nop
 8003acc:	40023800 	.word	0x40023800
 8003ad0:	00f42400 	.word	0x00f42400
 8003ad4:	007a1200 	.word	0x007a1200

08003ad8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003adc:	4b03      	ldr	r3, [pc, #12]	; (8003aec <HAL_RCC_GetHCLKFreq+0x14>)
 8003ade:	681b      	ldr	r3, [r3, #0]
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae8:	4770      	bx	lr
 8003aea:	bf00      	nop
 8003aec:	20000400 	.word	0x20000400

08003af0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003af4:	f7ff fff0 	bl	8003ad8 <HAL_RCC_GetHCLKFreq>
 8003af8:	4602      	mov	r2, r0
 8003afa:	4b05      	ldr	r3, [pc, #20]	; (8003b10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	0a9b      	lsrs	r3, r3, #10
 8003b00:	f003 0307 	and.w	r3, r3, #7
 8003b04:	4903      	ldr	r1, [pc, #12]	; (8003b14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b06:	5ccb      	ldrb	r3, [r1, r3]
 8003b08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	bd80      	pop	{r7, pc}
 8003b10:	40023800 	.word	0x40023800
 8003b14:	08009f64 	.word	0x08009f64

08003b18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003b1c:	f7ff ffdc 	bl	8003ad8 <HAL_RCC_GetHCLKFreq>
 8003b20:	4602      	mov	r2, r0
 8003b22:	4b05      	ldr	r3, [pc, #20]	; (8003b38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	0b5b      	lsrs	r3, r3, #13
 8003b28:	f003 0307 	and.w	r3, r3, #7
 8003b2c:	4903      	ldr	r1, [pc, #12]	; (8003b3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b2e:	5ccb      	ldrb	r3, [r1, r3]
 8003b30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	40023800 	.word	0x40023800
 8003b3c:	08009f64 	.word	0x08009f64

08003b40 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b086      	sub	sp, #24
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 0301 	and.w	r3, r3, #1
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d105      	bne.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d035      	beq.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003b68:	4b62      	ldr	r3, [pc, #392]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003b6e:	f7fd fecf 	bl	8001910 <HAL_GetTick>
 8003b72:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003b74:	e008      	b.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003b76:	f7fd fecb 	bl	8001910 <HAL_GetTick>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	1ad3      	subs	r3, r2, r3
 8003b80:	2b02      	cmp	r3, #2
 8003b82:	d901      	bls.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b84:	2303      	movs	r3, #3
 8003b86:	e0b0      	b.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003b88:	4b5b      	ldr	r3, [pc, #364]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d1f0      	bne.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	019a      	lsls	r2, r3, #6
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	071b      	lsls	r3, r3, #28
 8003ba0:	4955      	ldr	r1, [pc, #340]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003ba8:	4b52      	ldr	r3, [pc, #328]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003baa:	2201      	movs	r2, #1
 8003bac:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003bae:	f7fd feaf 	bl	8001910 <HAL_GetTick>
 8003bb2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003bb4:	e008      	b.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003bb6:	f7fd feab 	bl	8001910 <HAL_GetTick>
 8003bba:	4602      	mov	r2, r0
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	1ad3      	subs	r3, r2, r3
 8003bc0:	2b02      	cmp	r3, #2
 8003bc2:	d901      	bls.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003bc4:	2303      	movs	r3, #3
 8003bc6:	e090      	b.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003bc8:	4b4b      	ldr	r3, [pc, #300]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d0f0      	beq.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 0302 	and.w	r3, r3, #2
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	f000 8083 	beq.w	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003be2:	2300      	movs	r3, #0
 8003be4:	60fb      	str	r3, [r7, #12]
 8003be6:	4b44      	ldr	r3, [pc, #272]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bea:	4a43      	ldr	r2, [pc, #268]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003bec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bf0:	6413      	str	r3, [r2, #64]	; 0x40
 8003bf2:	4b41      	ldr	r3, [pc, #260]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bfa:	60fb      	str	r3, [r7, #12]
 8003bfc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003bfe:	4b3f      	ldr	r3, [pc, #252]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a3e      	ldr	r2, [pc, #248]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003c04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c08:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003c0a:	f7fd fe81 	bl	8001910 <HAL_GetTick>
 8003c0e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003c10:	e008      	b.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003c12:	f7fd fe7d 	bl	8001910 <HAL_GetTick>
 8003c16:	4602      	mov	r2, r0
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	1ad3      	subs	r3, r2, r3
 8003c1c:	2b02      	cmp	r3, #2
 8003c1e:	d901      	bls.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003c20:	2303      	movs	r3, #3
 8003c22:	e062      	b.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003c24:	4b35      	ldr	r3, [pc, #212]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d0f0      	beq.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c30:	4b31      	ldr	r3, [pc, #196]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003c32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c38:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d02f      	beq.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c48:	693a      	ldr	r2, [r7, #16]
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d028      	beq.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c4e:	4b2a      	ldr	r3, [pc, #168]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003c50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c56:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c58:	4b29      	ldr	r3, [pc, #164]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c5e:	4b28      	ldr	r3, [pc, #160]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003c60:	2200      	movs	r2, #0
 8003c62:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003c64:	4a24      	ldr	r2, [pc, #144]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003c6a:	4b23      	ldr	r3, [pc, #140]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c6e:	f003 0301 	and.w	r3, r3, #1
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	d114      	bne.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003c76:	f7fd fe4b 	bl	8001910 <HAL_GetTick>
 8003c7a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c7c:	e00a      	b.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c7e:	f7fd fe47 	bl	8001910 <HAL_GetTick>
 8003c82:	4602      	mov	r2, r0
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	1ad3      	subs	r3, r2, r3
 8003c88:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d901      	bls.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003c90:	2303      	movs	r3, #3
 8003c92:	e02a      	b.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c94:	4b18      	ldr	r3, [pc, #96]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003c96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c98:	f003 0302 	and.w	r3, r3, #2
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d0ee      	beq.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	68db      	ldr	r3, [r3, #12]
 8003ca4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ca8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003cac:	d10d      	bne.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003cae:	4b12      	ldr	r3, [pc, #72]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	68db      	ldr	r3, [r3, #12]
 8003cba:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003cbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cc2:	490d      	ldr	r1, [pc, #52]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	608b      	str	r3, [r1, #8]
 8003cc8:	e005      	b.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003cca:	4b0b      	ldr	r3, [pc, #44]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	4a0a      	ldr	r2, [pc, #40]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003cd0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003cd4:	6093      	str	r3, [r2, #8]
 8003cd6:	4b08      	ldr	r3, [pc, #32]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003cd8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	68db      	ldr	r3, [r3, #12]
 8003cde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ce2:	4905      	ldr	r1, [pc, #20]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003ce8:	2300      	movs	r3, #0
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3718      	adds	r7, #24
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	bf00      	nop
 8003cf4:	42470068 	.word	0x42470068
 8003cf8:	40023800 	.word	0x40023800
 8003cfc:	40007000 	.word	0x40007000
 8003d00:	42470e40 	.word	0x42470e40

08003d04 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b087      	sub	sp, #28
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8003d10:	2300      	movs	r3, #0
 8003d12:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8003d14:	2300      	movs	r3, #0
 8003d16:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d13e      	bne.n	8003da0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8003d22:	4b23      	ldr	r3, [pc, #140]	; (8003db0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003d2a:	60fb      	str	r3, [r7, #12]
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d005      	beq.n	8003d3e <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d12f      	bne.n	8003d98 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003d38:	4b1e      	ldr	r3, [pc, #120]	; (8003db4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003d3a:	617b      	str	r3, [r7, #20]
          break;
 8003d3c:	e02f      	b.n	8003d9e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003d3e:	4b1c      	ldr	r3, [pc, #112]	; (8003db0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d4a:	d108      	bne.n	8003d5e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003d4c:	4b18      	ldr	r3, [pc, #96]	; (8003db0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d54:	4a18      	ldr	r2, [pc, #96]	; (8003db8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8003d56:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d5a:	613b      	str	r3, [r7, #16]
 8003d5c:	e007      	b.n	8003d6e <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003d5e:	4b14      	ldr	r3, [pc, #80]	; (8003db0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d66:	4a15      	ldr	r2, [pc, #84]	; (8003dbc <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8003d68:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d6c:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003d6e:	4b10      	ldr	r3, [pc, #64]	; (8003db0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003d70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d74:	099b      	lsrs	r3, r3, #6
 8003d76:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	fb02 f303 	mul.w	r3, r2, r3
 8003d80:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003d82:	4b0b      	ldr	r3, [pc, #44]	; (8003db0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003d84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d88:	0f1b      	lsrs	r3, r3, #28
 8003d8a:	f003 0307 	and.w	r3, r3, #7
 8003d8e:	68ba      	ldr	r2, [r7, #8]
 8003d90:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d94:	617b      	str	r3, [r7, #20]
          break;
 8003d96:	e002      	b.n	8003d9e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	617b      	str	r3, [r7, #20]
          break;
 8003d9c:	bf00      	nop
        }
      }
      break;
 8003d9e:	bf00      	nop
    }
  }
  return frequency;
 8003da0:	697b      	ldr	r3, [r7, #20]
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	371c      	adds	r7, #28
 8003da6:	46bd      	mov	sp, r7
 8003da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dac:	4770      	bx	lr
 8003dae:	bf00      	nop
 8003db0:	40023800 	.word	0x40023800
 8003db4:	00bb8000 	.word	0x00bb8000
 8003db8:	007a1200 	.word	0x007a1200
 8003dbc:	00f42400 	.word	0x00f42400

08003dc0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b082      	sub	sp, #8
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d101      	bne.n	8003dd2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e03f      	b.n	8003e52 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d106      	bne.n	8003dec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2200      	movs	r2, #0
 8003de2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f7fd fc76 	bl	80016d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2224      	movs	r2, #36	; 0x24
 8003df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	68da      	ldr	r2, [r3, #12]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e02:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	f000 fd7b 	bl	8004900 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	691a      	ldr	r2, [r3, #16]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e18:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	695a      	ldr	r2, [r3, #20]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e28:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	68da      	ldr	r2, [r3, #12]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e38:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2220      	movs	r2, #32
 8003e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2220      	movs	r2, #32
 8003e4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003e50:	2300      	movs	r3, #0
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3708      	adds	r7, #8
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}

08003e5a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e5a:	b580      	push	{r7, lr}
 8003e5c:	b08a      	sub	sp, #40	; 0x28
 8003e5e:	af02      	add	r7, sp, #8
 8003e60:	60f8      	str	r0, [r7, #12]
 8003e62:	60b9      	str	r1, [r7, #8]
 8003e64:	603b      	str	r3, [r7, #0]
 8003e66:	4613      	mov	r3, r2
 8003e68:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	2b20      	cmp	r3, #32
 8003e78:	d17c      	bne.n	8003f74 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d002      	beq.n	8003e86 <HAL_UART_Transmit+0x2c>
 8003e80:	88fb      	ldrh	r3, [r7, #6]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d101      	bne.n	8003e8a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e075      	b.n	8003f76 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d101      	bne.n	8003e98 <HAL_UART_Transmit+0x3e>
 8003e94:	2302      	movs	r3, #2
 8003e96:	e06e      	b.n	8003f76 <HAL_UART_Transmit+0x11c>
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2221      	movs	r2, #33	; 0x21
 8003eaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003eae:	f7fd fd2f 	bl	8001910 <HAL_GetTick>
 8003eb2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	88fa      	ldrh	r2, [r7, #6]
 8003eb8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	88fa      	ldrh	r2, [r7, #6]
 8003ebe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ec8:	d108      	bne.n	8003edc <HAL_UART_Transmit+0x82>
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	691b      	ldr	r3, [r3, #16]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d104      	bne.n	8003edc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	61bb      	str	r3, [r7, #24]
 8003eda:	e003      	b.n	8003ee4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003eec:	e02a      	b.n	8003f44 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	9300      	str	r3, [sp, #0]
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	2180      	movs	r1, #128	; 0x80
 8003ef8:	68f8      	ldr	r0, [r7, #12]
 8003efa:	f000 faf9 	bl	80044f0 <UART_WaitOnFlagUntilTimeout>
 8003efe:	4603      	mov	r3, r0
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d001      	beq.n	8003f08 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003f04:	2303      	movs	r3, #3
 8003f06:	e036      	b.n	8003f76 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003f08:	69fb      	ldr	r3, [r7, #28]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d10b      	bne.n	8003f26 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f0e:	69bb      	ldr	r3, [r7, #24]
 8003f10:	881b      	ldrh	r3, [r3, #0]
 8003f12:	461a      	mov	r2, r3
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f1c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003f1e:	69bb      	ldr	r3, [r7, #24]
 8003f20:	3302      	adds	r3, #2
 8003f22:	61bb      	str	r3, [r7, #24]
 8003f24:	e007      	b.n	8003f36 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f26:	69fb      	ldr	r3, [r7, #28]
 8003f28:	781a      	ldrb	r2, [r3, #0]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003f30:	69fb      	ldr	r3, [r7, #28]
 8003f32:	3301      	adds	r3, #1
 8003f34:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f3a:	b29b      	uxth	r3, r3
 8003f3c:	3b01      	subs	r3, #1
 8003f3e:	b29a      	uxth	r2, r3
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f48:	b29b      	uxth	r3, r3
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d1cf      	bne.n	8003eee <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	9300      	str	r3, [sp, #0]
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	2200      	movs	r2, #0
 8003f56:	2140      	movs	r1, #64	; 0x40
 8003f58:	68f8      	ldr	r0, [r7, #12]
 8003f5a:	f000 fac9 	bl	80044f0 <UART_WaitOnFlagUntilTimeout>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d001      	beq.n	8003f68 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003f64:	2303      	movs	r3, #3
 8003f66:	e006      	b.n	8003f76 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2220      	movs	r2, #32
 8003f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003f70:	2300      	movs	r3, #0
 8003f72:	e000      	b.n	8003f76 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003f74:	2302      	movs	r3, #2
  }
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3720      	adds	r7, #32
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}
	...

08003f80 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b0ba      	sub	sp, #232	; 0xe8
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	68db      	ldr	r3, [r3, #12]
 8003f98:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	695b      	ldr	r3, [r3, #20]
 8003fa2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003fac:	2300      	movs	r3, #0
 8003fae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003fb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fb6:	f003 030f 	and.w	r3, r3, #15
 8003fba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003fbe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d10f      	bne.n	8003fe6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003fc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fca:	f003 0320 	and.w	r3, r3, #32
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d009      	beq.n	8003fe6 <HAL_UART_IRQHandler+0x66>
 8003fd2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fd6:	f003 0320 	and.w	r3, r3, #32
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d003      	beq.n	8003fe6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f000 fbd3 	bl	800478a <UART_Receive_IT>
      return;
 8003fe4:	e256      	b.n	8004494 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003fe6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	f000 80de 	beq.w	80041ac <HAL_UART_IRQHandler+0x22c>
 8003ff0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ff4:	f003 0301 	and.w	r3, r3, #1
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d106      	bne.n	800400a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003ffc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004000:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004004:	2b00      	cmp	r3, #0
 8004006:	f000 80d1 	beq.w	80041ac <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800400a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800400e:	f003 0301 	and.w	r3, r3, #1
 8004012:	2b00      	cmp	r3, #0
 8004014:	d00b      	beq.n	800402e <HAL_UART_IRQHandler+0xae>
 8004016:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800401a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800401e:	2b00      	cmp	r3, #0
 8004020:	d005      	beq.n	800402e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004026:	f043 0201 	orr.w	r2, r3, #1
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800402e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004032:	f003 0304 	and.w	r3, r3, #4
 8004036:	2b00      	cmp	r3, #0
 8004038:	d00b      	beq.n	8004052 <HAL_UART_IRQHandler+0xd2>
 800403a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800403e:	f003 0301 	and.w	r3, r3, #1
 8004042:	2b00      	cmp	r3, #0
 8004044:	d005      	beq.n	8004052 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404a:	f043 0202 	orr.w	r2, r3, #2
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004052:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004056:	f003 0302 	and.w	r3, r3, #2
 800405a:	2b00      	cmp	r3, #0
 800405c:	d00b      	beq.n	8004076 <HAL_UART_IRQHandler+0xf6>
 800405e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004062:	f003 0301 	and.w	r3, r3, #1
 8004066:	2b00      	cmp	r3, #0
 8004068:	d005      	beq.n	8004076 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800406e:	f043 0204 	orr.w	r2, r3, #4
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004076:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800407a:	f003 0308 	and.w	r3, r3, #8
 800407e:	2b00      	cmp	r3, #0
 8004080:	d011      	beq.n	80040a6 <HAL_UART_IRQHandler+0x126>
 8004082:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004086:	f003 0320 	and.w	r3, r3, #32
 800408a:	2b00      	cmp	r3, #0
 800408c:	d105      	bne.n	800409a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800408e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004092:	f003 0301 	and.w	r3, r3, #1
 8004096:	2b00      	cmp	r3, #0
 8004098:	d005      	beq.n	80040a6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409e:	f043 0208 	orr.w	r2, r3, #8
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	f000 81ed 	beq.w	800448a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80040b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040b4:	f003 0320 	and.w	r3, r3, #32
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d008      	beq.n	80040ce <HAL_UART_IRQHandler+0x14e>
 80040bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040c0:	f003 0320 	and.w	r3, r3, #32
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d002      	beq.n	80040ce <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	f000 fb5e 	bl	800478a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	695b      	ldr	r3, [r3, #20]
 80040d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040d8:	2b40      	cmp	r3, #64	; 0x40
 80040da:	bf0c      	ite	eq
 80040dc:	2301      	moveq	r3, #1
 80040de:	2300      	movne	r3, #0
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ea:	f003 0308 	and.w	r3, r3, #8
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d103      	bne.n	80040fa <HAL_UART_IRQHandler+0x17a>
 80040f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d04f      	beq.n	800419a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f000 fa66 	bl	80045cc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	695b      	ldr	r3, [r3, #20]
 8004106:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800410a:	2b40      	cmp	r3, #64	; 0x40
 800410c:	d141      	bne.n	8004192 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	3314      	adds	r3, #20
 8004114:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004118:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800411c:	e853 3f00 	ldrex	r3, [r3]
 8004120:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004124:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004128:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800412c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	3314      	adds	r3, #20
 8004136:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800413a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800413e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004142:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004146:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800414a:	e841 2300 	strex	r3, r2, [r1]
 800414e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004152:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004156:	2b00      	cmp	r3, #0
 8004158:	d1d9      	bne.n	800410e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800415e:	2b00      	cmp	r3, #0
 8004160:	d013      	beq.n	800418a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004166:	4a7d      	ldr	r2, [pc, #500]	; (800435c <HAL_UART_IRQHandler+0x3dc>)
 8004168:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800416e:	4618      	mov	r0, r3
 8004170:	f7fd fe7e 	bl	8001e70 <HAL_DMA_Abort_IT>
 8004174:	4603      	mov	r3, r0
 8004176:	2b00      	cmp	r3, #0
 8004178:	d016      	beq.n	80041a8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800417e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004180:	687a      	ldr	r2, [r7, #4]
 8004182:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004184:	4610      	mov	r0, r2
 8004186:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004188:	e00e      	b.n	80041a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f000 f99a 	bl	80044c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004190:	e00a      	b.n	80041a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f000 f996 	bl	80044c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004198:	e006      	b.n	80041a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f000 f992 	bl	80044c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2200      	movs	r2, #0
 80041a4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80041a6:	e170      	b.n	800448a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041a8:	bf00      	nop
    return;
 80041aa:	e16e      	b.n	800448a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	f040 814a 	bne.w	800444a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80041b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041ba:	f003 0310 	and.w	r3, r3, #16
 80041be:	2b00      	cmp	r3, #0
 80041c0:	f000 8143 	beq.w	800444a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80041c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041c8:	f003 0310 	and.w	r3, r3, #16
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	f000 813c 	beq.w	800444a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80041d2:	2300      	movs	r3, #0
 80041d4:	60bb      	str	r3, [r7, #8]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	60bb      	str	r3, [r7, #8]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	60bb      	str	r3, [r7, #8]
 80041e6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	695b      	ldr	r3, [r3, #20]
 80041ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041f2:	2b40      	cmp	r3, #64	; 0x40
 80041f4:	f040 80b4 	bne.w	8004360 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004204:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004208:	2b00      	cmp	r3, #0
 800420a:	f000 8140 	beq.w	800448e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004212:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004216:	429a      	cmp	r2, r3
 8004218:	f080 8139 	bcs.w	800448e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004222:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004228:	69db      	ldr	r3, [r3, #28]
 800422a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800422e:	f000 8088 	beq.w	8004342 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	330c      	adds	r3, #12
 8004238:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800423c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004240:	e853 3f00 	ldrex	r3, [r3]
 8004244:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004248:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800424c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004250:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	330c      	adds	r3, #12
 800425a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800425e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004262:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004266:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800426a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800426e:	e841 2300 	strex	r3, r2, [r1]
 8004272:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004276:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800427a:	2b00      	cmp	r3, #0
 800427c:	d1d9      	bne.n	8004232 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	3314      	adds	r3, #20
 8004284:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004286:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004288:	e853 3f00 	ldrex	r3, [r3]
 800428c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800428e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004290:	f023 0301 	bic.w	r3, r3, #1
 8004294:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	3314      	adds	r3, #20
 800429e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80042a2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80042a6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042a8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80042aa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80042ae:	e841 2300 	strex	r3, r2, [r1]
 80042b2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80042b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d1e1      	bne.n	800427e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	3314      	adds	r3, #20
 80042c0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80042c4:	e853 3f00 	ldrex	r3, [r3]
 80042c8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80042ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	3314      	adds	r3, #20
 80042da:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80042de:	66fa      	str	r2, [r7, #108]	; 0x6c
 80042e0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042e2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80042e4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80042e6:	e841 2300 	strex	r3, r2, [r1]
 80042ea:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80042ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d1e3      	bne.n	80042ba <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2220      	movs	r2, #32
 80042f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2200      	movs	r2, #0
 80042fe:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	330c      	adds	r3, #12
 8004306:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004308:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800430a:	e853 3f00 	ldrex	r3, [r3]
 800430e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004310:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004312:	f023 0310 	bic.w	r3, r3, #16
 8004316:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	330c      	adds	r3, #12
 8004320:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004324:	65ba      	str	r2, [r7, #88]	; 0x58
 8004326:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004328:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800432a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800432c:	e841 2300 	strex	r3, r2, [r1]
 8004330:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004332:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004334:	2b00      	cmp	r3, #0
 8004336:	d1e3      	bne.n	8004300 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800433c:	4618      	mov	r0, r3
 800433e:	f7fd fd27 	bl	8001d90 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800434a:	b29b      	uxth	r3, r3
 800434c:	1ad3      	subs	r3, r2, r3
 800434e:	b29b      	uxth	r3, r3
 8004350:	4619      	mov	r1, r3
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f000 f8c0 	bl	80044d8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004358:	e099      	b.n	800448e <HAL_UART_IRQHandler+0x50e>
 800435a:	bf00      	nop
 800435c:	08004693 	.word	0x08004693
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004368:	b29b      	uxth	r3, r3
 800436a:	1ad3      	subs	r3, r2, r3
 800436c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004374:	b29b      	uxth	r3, r3
 8004376:	2b00      	cmp	r3, #0
 8004378:	f000 808b 	beq.w	8004492 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800437c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004380:	2b00      	cmp	r3, #0
 8004382:	f000 8086 	beq.w	8004492 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	330c      	adds	r3, #12
 800438c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800438e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004390:	e853 3f00 	ldrex	r3, [r3]
 8004394:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004396:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004398:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800439c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	330c      	adds	r3, #12
 80043a6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80043aa:	647a      	str	r2, [r7, #68]	; 0x44
 80043ac:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80043b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80043b2:	e841 2300 	strex	r3, r2, [r1]
 80043b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80043b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d1e3      	bne.n	8004386 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	3314      	adds	r3, #20
 80043c4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c8:	e853 3f00 	ldrex	r3, [r3]
 80043cc:	623b      	str	r3, [r7, #32]
   return(result);
 80043ce:	6a3b      	ldr	r3, [r7, #32]
 80043d0:	f023 0301 	bic.w	r3, r3, #1
 80043d4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	3314      	adds	r3, #20
 80043de:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80043e2:	633a      	str	r2, [r7, #48]	; 0x30
 80043e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80043e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043ea:	e841 2300 	strex	r3, r2, [r1]
 80043ee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80043f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d1e3      	bne.n	80043be <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2220      	movs	r2, #32
 80043fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2200      	movs	r2, #0
 8004402:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	330c      	adds	r3, #12
 800440a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	e853 3f00 	ldrex	r3, [r3]
 8004412:	60fb      	str	r3, [r7, #12]
   return(result);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	f023 0310 	bic.w	r3, r3, #16
 800441a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	330c      	adds	r3, #12
 8004424:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004428:	61fa      	str	r2, [r7, #28]
 800442a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800442c:	69b9      	ldr	r1, [r7, #24]
 800442e:	69fa      	ldr	r2, [r7, #28]
 8004430:	e841 2300 	strex	r3, r2, [r1]
 8004434:	617b      	str	r3, [r7, #20]
   return(result);
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d1e3      	bne.n	8004404 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800443c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004440:	4619      	mov	r1, r3
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f000 f848 	bl	80044d8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004448:	e023      	b.n	8004492 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800444a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800444e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004452:	2b00      	cmp	r3, #0
 8004454:	d009      	beq.n	800446a <HAL_UART_IRQHandler+0x4ea>
 8004456:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800445a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800445e:	2b00      	cmp	r3, #0
 8004460:	d003      	beq.n	800446a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f000 f929 	bl	80046ba <UART_Transmit_IT>
    return;
 8004468:	e014      	b.n	8004494 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800446a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800446e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004472:	2b00      	cmp	r3, #0
 8004474:	d00e      	beq.n	8004494 <HAL_UART_IRQHandler+0x514>
 8004476:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800447a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800447e:	2b00      	cmp	r3, #0
 8004480:	d008      	beq.n	8004494 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f000 f969 	bl	800475a <UART_EndTransmit_IT>
    return;
 8004488:	e004      	b.n	8004494 <HAL_UART_IRQHandler+0x514>
    return;
 800448a:	bf00      	nop
 800448c:	e002      	b.n	8004494 <HAL_UART_IRQHandler+0x514>
      return;
 800448e:	bf00      	nop
 8004490:	e000      	b.n	8004494 <HAL_UART_IRQHandler+0x514>
      return;
 8004492:	bf00      	nop
  }
}
 8004494:	37e8      	adds	r7, #232	; 0xe8
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}
 800449a:	bf00      	nop

0800449c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800449c:	b480      	push	{r7}
 800449e:	b083      	sub	sp, #12
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80044a4:	bf00      	nop
 80044a6:	370c      	adds	r7, #12
 80044a8:	46bd      	mov	sp, r7
 80044aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ae:	4770      	bx	lr

080044b0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b083      	sub	sp, #12
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80044b8:	bf00      	nop
 80044ba:	370c      	adds	r7, #12
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr

080044c4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b083      	sub	sp, #12
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80044cc:	bf00      	nop
 80044ce:	370c      	adds	r7, #12
 80044d0:	46bd      	mov	sp, r7
 80044d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d6:	4770      	bx	lr

080044d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80044d8:	b480      	push	{r7}
 80044da:	b083      	sub	sp, #12
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
 80044e0:	460b      	mov	r3, r1
 80044e2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80044e4:	bf00      	nop
 80044e6:	370c      	adds	r7, #12
 80044e8:	46bd      	mov	sp, r7
 80044ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ee:	4770      	bx	lr

080044f0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b090      	sub	sp, #64	; 0x40
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	60f8      	str	r0, [r7, #12]
 80044f8:	60b9      	str	r1, [r7, #8]
 80044fa:	603b      	str	r3, [r7, #0]
 80044fc:	4613      	mov	r3, r2
 80044fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004500:	e050      	b.n	80045a4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004502:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004508:	d04c      	beq.n	80045a4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800450a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800450c:	2b00      	cmp	r3, #0
 800450e:	d007      	beq.n	8004520 <UART_WaitOnFlagUntilTimeout+0x30>
 8004510:	f7fd f9fe 	bl	8001910 <HAL_GetTick>
 8004514:	4602      	mov	r2, r0
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	1ad3      	subs	r3, r2, r3
 800451a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800451c:	429a      	cmp	r2, r3
 800451e:	d241      	bcs.n	80045a4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	330c      	adds	r3, #12
 8004526:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800452a:	e853 3f00 	ldrex	r3, [r3]
 800452e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004532:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004536:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	330c      	adds	r3, #12
 800453e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004540:	637a      	str	r2, [r7, #52]	; 0x34
 8004542:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004544:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004546:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004548:	e841 2300 	strex	r3, r2, [r1]
 800454c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800454e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004550:	2b00      	cmp	r3, #0
 8004552:	d1e5      	bne.n	8004520 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	3314      	adds	r3, #20
 800455a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	e853 3f00 	ldrex	r3, [r3]
 8004562:	613b      	str	r3, [r7, #16]
   return(result);
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	f023 0301 	bic.w	r3, r3, #1
 800456a:	63bb      	str	r3, [r7, #56]	; 0x38
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	3314      	adds	r3, #20
 8004572:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004574:	623a      	str	r2, [r7, #32]
 8004576:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004578:	69f9      	ldr	r1, [r7, #28]
 800457a:	6a3a      	ldr	r2, [r7, #32]
 800457c:	e841 2300 	strex	r3, r2, [r1]
 8004580:	61bb      	str	r3, [r7, #24]
   return(result);
 8004582:	69bb      	ldr	r3, [r7, #24]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d1e5      	bne.n	8004554 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2220      	movs	r2, #32
 800458c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2220      	movs	r2, #32
 8004594:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2200      	movs	r2, #0
 800459c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80045a0:	2303      	movs	r3, #3
 80045a2:	e00f      	b.n	80045c4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	4013      	ands	r3, r2
 80045ae:	68ba      	ldr	r2, [r7, #8]
 80045b0:	429a      	cmp	r2, r3
 80045b2:	bf0c      	ite	eq
 80045b4:	2301      	moveq	r3, #1
 80045b6:	2300      	movne	r3, #0
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	461a      	mov	r2, r3
 80045bc:	79fb      	ldrb	r3, [r7, #7]
 80045be:	429a      	cmp	r2, r3
 80045c0:	d09f      	beq.n	8004502 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80045c2:	2300      	movs	r3, #0
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	3740      	adds	r7, #64	; 0x40
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}

080045cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b095      	sub	sp, #84	; 0x54
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	330c      	adds	r3, #12
 80045da:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045de:	e853 3f00 	ldrex	r3, [r3]
 80045e2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80045e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045e6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80045ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	330c      	adds	r3, #12
 80045f2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80045f4:	643a      	str	r2, [r7, #64]	; 0x40
 80045f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045f8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80045fa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80045fc:	e841 2300 	strex	r3, r2, [r1]
 8004600:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004604:	2b00      	cmp	r3, #0
 8004606:	d1e5      	bne.n	80045d4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	3314      	adds	r3, #20
 800460e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004610:	6a3b      	ldr	r3, [r7, #32]
 8004612:	e853 3f00 	ldrex	r3, [r3]
 8004616:	61fb      	str	r3, [r7, #28]
   return(result);
 8004618:	69fb      	ldr	r3, [r7, #28]
 800461a:	f023 0301 	bic.w	r3, r3, #1
 800461e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	3314      	adds	r3, #20
 8004626:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004628:	62fa      	str	r2, [r7, #44]	; 0x2c
 800462a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800462c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800462e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004630:	e841 2300 	strex	r3, r2, [r1]
 8004634:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004638:	2b00      	cmp	r3, #0
 800463a:	d1e5      	bne.n	8004608 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004640:	2b01      	cmp	r3, #1
 8004642:	d119      	bne.n	8004678 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	330c      	adds	r3, #12
 800464a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	e853 3f00 	ldrex	r3, [r3]
 8004652:	60bb      	str	r3, [r7, #8]
   return(result);
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	f023 0310 	bic.w	r3, r3, #16
 800465a:	647b      	str	r3, [r7, #68]	; 0x44
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	330c      	adds	r3, #12
 8004662:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004664:	61ba      	str	r2, [r7, #24]
 8004666:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004668:	6979      	ldr	r1, [r7, #20]
 800466a:	69ba      	ldr	r2, [r7, #24]
 800466c:	e841 2300 	strex	r3, r2, [r1]
 8004670:	613b      	str	r3, [r7, #16]
   return(result);
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d1e5      	bne.n	8004644 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2220      	movs	r2, #32
 800467c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2200      	movs	r2, #0
 8004684:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004686:	bf00      	nop
 8004688:	3754      	adds	r7, #84	; 0x54
 800468a:	46bd      	mov	sp, r7
 800468c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004690:	4770      	bx	lr

08004692 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004692:	b580      	push	{r7, lr}
 8004694:	b084      	sub	sp, #16
 8004696:	af00      	add	r7, sp, #0
 8004698:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800469e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2200      	movs	r2, #0
 80046a4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2200      	movs	r2, #0
 80046aa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80046ac:	68f8      	ldr	r0, [r7, #12]
 80046ae:	f7ff ff09 	bl	80044c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80046b2:	bf00      	nop
 80046b4:	3710      	adds	r7, #16
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}

080046ba <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80046ba:	b480      	push	{r7}
 80046bc:	b085      	sub	sp, #20
 80046be:	af00      	add	r7, sp, #0
 80046c0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046c8:	b2db      	uxtb	r3, r3
 80046ca:	2b21      	cmp	r3, #33	; 0x21
 80046cc:	d13e      	bne.n	800474c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046d6:	d114      	bne.n	8004702 <UART_Transmit_IT+0x48>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	691b      	ldr	r3, [r3, #16]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d110      	bne.n	8004702 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6a1b      	ldr	r3, [r3, #32]
 80046e4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	881b      	ldrh	r3, [r3, #0]
 80046ea:	461a      	mov	r2, r3
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046f4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6a1b      	ldr	r3, [r3, #32]
 80046fa:	1c9a      	adds	r2, r3, #2
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	621a      	str	r2, [r3, #32]
 8004700:	e008      	b.n	8004714 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6a1b      	ldr	r3, [r3, #32]
 8004706:	1c59      	adds	r1, r3, #1
 8004708:	687a      	ldr	r2, [r7, #4]
 800470a:	6211      	str	r1, [r2, #32]
 800470c:	781a      	ldrb	r2, [r3, #0]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004718:	b29b      	uxth	r3, r3
 800471a:	3b01      	subs	r3, #1
 800471c:	b29b      	uxth	r3, r3
 800471e:	687a      	ldr	r2, [r7, #4]
 8004720:	4619      	mov	r1, r3
 8004722:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004724:	2b00      	cmp	r3, #0
 8004726:	d10f      	bne.n	8004748 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	68da      	ldr	r2, [r3, #12]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004736:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	68da      	ldr	r2, [r3, #12]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004746:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004748:	2300      	movs	r3, #0
 800474a:	e000      	b.n	800474e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800474c:	2302      	movs	r3, #2
  }
}
 800474e:	4618      	mov	r0, r3
 8004750:	3714      	adds	r7, #20
 8004752:	46bd      	mov	sp, r7
 8004754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004758:	4770      	bx	lr

0800475a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800475a:	b580      	push	{r7, lr}
 800475c:	b082      	sub	sp, #8
 800475e:	af00      	add	r7, sp, #0
 8004760:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	68da      	ldr	r2, [r3, #12]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004770:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2220      	movs	r2, #32
 8004776:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f7ff fe8e 	bl	800449c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004780:	2300      	movs	r3, #0
}
 8004782:	4618      	mov	r0, r3
 8004784:	3708      	adds	r7, #8
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}

0800478a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800478a:	b580      	push	{r7, lr}
 800478c:	b08c      	sub	sp, #48	; 0x30
 800478e:	af00      	add	r7, sp, #0
 8004790:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004798:	b2db      	uxtb	r3, r3
 800479a:	2b22      	cmp	r3, #34	; 0x22
 800479c:	f040 80ab 	bne.w	80048f6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047a8:	d117      	bne.n	80047da <UART_Receive_IT+0x50>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	691b      	ldr	r3, [r3, #16]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d113      	bne.n	80047da <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80047b2:	2300      	movs	r3, #0
 80047b4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ba:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	b29b      	uxth	r3, r3
 80047c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047c8:	b29a      	uxth	r2, r3
 80047ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047cc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047d2:	1c9a      	adds	r2, r3, #2
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	629a      	str	r2, [r3, #40]	; 0x28
 80047d8:	e026      	b.n	8004828 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047de:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80047e0:	2300      	movs	r3, #0
 80047e2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047ec:	d007      	beq.n	80047fe <UART_Receive_IT+0x74>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d10a      	bne.n	800480c <UART_Receive_IT+0x82>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	691b      	ldr	r3, [r3, #16]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d106      	bne.n	800480c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	b2da      	uxtb	r2, r3
 8004806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004808:	701a      	strb	r2, [r3, #0]
 800480a:	e008      	b.n	800481e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	b2db      	uxtb	r3, r3
 8004814:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004818:	b2da      	uxtb	r2, r3
 800481a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800481c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004822:	1c5a      	adds	r2, r3, #1
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800482c:	b29b      	uxth	r3, r3
 800482e:	3b01      	subs	r3, #1
 8004830:	b29b      	uxth	r3, r3
 8004832:	687a      	ldr	r2, [r7, #4]
 8004834:	4619      	mov	r1, r3
 8004836:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004838:	2b00      	cmp	r3, #0
 800483a:	d15a      	bne.n	80048f2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	68da      	ldr	r2, [r3, #12]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f022 0220 	bic.w	r2, r2, #32
 800484a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	68da      	ldr	r2, [r3, #12]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800485a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	695a      	ldr	r2, [r3, #20]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f022 0201 	bic.w	r2, r2, #1
 800486a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2220      	movs	r2, #32
 8004870:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004878:	2b01      	cmp	r3, #1
 800487a:	d135      	bne.n	80048e8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2200      	movs	r2, #0
 8004880:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	330c      	adds	r3, #12
 8004888:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	e853 3f00 	ldrex	r3, [r3]
 8004890:	613b      	str	r3, [r7, #16]
   return(result);
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	f023 0310 	bic.w	r3, r3, #16
 8004898:	627b      	str	r3, [r7, #36]	; 0x24
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	330c      	adds	r3, #12
 80048a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048a2:	623a      	str	r2, [r7, #32]
 80048a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048a6:	69f9      	ldr	r1, [r7, #28]
 80048a8:	6a3a      	ldr	r2, [r7, #32]
 80048aa:	e841 2300 	strex	r3, r2, [r1]
 80048ae:	61bb      	str	r3, [r7, #24]
   return(result);
 80048b0:	69bb      	ldr	r3, [r7, #24]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d1e5      	bne.n	8004882 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f003 0310 	and.w	r3, r3, #16
 80048c0:	2b10      	cmp	r3, #16
 80048c2:	d10a      	bne.n	80048da <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80048c4:	2300      	movs	r3, #0
 80048c6:	60fb      	str	r3, [r7, #12]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	60fb      	str	r3, [r7, #12]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	60fb      	str	r3, [r7, #12]
 80048d8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80048de:	4619      	mov	r1, r3
 80048e0:	6878      	ldr	r0, [r7, #4]
 80048e2:	f7ff fdf9 	bl	80044d8 <HAL_UARTEx_RxEventCallback>
 80048e6:	e002      	b.n	80048ee <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	f7ff fde1 	bl	80044b0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80048ee:	2300      	movs	r3, #0
 80048f0:	e002      	b.n	80048f8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80048f2:	2300      	movs	r3, #0
 80048f4:	e000      	b.n	80048f8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80048f6:	2302      	movs	r3, #2
  }
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	3730      	adds	r7, #48	; 0x30
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd80      	pop	{r7, pc}

08004900 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004900:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004904:	b0c0      	sub	sp, #256	; 0x100
 8004906:	af00      	add	r7, sp, #0
 8004908:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800490c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	691b      	ldr	r3, [r3, #16]
 8004914:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800491c:	68d9      	ldr	r1, [r3, #12]
 800491e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004922:	681a      	ldr	r2, [r3, #0]
 8004924:	ea40 0301 	orr.w	r3, r0, r1
 8004928:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800492a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800492e:	689a      	ldr	r2, [r3, #8]
 8004930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004934:	691b      	ldr	r3, [r3, #16]
 8004936:	431a      	orrs	r2, r3
 8004938:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800493c:	695b      	ldr	r3, [r3, #20]
 800493e:	431a      	orrs	r2, r3
 8004940:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004944:	69db      	ldr	r3, [r3, #28]
 8004946:	4313      	orrs	r3, r2
 8004948:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800494c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	68db      	ldr	r3, [r3, #12]
 8004954:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004958:	f021 010c 	bic.w	r1, r1, #12
 800495c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004966:	430b      	orrs	r3, r1
 8004968:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800496a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	695b      	ldr	r3, [r3, #20]
 8004972:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004976:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800497a:	6999      	ldr	r1, [r3, #24]
 800497c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	ea40 0301 	orr.w	r3, r0, r1
 8004986:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004988:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800498c:	681a      	ldr	r2, [r3, #0]
 800498e:	4b8f      	ldr	r3, [pc, #572]	; (8004bcc <UART_SetConfig+0x2cc>)
 8004990:	429a      	cmp	r2, r3
 8004992:	d005      	beq.n	80049a0 <UART_SetConfig+0xa0>
 8004994:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	4b8d      	ldr	r3, [pc, #564]	; (8004bd0 <UART_SetConfig+0x2d0>)
 800499c:	429a      	cmp	r2, r3
 800499e:	d104      	bne.n	80049aa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80049a0:	f7ff f8ba 	bl	8003b18 <HAL_RCC_GetPCLK2Freq>
 80049a4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80049a8:	e003      	b.n	80049b2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80049aa:	f7ff f8a1 	bl	8003af0 <HAL_RCC_GetPCLK1Freq>
 80049ae:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80049b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049b6:	69db      	ldr	r3, [r3, #28]
 80049b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049bc:	f040 810c 	bne.w	8004bd8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80049c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049c4:	2200      	movs	r2, #0
 80049c6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80049ca:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80049ce:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80049d2:	4622      	mov	r2, r4
 80049d4:	462b      	mov	r3, r5
 80049d6:	1891      	adds	r1, r2, r2
 80049d8:	65b9      	str	r1, [r7, #88]	; 0x58
 80049da:	415b      	adcs	r3, r3
 80049dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80049de:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80049e2:	4621      	mov	r1, r4
 80049e4:	eb12 0801 	adds.w	r8, r2, r1
 80049e8:	4629      	mov	r1, r5
 80049ea:	eb43 0901 	adc.w	r9, r3, r1
 80049ee:	f04f 0200 	mov.w	r2, #0
 80049f2:	f04f 0300 	mov.w	r3, #0
 80049f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80049fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80049fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a02:	4690      	mov	r8, r2
 8004a04:	4699      	mov	r9, r3
 8004a06:	4623      	mov	r3, r4
 8004a08:	eb18 0303 	adds.w	r3, r8, r3
 8004a0c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004a10:	462b      	mov	r3, r5
 8004a12:	eb49 0303 	adc.w	r3, r9, r3
 8004a16:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004a1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	2200      	movs	r2, #0
 8004a22:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004a26:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004a2a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004a2e:	460b      	mov	r3, r1
 8004a30:	18db      	adds	r3, r3, r3
 8004a32:	653b      	str	r3, [r7, #80]	; 0x50
 8004a34:	4613      	mov	r3, r2
 8004a36:	eb42 0303 	adc.w	r3, r2, r3
 8004a3a:	657b      	str	r3, [r7, #84]	; 0x54
 8004a3c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004a40:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004a44:	f7fc f8b0 	bl	8000ba8 <__aeabi_uldivmod>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	460b      	mov	r3, r1
 8004a4c:	4b61      	ldr	r3, [pc, #388]	; (8004bd4 <UART_SetConfig+0x2d4>)
 8004a4e:	fba3 2302 	umull	r2, r3, r3, r2
 8004a52:	095b      	lsrs	r3, r3, #5
 8004a54:	011c      	lsls	r4, r3, #4
 8004a56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004a60:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004a64:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004a68:	4642      	mov	r2, r8
 8004a6a:	464b      	mov	r3, r9
 8004a6c:	1891      	adds	r1, r2, r2
 8004a6e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004a70:	415b      	adcs	r3, r3
 8004a72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a74:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004a78:	4641      	mov	r1, r8
 8004a7a:	eb12 0a01 	adds.w	sl, r2, r1
 8004a7e:	4649      	mov	r1, r9
 8004a80:	eb43 0b01 	adc.w	fp, r3, r1
 8004a84:	f04f 0200 	mov.w	r2, #0
 8004a88:	f04f 0300 	mov.w	r3, #0
 8004a8c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004a90:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004a94:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a98:	4692      	mov	sl, r2
 8004a9a:	469b      	mov	fp, r3
 8004a9c:	4643      	mov	r3, r8
 8004a9e:	eb1a 0303 	adds.w	r3, sl, r3
 8004aa2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004aa6:	464b      	mov	r3, r9
 8004aa8:	eb4b 0303 	adc.w	r3, fp, r3
 8004aac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004ab0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004abc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004ac0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004ac4:	460b      	mov	r3, r1
 8004ac6:	18db      	adds	r3, r3, r3
 8004ac8:	643b      	str	r3, [r7, #64]	; 0x40
 8004aca:	4613      	mov	r3, r2
 8004acc:	eb42 0303 	adc.w	r3, r2, r3
 8004ad0:	647b      	str	r3, [r7, #68]	; 0x44
 8004ad2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004ad6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004ada:	f7fc f865 	bl	8000ba8 <__aeabi_uldivmod>
 8004ade:	4602      	mov	r2, r0
 8004ae0:	460b      	mov	r3, r1
 8004ae2:	4611      	mov	r1, r2
 8004ae4:	4b3b      	ldr	r3, [pc, #236]	; (8004bd4 <UART_SetConfig+0x2d4>)
 8004ae6:	fba3 2301 	umull	r2, r3, r3, r1
 8004aea:	095b      	lsrs	r3, r3, #5
 8004aec:	2264      	movs	r2, #100	; 0x64
 8004aee:	fb02 f303 	mul.w	r3, r2, r3
 8004af2:	1acb      	subs	r3, r1, r3
 8004af4:	00db      	lsls	r3, r3, #3
 8004af6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004afa:	4b36      	ldr	r3, [pc, #216]	; (8004bd4 <UART_SetConfig+0x2d4>)
 8004afc:	fba3 2302 	umull	r2, r3, r3, r2
 8004b00:	095b      	lsrs	r3, r3, #5
 8004b02:	005b      	lsls	r3, r3, #1
 8004b04:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004b08:	441c      	add	r4, r3
 8004b0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b0e:	2200      	movs	r2, #0
 8004b10:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004b14:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004b18:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004b1c:	4642      	mov	r2, r8
 8004b1e:	464b      	mov	r3, r9
 8004b20:	1891      	adds	r1, r2, r2
 8004b22:	63b9      	str	r1, [r7, #56]	; 0x38
 8004b24:	415b      	adcs	r3, r3
 8004b26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b28:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004b2c:	4641      	mov	r1, r8
 8004b2e:	1851      	adds	r1, r2, r1
 8004b30:	6339      	str	r1, [r7, #48]	; 0x30
 8004b32:	4649      	mov	r1, r9
 8004b34:	414b      	adcs	r3, r1
 8004b36:	637b      	str	r3, [r7, #52]	; 0x34
 8004b38:	f04f 0200 	mov.w	r2, #0
 8004b3c:	f04f 0300 	mov.w	r3, #0
 8004b40:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004b44:	4659      	mov	r1, fp
 8004b46:	00cb      	lsls	r3, r1, #3
 8004b48:	4651      	mov	r1, sl
 8004b4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b4e:	4651      	mov	r1, sl
 8004b50:	00ca      	lsls	r2, r1, #3
 8004b52:	4610      	mov	r0, r2
 8004b54:	4619      	mov	r1, r3
 8004b56:	4603      	mov	r3, r0
 8004b58:	4642      	mov	r2, r8
 8004b5a:	189b      	adds	r3, r3, r2
 8004b5c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004b60:	464b      	mov	r3, r9
 8004b62:	460a      	mov	r2, r1
 8004b64:	eb42 0303 	adc.w	r3, r2, r3
 8004b68:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	2200      	movs	r2, #0
 8004b74:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004b78:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004b7c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004b80:	460b      	mov	r3, r1
 8004b82:	18db      	adds	r3, r3, r3
 8004b84:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b86:	4613      	mov	r3, r2
 8004b88:	eb42 0303 	adc.w	r3, r2, r3
 8004b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b8e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004b92:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004b96:	f7fc f807 	bl	8000ba8 <__aeabi_uldivmod>
 8004b9a:	4602      	mov	r2, r0
 8004b9c:	460b      	mov	r3, r1
 8004b9e:	4b0d      	ldr	r3, [pc, #52]	; (8004bd4 <UART_SetConfig+0x2d4>)
 8004ba0:	fba3 1302 	umull	r1, r3, r3, r2
 8004ba4:	095b      	lsrs	r3, r3, #5
 8004ba6:	2164      	movs	r1, #100	; 0x64
 8004ba8:	fb01 f303 	mul.w	r3, r1, r3
 8004bac:	1ad3      	subs	r3, r2, r3
 8004bae:	00db      	lsls	r3, r3, #3
 8004bb0:	3332      	adds	r3, #50	; 0x32
 8004bb2:	4a08      	ldr	r2, [pc, #32]	; (8004bd4 <UART_SetConfig+0x2d4>)
 8004bb4:	fba2 2303 	umull	r2, r3, r2, r3
 8004bb8:	095b      	lsrs	r3, r3, #5
 8004bba:	f003 0207 	and.w	r2, r3, #7
 8004bbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4422      	add	r2, r4
 8004bc6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004bc8:	e105      	b.n	8004dd6 <UART_SetConfig+0x4d6>
 8004bca:	bf00      	nop
 8004bcc:	40011000 	.word	0x40011000
 8004bd0:	40011400 	.word	0x40011400
 8004bd4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004bd8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004bdc:	2200      	movs	r2, #0
 8004bde:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004be2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004be6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004bea:	4642      	mov	r2, r8
 8004bec:	464b      	mov	r3, r9
 8004bee:	1891      	adds	r1, r2, r2
 8004bf0:	6239      	str	r1, [r7, #32]
 8004bf2:	415b      	adcs	r3, r3
 8004bf4:	627b      	str	r3, [r7, #36]	; 0x24
 8004bf6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004bfa:	4641      	mov	r1, r8
 8004bfc:	1854      	adds	r4, r2, r1
 8004bfe:	4649      	mov	r1, r9
 8004c00:	eb43 0501 	adc.w	r5, r3, r1
 8004c04:	f04f 0200 	mov.w	r2, #0
 8004c08:	f04f 0300 	mov.w	r3, #0
 8004c0c:	00eb      	lsls	r3, r5, #3
 8004c0e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c12:	00e2      	lsls	r2, r4, #3
 8004c14:	4614      	mov	r4, r2
 8004c16:	461d      	mov	r5, r3
 8004c18:	4643      	mov	r3, r8
 8004c1a:	18e3      	adds	r3, r4, r3
 8004c1c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004c20:	464b      	mov	r3, r9
 8004c22:	eb45 0303 	adc.w	r3, r5, r3
 8004c26:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004c2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	2200      	movs	r2, #0
 8004c32:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004c36:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004c3a:	f04f 0200 	mov.w	r2, #0
 8004c3e:	f04f 0300 	mov.w	r3, #0
 8004c42:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004c46:	4629      	mov	r1, r5
 8004c48:	008b      	lsls	r3, r1, #2
 8004c4a:	4621      	mov	r1, r4
 8004c4c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c50:	4621      	mov	r1, r4
 8004c52:	008a      	lsls	r2, r1, #2
 8004c54:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004c58:	f7fb ffa6 	bl	8000ba8 <__aeabi_uldivmod>
 8004c5c:	4602      	mov	r2, r0
 8004c5e:	460b      	mov	r3, r1
 8004c60:	4b60      	ldr	r3, [pc, #384]	; (8004de4 <UART_SetConfig+0x4e4>)
 8004c62:	fba3 2302 	umull	r2, r3, r3, r2
 8004c66:	095b      	lsrs	r3, r3, #5
 8004c68:	011c      	lsls	r4, r3, #4
 8004c6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c6e:	2200      	movs	r2, #0
 8004c70:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004c74:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004c78:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004c7c:	4642      	mov	r2, r8
 8004c7e:	464b      	mov	r3, r9
 8004c80:	1891      	adds	r1, r2, r2
 8004c82:	61b9      	str	r1, [r7, #24]
 8004c84:	415b      	adcs	r3, r3
 8004c86:	61fb      	str	r3, [r7, #28]
 8004c88:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c8c:	4641      	mov	r1, r8
 8004c8e:	1851      	adds	r1, r2, r1
 8004c90:	6139      	str	r1, [r7, #16]
 8004c92:	4649      	mov	r1, r9
 8004c94:	414b      	adcs	r3, r1
 8004c96:	617b      	str	r3, [r7, #20]
 8004c98:	f04f 0200 	mov.w	r2, #0
 8004c9c:	f04f 0300 	mov.w	r3, #0
 8004ca0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004ca4:	4659      	mov	r1, fp
 8004ca6:	00cb      	lsls	r3, r1, #3
 8004ca8:	4651      	mov	r1, sl
 8004caa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004cae:	4651      	mov	r1, sl
 8004cb0:	00ca      	lsls	r2, r1, #3
 8004cb2:	4610      	mov	r0, r2
 8004cb4:	4619      	mov	r1, r3
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	4642      	mov	r2, r8
 8004cba:	189b      	adds	r3, r3, r2
 8004cbc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004cc0:	464b      	mov	r3, r9
 8004cc2:	460a      	mov	r2, r1
 8004cc4:	eb42 0303 	adc.w	r3, r2, r3
 8004cc8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004ccc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	67bb      	str	r3, [r7, #120]	; 0x78
 8004cd6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004cd8:	f04f 0200 	mov.w	r2, #0
 8004cdc:	f04f 0300 	mov.w	r3, #0
 8004ce0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004ce4:	4649      	mov	r1, r9
 8004ce6:	008b      	lsls	r3, r1, #2
 8004ce8:	4641      	mov	r1, r8
 8004cea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004cee:	4641      	mov	r1, r8
 8004cf0:	008a      	lsls	r2, r1, #2
 8004cf2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004cf6:	f7fb ff57 	bl	8000ba8 <__aeabi_uldivmod>
 8004cfa:	4602      	mov	r2, r0
 8004cfc:	460b      	mov	r3, r1
 8004cfe:	4b39      	ldr	r3, [pc, #228]	; (8004de4 <UART_SetConfig+0x4e4>)
 8004d00:	fba3 1302 	umull	r1, r3, r3, r2
 8004d04:	095b      	lsrs	r3, r3, #5
 8004d06:	2164      	movs	r1, #100	; 0x64
 8004d08:	fb01 f303 	mul.w	r3, r1, r3
 8004d0c:	1ad3      	subs	r3, r2, r3
 8004d0e:	011b      	lsls	r3, r3, #4
 8004d10:	3332      	adds	r3, #50	; 0x32
 8004d12:	4a34      	ldr	r2, [pc, #208]	; (8004de4 <UART_SetConfig+0x4e4>)
 8004d14:	fba2 2303 	umull	r2, r3, r2, r3
 8004d18:	095b      	lsrs	r3, r3, #5
 8004d1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d1e:	441c      	add	r4, r3
 8004d20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d24:	2200      	movs	r2, #0
 8004d26:	673b      	str	r3, [r7, #112]	; 0x70
 8004d28:	677a      	str	r2, [r7, #116]	; 0x74
 8004d2a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004d2e:	4642      	mov	r2, r8
 8004d30:	464b      	mov	r3, r9
 8004d32:	1891      	adds	r1, r2, r2
 8004d34:	60b9      	str	r1, [r7, #8]
 8004d36:	415b      	adcs	r3, r3
 8004d38:	60fb      	str	r3, [r7, #12]
 8004d3a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d3e:	4641      	mov	r1, r8
 8004d40:	1851      	adds	r1, r2, r1
 8004d42:	6039      	str	r1, [r7, #0]
 8004d44:	4649      	mov	r1, r9
 8004d46:	414b      	adcs	r3, r1
 8004d48:	607b      	str	r3, [r7, #4]
 8004d4a:	f04f 0200 	mov.w	r2, #0
 8004d4e:	f04f 0300 	mov.w	r3, #0
 8004d52:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004d56:	4659      	mov	r1, fp
 8004d58:	00cb      	lsls	r3, r1, #3
 8004d5a:	4651      	mov	r1, sl
 8004d5c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d60:	4651      	mov	r1, sl
 8004d62:	00ca      	lsls	r2, r1, #3
 8004d64:	4610      	mov	r0, r2
 8004d66:	4619      	mov	r1, r3
 8004d68:	4603      	mov	r3, r0
 8004d6a:	4642      	mov	r2, r8
 8004d6c:	189b      	adds	r3, r3, r2
 8004d6e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d70:	464b      	mov	r3, r9
 8004d72:	460a      	mov	r2, r1
 8004d74:	eb42 0303 	adc.w	r3, r2, r3
 8004d78:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004d7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	2200      	movs	r2, #0
 8004d82:	663b      	str	r3, [r7, #96]	; 0x60
 8004d84:	667a      	str	r2, [r7, #100]	; 0x64
 8004d86:	f04f 0200 	mov.w	r2, #0
 8004d8a:	f04f 0300 	mov.w	r3, #0
 8004d8e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004d92:	4649      	mov	r1, r9
 8004d94:	008b      	lsls	r3, r1, #2
 8004d96:	4641      	mov	r1, r8
 8004d98:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d9c:	4641      	mov	r1, r8
 8004d9e:	008a      	lsls	r2, r1, #2
 8004da0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004da4:	f7fb ff00 	bl	8000ba8 <__aeabi_uldivmod>
 8004da8:	4602      	mov	r2, r0
 8004daa:	460b      	mov	r3, r1
 8004dac:	4b0d      	ldr	r3, [pc, #52]	; (8004de4 <UART_SetConfig+0x4e4>)
 8004dae:	fba3 1302 	umull	r1, r3, r3, r2
 8004db2:	095b      	lsrs	r3, r3, #5
 8004db4:	2164      	movs	r1, #100	; 0x64
 8004db6:	fb01 f303 	mul.w	r3, r1, r3
 8004dba:	1ad3      	subs	r3, r2, r3
 8004dbc:	011b      	lsls	r3, r3, #4
 8004dbe:	3332      	adds	r3, #50	; 0x32
 8004dc0:	4a08      	ldr	r2, [pc, #32]	; (8004de4 <UART_SetConfig+0x4e4>)
 8004dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8004dc6:	095b      	lsrs	r3, r3, #5
 8004dc8:	f003 020f 	and.w	r2, r3, #15
 8004dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4422      	add	r2, r4
 8004dd4:	609a      	str	r2, [r3, #8]
}
 8004dd6:	bf00      	nop
 8004dd8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004de2:	bf00      	nop
 8004de4:	51eb851f 	.word	0x51eb851f

08004de8 <D16_GENERIC>:
 8004de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dec:	b089      	sub	sp, #36	; 0x24
 8004dee:	68d4      	ldr	r4, [r2, #12]
 8004df0:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8004df2:	6993      	ldr	r3, [r2, #24]
 8004df4:	9407      	str	r4, [sp, #28]
 8004df6:	6b14      	ldr	r4, [r2, #48]	; 0x30
 8004df8:	9306      	str	r3, [sp, #24]
 8004dfa:	9402      	str	r4, [sp, #8]
 8004dfc:	f8d2 a010 	ldr.w	sl, [r2, #16]
 8004e00:	f8d2 b014 	ldr.w	fp, [r2, #20]
 8004e04:	69d3      	ldr	r3, [r2, #28]
 8004e06:	6896      	ldr	r6, [r2, #8]
 8004e08:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8004e0a:	9103      	str	r1, [sp, #12]
 8004e0c:	2d00      	cmp	r5, #0
 8004e0e:	d066      	beq.n	8004ede <D16_GENERIC+0xf6>
 8004e10:	f004 0510 	and.w	r5, r4, #16
 8004e14:	f004 0420 	and.w	r4, r4, #32
 8004e18:	9504      	str	r5, [sp, #16]
 8004e1a:	4938      	ldr	r1, [pc, #224]	; (8004efc <D16_GENERIC+0x114>)
 8004e1c:	9405      	str	r4, [sp, #20]
 8004e1e:	f04f 0e00 	mov.w	lr, #0
 8004e22:	4635      	mov	r5, r6
 8004e24:	e04f      	b.n	8004ec6 <D16_GENERIC+0xde>
 8004e26:	5d87      	ldrb	r7, [r0, r6]
 8004e28:	7804      	ldrb	r4, [r0, #0]
 8004e2a:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 8004e2e:	eb04 2407 	add.w	r4, r4, r7, lsl #8
 8004e32:	b2e6      	uxtb	r6, r4
 8004e34:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8004e38:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8004e3c:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 8004e40:	4433      	add	r3, r6
 8004e42:	eb04 2493 	add.w	r4, r4, r3, lsr #10
 8004e46:	f3c4 0609 	ubfx	r6, r4, #0, #10
 8004e4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e4e:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
 8004e52:	0aa3      	lsrs	r3, r4, #10
 8004e54:	4c2a      	ldr	r4, [pc, #168]	; (8004f00 <D16_GENERIC+0x118>)
 8004e56:	fb26 5404 	smlad	r4, r6, r4, r5
 8004e5a:	4d2a      	ldr	r5, [pc, #168]	; (8004f04 <D16_GENERIC+0x11c>)
 8004e5c:	fb26 f505 	smuad	r5, r6, r5
 8004e60:	f5a4 6400 	sub.w	r4, r4, #2048	; 0x800
 8004e64:	eb04 080a 	add.w	r8, r4, sl
 8004e68:	eba8 080b 	sub.w	r8, r8, fp
 8004e6c:	4646      	mov	r6, r8
 8004e6e:	17f7      	asrs	r7, r6, #31
 8004e70:	e9cd 6700 	strd	r6, r7, [sp]
 8004e74:	9e04      	ldr	r6, [sp, #16]
 8004e76:	f10e 0c01 	add.w	ip, lr, #1
 8004e7a:	b16e      	cbz	r6, 8004e98 <D16_GENERIC+0xb0>
 8004e7c:	6a16      	ldr	r6, [r2, #32]
 8004e7e:	9f01      	ldr	r7, [sp, #4]
 8004e80:	fba8 8906 	umull	r8, r9, r8, r6
 8004e84:	fb06 9907 	mla	r9, r6, r7, r9
 8004e88:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 8004e8c:	f149 0900 	adc.w	r9, r9, #0
 8004e90:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 8004e94:	46a3      	mov	fp, r4
 8004e96:	4654      	mov	r4, sl
 8004e98:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 8004e9a:	9f02      	ldr	r7, [sp, #8]
 8004e9c:	0424      	lsls	r4, r4, #16
 8004e9e:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8004ea2:	f04f 0900 	mov.w	r9, #0
 8004ea6:	fb0e fe06 	mul.w	lr, lr, r6
 8004eaa:	fbc7 8904 	smlal	r8, r9, r7, r4
 8004eae:	9e03      	ldr	r6, [sp, #12]
 8004eb0:	464f      	mov	r7, r9
 8004eb2:	10bc      	asrs	r4, r7, #2
 8004eb4:	f304 040f 	ssat	r4, #16, r4
 8004eb8:	f826 401e 	strh.w	r4, [r6, lr, lsl #1]
 8004ebc:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 8004ebe:	fa1f fe8c 	uxth.w	lr, ip
 8004ec2:	4574      	cmp	r4, lr
 8004ec4:	d90a      	bls.n	8004edc <D16_GENERIC+0xf4>
 8004ec6:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 8004ec8:	2c01      	cmp	r4, #1
 8004eca:	b2e6      	uxtb	r6, r4
 8004ecc:	d1ab      	bne.n	8004e26 <D16_GENERIC+0x3e>
 8004ece:	9e05      	ldr	r6, [sp, #20]
 8004ed0:	f850 4b02 	ldr.w	r4, [r0], #2
 8004ed4:	2e00      	cmp	r6, #0
 8004ed6:	d0ac      	beq.n	8004e32 <D16_GENERIC+0x4a>
 8004ed8:	ba64      	rev16	r4, r4
 8004eda:	e7aa      	b.n	8004e32 <D16_GENERIC+0x4a>
 8004edc:	462e      	mov	r6, r5
 8004ede:	9907      	ldr	r1, [sp, #28]
 8004ee0:	61d3      	str	r3, [r2, #28]
 8004ee2:	9b06      	ldr	r3, [sp, #24]
 8004ee4:	6096      	str	r6, [r2, #8]
 8004ee6:	2000      	movs	r0, #0
 8004ee8:	60d1      	str	r1, [r2, #12]
 8004eea:	f8c2 a010 	str.w	sl, [r2, #16]
 8004eee:	f8c2 b014 	str.w	fp, [r2, #20]
 8004ef2:	6193      	str	r3, [r2, #24]
 8004ef4:	b009      	add	sp, #36	; 0x24
 8004ef6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004efa:	bf00      	nop
 8004efc:	20000000 	.word	0x20000000
 8004f00:	00030001 	.word	0x00030001
 8004f04:	00010003 	.word	0x00010003

08004f08 <D24_GENERIC>:
 8004f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f0c:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 8004f0e:	6993      	ldr	r3, [r2, #24]
 8004f10:	6b15      	ldr	r5, [r2, #48]	; 0x30
 8004f12:	f8d2 a010 	ldr.w	sl, [r2, #16]
 8004f16:	f8d2 9014 	ldr.w	r9, [r2, #20]
 8004f1a:	6894      	ldr	r4, [r2, #8]
 8004f1c:	f8d2 b00c 	ldr.w	fp, [r2, #12]
 8004f20:	b089      	sub	sp, #36	; 0x24
 8004f22:	9307      	str	r3, [sp, #28]
 8004f24:	9503      	str	r5, [sp, #12]
 8004f26:	69d3      	ldr	r3, [r2, #28]
 8004f28:	6b55      	ldr	r5, [r2, #52]	; 0x34
 8004f2a:	9104      	str	r1, [sp, #16]
 8004f2c:	2e00      	cmp	r6, #0
 8004f2e:	f000 8096 	beq.w	800505e <D24_GENERIC+0x156>
 8004f32:	f005 0610 	and.w	r6, r5, #16
 8004f36:	f005 0520 	and.w	r5, r5, #32
 8004f3a:	4954      	ldr	r1, [pc, #336]	; (800508c <D24_GENERIC+0x184>)
 8004f3c:	9605      	str	r6, [sp, #20]
 8004f3e:	9506      	str	r5, [sp, #24]
 8004f40:	f04f 0e00 	mov.w	lr, #0
 8004f44:	f8cd 9008 	str.w	r9, [sp, #8]
 8004f48:	e06a      	b.n	8005020 <D24_GENERIC+0x118>
 8004f4a:	f810 5016 	ldrb.w	r5, [r0, r6, lsl #1]
 8004f4e:	f810 8007 	ldrb.w	r8, [r0, r7]
 8004f52:	f890 c000 	ldrb.w	ip, [r0]
 8004f56:	042d      	lsls	r5, r5, #16
 8004f58:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 8004f5c:	eb05 2508 	add.w	r5, r5, r8, lsl #8
 8004f60:	44ac      	add	ip, r5
 8004f62:	4438      	add	r0, r7
 8004f64:	fa5f f68c 	uxtb.w	r6, ip
 8004f68:	f3cc 2507 	ubfx	r5, ip, #8, #8
 8004f6c:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8004f70:	f851 7025 	ldr.w	r7, [r1, r5, lsl #2]
 8004f74:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8004f78:	eb06 2693 	add.w	r6, r6, r3, lsr #10
 8004f7c:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 8004f80:	f851 302c 	ldr.w	r3, [r1, ip, lsl #2]
 8004f84:	f3c7 0509 	ubfx	r5, r7, #0, #10
 8004f88:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8004f8c:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 8004f90:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 8004f94:	4d3e      	ldr	r5, [pc, #248]	; (8005090 <D24_GENERIC+0x188>)
 8004f96:	fb26 b705 	smlad	r7, r6, r5, fp
 8004f9a:	4d3e      	ldr	r5, [pc, #248]	; (8005094 <D24_GENERIC+0x18c>)
 8004f9c:	fb26 4b05 	smlad	fp, r6, r5, r4
 8004fa0:	f3c3 0409 	ubfx	r4, r3, #0, #10
 8004fa4:	eb04 0844 	add.w	r8, r4, r4, lsl #1
 8004fa8:	eb0b 0b48 	add.w	fp, fp, r8, lsl #1
 8004fac:	2401      	movs	r4, #1
 8004fae:	fb26 f604 	smuad	r6, r6, r4
 8004fb2:	f5a7 55d8 	sub.w	r5, r7, #6912	; 0x1b00
 8004fb6:	9f02      	ldr	r7, [sp, #8]
 8004fb8:	eb0e 0c04 	add.w	ip, lr, r4
 8004fbc:	eb08 0406 	add.w	r4, r8, r6
 8004fc0:	eb05 060a 	add.w	r6, r5, sl
 8004fc4:	1bf6      	subs	r6, r6, r7
 8004fc6:	4637      	mov	r7, r6
 8004fc8:	ea4f 78e6 	mov.w	r8, r6, asr #31
 8004fcc:	e9cd 7800 	strd	r7, r8, [sp]
 8004fd0:	9f05      	ldr	r7, [sp, #20]
 8004fd2:	b177      	cbz	r7, 8004ff2 <D24_GENERIC+0xea>
 8004fd4:	f8d2 8020 	ldr.w	r8, [r2, #32]
 8004fd8:	9502      	str	r5, [sp, #8]
 8004fda:	fba6 9a08 	umull	r9, sl, r6, r8
 8004fde:	9e01      	ldr	r6, [sp, #4]
 8004fe0:	fb08 aa06 	mla	sl, r8, r6, sl
 8004fe4:	f119 4600 	adds.w	r6, r9, #2147483648	; 0x80000000
 8004fe8:	f14a 0700 	adc.w	r7, sl, #0
 8004fec:	ea4f 0a47 	mov.w	sl, r7, lsl #1
 8004ff0:	4655      	mov	r5, sl
 8004ff2:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 8004ff4:	9f03      	ldr	r7, [sp, #12]
 8004ff6:	03ad      	lsls	r5, r5, #14
 8004ff8:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8004ffc:	f04f 0900 	mov.w	r9, #0
 8005000:	fb0e fe06 	mul.w	lr, lr, r6
 8005004:	fbc7 8905 	smlal	r8, r9, r7, r5
 8005008:	9e04      	ldr	r6, [sp, #16]
 800500a:	464f      	mov	r7, r9
 800500c:	10bd      	asrs	r5, r7, #2
 800500e:	f305 050f 	ssat	r5, #16, r5
 8005012:	f826 501e 	strh.w	r5, [r6, lr, lsl #1]
 8005016:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8005018:	fa1f fe8c 	uxth.w	lr, ip
 800501c:	4575      	cmp	r5, lr
 800501e:	d91c      	bls.n	800505a <D24_GENERIC+0x152>
 8005020:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 8005022:	b2ef      	uxtb	r7, r5
 8005024:	2d01      	cmp	r5, #1
 8005026:	b23e      	sxth	r6, r7
 8005028:	d18f      	bne.n	8004f4a <D24_GENERIC+0x42>
 800502a:	9d06      	ldr	r5, [sp, #24]
 800502c:	b15d      	cbz	r5, 8005046 <D24_GENERIC+0x13e>
 800502e:	f01e 0f01 	tst.w	lr, #1
 8005032:	d122      	bne.n	800507a <D24_GENERIC+0x172>
 8005034:	7805      	ldrb	r5, [r0, #0]
 8005036:	78c7      	ldrb	r7, [r0, #3]
 8005038:	7846      	ldrb	r6, [r0, #1]
 800503a:	022d      	lsls	r5, r5, #8
 800503c:	eb05 4c07 	add.w	ip, r5, r7, lsl #16
 8005040:	44b4      	add	ip, r6
 8005042:	3002      	adds	r0, #2
 8005044:	e78e      	b.n	8004f64 <D24_GENERIC+0x5c>
 8005046:	7846      	ldrb	r6, [r0, #1]
 8005048:	f890 c002 	ldrb.w	ip, [r0, #2]
 800504c:	f810 5b03 	ldrb.w	r5, [r0], #3
 8005050:	0236      	lsls	r6, r6, #8
 8005052:	eb06 4c0c 	add.w	ip, r6, ip, lsl #16
 8005056:	44ac      	add	ip, r5
 8005058:	e784      	b.n	8004f64 <D24_GENERIC+0x5c>
 800505a:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800505e:	61d3      	str	r3, [r2, #28]
 8005060:	9b07      	ldr	r3, [sp, #28]
 8005062:	6094      	str	r4, [r2, #8]
 8005064:	2000      	movs	r0, #0
 8005066:	f8c2 b00c 	str.w	fp, [r2, #12]
 800506a:	f8c2 a010 	str.w	sl, [r2, #16]
 800506e:	f8c2 9014 	str.w	r9, [r2, #20]
 8005072:	6193      	str	r3, [r2, #24]
 8005074:	b009      	add	sp, #36	; 0x24
 8005076:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800507a:	78c5      	ldrb	r5, [r0, #3]
 800507c:	7887      	ldrb	r7, [r0, #2]
 800507e:	f810 6b04 	ldrb.w	r6, [r0], #4
 8005082:	022d      	lsls	r5, r5, #8
 8005084:	eb05 4c07 	add.w	ip, r5, r7, lsl #16
 8005088:	44b4      	add	ip, r6
 800508a:	e76b      	b.n	8004f64 <D24_GENERIC+0x5c>
 800508c:	20000000 	.word	0x20000000
 8005090:	00030001 	.word	0x00030001
 8005094:	00060007 	.word	0x00060007

08005098 <D32_GENERIC>:
 8005098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800509c:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800509e:	6993      	ldr	r3, [r2, #24]
 80050a0:	6b14      	ldr	r4, [r2, #48]	; 0x30
 80050a2:	f8d2 a010 	ldr.w	sl, [r2, #16]
 80050a6:	f8d2 9014 	ldr.w	r9, [r2, #20]
 80050aa:	69d6      	ldr	r6, [r2, #28]
 80050ac:	f8d2 b00c 	ldr.w	fp, [r2, #12]
 80050b0:	b089      	sub	sp, #36	; 0x24
 80050b2:	9307      	str	r3, [sp, #28]
 80050b4:	9403      	str	r4, [sp, #12]
 80050b6:	6893      	ldr	r3, [r2, #8]
 80050b8:	6b54      	ldr	r4, [r2, #52]	; 0x34
 80050ba:	9104      	str	r1, [sp, #16]
 80050bc:	2d00      	cmp	r5, #0
 80050be:	f000 809f 	beq.w	8005200 <D32_GENERIC+0x168>
 80050c2:	f004 0510 	and.w	r5, r4, #16
 80050c6:	f004 0420 	and.w	r4, r4, #32
 80050ca:	9505      	str	r5, [sp, #20]
 80050cc:	4953      	ldr	r1, [pc, #332]	; (800521c <D32_GENERIC+0x184>)
 80050ce:	9406      	str	r4, [sp, #24]
 80050d0:	f04f 0c00 	mov.w	ip, #0
 80050d4:	f8cd 9008 	str.w	r9, [sp, #8]
 80050d8:	461d      	mov	r5, r3
 80050da:	4617      	mov	r7, r2
 80050dc:	e077      	b.n	80051ce <D32_GENERIC+0x136>
 80050de:	f818 3003 	ldrb.w	r3, [r8, r3]
 80050e2:	f810 800e 	ldrb.w	r8, [r0, lr]
 80050e6:	f810 e002 	ldrb.w	lr, [r0, r2]
 80050ea:	7800      	ldrb	r0, [r0, #0]
 80050ec:	041b      	lsls	r3, r3, #16
 80050ee:	eb03 6308 	add.w	r3, r3, r8, lsl #24
 80050f2:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 80050f6:	4403      	add	r3, r0
 80050f8:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 80050fc:	b2dc      	uxtb	r4, r3
 80050fe:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8005102:	f3c3 4807 	ubfx	r8, r3, #16, #8
 8005106:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 800510a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800510e:	0e1b      	lsrs	r3, r3, #24
 8005110:	eb04 2496 	add.w	r4, r4, r6, lsr #10
 8005114:	f851 6028 	ldr.w	r6, [r1, r8, lsl #2]
 8005118:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800511c:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 8005120:	eb06 2e92 	add.w	lr, r6, r2, lsr #10
 8005124:	eb03 269e 	add.w	r6, r3, lr, lsr #10
 8005128:	f3c6 0309 	ubfx	r3, r6, #0, #10
 800512c:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8005130:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8005134:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8005138:	ea43 4e0e 	orr.w	lr, r3, lr, lsl #16
 800513c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8005140:	4b37      	ldr	r3, [pc, #220]	; (8005220 <D32_GENERIC+0x188>)
 8005142:	fb22 b403 	smlad	r4, r2, r3, fp
 8005146:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800514a:	fb2e 4803 	smlad	r8, lr, r3, r4
 800514e:	4b35      	ldr	r3, [pc, #212]	; (8005224 <D32_GENERIC+0x18c>)
 8005150:	fb22 5503 	smlad	r5, r2, r3, r5
 8005154:	4b34      	ldr	r3, [pc, #208]	; (8005228 <D32_GENERIC+0x190>)
 8005156:	fb2e 5b03 	smlad	fp, lr, r3, r5
 800515a:	2301      	movs	r3, #1
 800515c:	fb22 f203 	smuad	r2, r2, r3
 8005160:	4b32      	ldr	r3, [pc, #200]	; (800522c <D32_GENERIC+0x194>)
 8005162:	fb2e 2503 	smlad	r5, lr, r3, r2
 8005166:	9b02      	ldr	r3, [sp, #8]
 8005168:	f5a8 4480 	sub.w	r4, r8, #16384	; 0x4000
 800516c:	eb04 080a 	add.w	r8, r4, sl
 8005170:	eba8 0803 	sub.w	r8, r8, r3
 8005174:	4642      	mov	r2, r8
 8005176:	17d3      	asrs	r3, r2, #31
 8005178:	e9cd 2300 	strd	r2, r3, [sp]
 800517c:	9b05      	ldr	r3, [sp, #20]
 800517e:	f10c 0e01 	add.w	lr, ip, #1
 8005182:	b16b      	cbz	r3, 80051a0 <D32_GENERIC+0x108>
 8005184:	6a3a      	ldr	r2, [r7, #32]
 8005186:	9b01      	ldr	r3, [sp, #4]
 8005188:	9402      	str	r4, [sp, #8]
 800518a:	fba8 8902 	umull	r8, r9, r8, r2
 800518e:	fb02 9903 	mla	r9, r2, r3, r9
 8005192:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 8005196:	f149 0900 	adc.w	r9, r9, #0
 800519a:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 800519e:	4654      	mov	r4, sl
 80051a0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80051a2:	9a04      	ldr	r2, [sp, #16]
 80051a4:	fb0c fc03 	mul.w	ip, ip, r3
 80051a8:	9b03      	ldr	r3, [sp, #12]
 80051aa:	0364      	lsls	r4, r4, #13
 80051ac:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 80051b0:	f04f 0900 	mov.w	r9, #0
 80051b4:	fbc3 8904 	smlal	r8, r9, r3, r4
 80051b8:	464b      	mov	r3, r9
 80051ba:	109b      	asrs	r3, r3, #2
 80051bc:	f303 030f 	ssat	r3, #16, r3
 80051c0:	f822 301c 	strh.w	r3, [r2, ip, lsl #1]
 80051c4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80051c6:	fa1f fc8e 	uxth.w	ip, lr
 80051ca:	4563      	cmp	r3, ip
 80051cc:	d914      	bls.n	80051f8 <D32_GENERIC+0x160>
 80051ce:	8d7c      	ldrh	r4, [r7, #42]	; 0x2a
 80051d0:	b2e2      	uxtb	r2, r4
 80051d2:	eb02 0e42 	add.w	lr, r2, r2, lsl #1
 80051d6:	eb00 080e 	add.w	r8, r0, lr
 80051da:	4253      	negs	r3, r2
 80051dc:	2c01      	cmp	r4, #1
 80051de:	eb08 0403 	add.w	r4, r8, r3
 80051e2:	f47f af7c 	bne.w	80050de <D32_GENERIC+0x46>
 80051e6:	1d02      	adds	r2, r0, #4
 80051e8:	6803      	ldr	r3, [r0, #0]
 80051ea:	9806      	ldr	r0, [sp, #24]
 80051ec:	b110      	cbz	r0, 80051f4 <D32_GENERIC+0x15c>
 80051ee:	ba5b      	rev16	r3, r3
 80051f0:	4610      	mov	r0, r2
 80051f2:	e783      	b.n	80050fc <D32_GENERIC+0x64>
 80051f4:	4610      	mov	r0, r2
 80051f6:	e781      	b.n	80050fc <D32_GENERIC+0x64>
 80051f8:	f8dd 9008 	ldr.w	r9, [sp, #8]
 80051fc:	462b      	mov	r3, r5
 80051fe:	463a      	mov	r2, r7
 8005200:	6093      	str	r3, [r2, #8]
 8005202:	9b07      	ldr	r3, [sp, #28]
 8005204:	f8c2 b00c 	str.w	fp, [r2, #12]
 8005208:	2000      	movs	r0, #0
 800520a:	61d6      	str	r6, [r2, #28]
 800520c:	f8c2 a010 	str.w	sl, [r2, #16]
 8005210:	f8c2 9014 	str.w	r9, [r2, #20]
 8005214:	6193      	str	r3, [r2, #24]
 8005216:	b009      	add	sp, #36	; 0x24
 8005218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800521c:	20000000 	.word	0x20000000
 8005220:	00060003 	.word	0x00060003
 8005224:	000a000c 	.word	0x000a000c
 8005228:	000c000a 	.word	0x000c000a
 800522c:	00030006 	.word	0x00030006

08005230 <D48_GENERIC>:
 8005230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005234:	b089      	sub	sp, #36	; 0x24
 8005236:	6953      	ldr	r3, [r2, #20]
 8005238:	68d4      	ldr	r4, [r2, #12]
 800523a:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800523c:	9302      	str	r3, [sp, #8]
 800523e:	9400      	str	r4, [sp, #0]
 8005240:	6993      	ldr	r3, [r2, #24]
 8005242:	6b14      	ldr	r4, [r2, #48]	; 0x30
 8005244:	9307      	str	r3, [sp, #28]
 8005246:	9403      	str	r4, [sp, #12]
 8005248:	f8d2 a010 	ldr.w	sl, [r2, #16]
 800524c:	69d6      	ldr	r6, [r2, #28]
 800524e:	6893      	ldr	r3, [r2, #8]
 8005250:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8005252:	9104      	str	r1, [sp, #16]
 8005254:	2d00      	cmp	r5, #0
 8005256:	f000 80c5 	beq.w	80053e4 <D48_GENERIC+0x1b4>
 800525a:	f004 0510 	and.w	r5, r4, #16
 800525e:	f004 0420 	and.w	r4, r4, #32
 8005262:	4967      	ldr	r1, [pc, #412]	; (8005400 <D48_GENERIC+0x1d0>)
 8005264:	9505      	str	r5, [sp, #20]
 8005266:	9406      	str	r4, [sp, #24]
 8005268:	f04f 0c00 	mov.w	ip, #0
 800526c:	4657      	mov	r7, sl
 800526e:	9301      	str	r3, [sp, #4]
 8005270:	e09c      	b.n	80053ac <D48_GENERIC+0x17c>
 8005272:	f81b 4005 	ldrb.w	r4, [fp, r5]
 8005276:	f810 b009 	ldrb.w	fp, [r0, r9]
 800527a:	f81a 9009 	ldrb.w	r9, [sl, r9]
 800527e:	f810 a00e 	ldrb.w	sl, [r0, lr]
 8005282:	7800      	ldrb	r0, [r0, #0]
 8005284:	0424      	lsls	r4, r4, #16
 8005286:	eb04 6b0b 	add.w	fp, r4, fp, lsl #24
 800528a:	f818 4005 	ldrb.w	r4, [r8, r5]
 800528e:	eb0b 2b0a 	add.w	fp, fp, sl, lsl #8
 8005292:	44a8      	add	r8, r5
 8005294:	eb04 2409 	add.w	r4, r4, r9, lsl #8
 8005298:	eb0b 0500 	add.w	r5, fp, r0
 800529c:	eb08 004e 	add.w	r0, r8, lr, lsl #1
 80052a0:	fa5f f885 	uxtb.w	r8, r5
 80052a4:	f3c5 2e07 	ubfx	lr, r5, #8, #8
 80052a8:	f851 a028 	ldr.w	sl, [r1, r8, lsl #2]
 80052ac:	f851 902e 	ldr.w	r9, [r1, lr, lsl #2]
 80052b0:	f3c5 4e07 	ubfx	lr, r5, #16, #8
 80052b4:	0e2d      	lsrs	r5, r5, #24
 80052b6:	eb0a 2a96 	add.w	sl, sl, r6, lsr #10
 80052ba:	f851 802e 	ldr.w	r8, [r1, lr, lsl #2]
 80052be:	f851 e025 	ldr.w	lr, [r1, r5, lsl #2]
 80052c2:	b2e6      	uxtb	r6, r4
 80052c4:	eb09 259a 	add.w	r5, r9, sl, lsr #10
 80052c8:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80052cc:	eb08 2895 	add.w	r8, r8, r5, lsr #10
 80052d0:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 80052d4:	f851 9024 	ldr.w	r9, [r1, r4, lsl #2]
 80052d8:	eb0e 2498 	add.w	r4, lr, r8, lsr #10
 80052dc:	eb06 2e94 	add.w	lr, r6, r4, lsr #10
 80052e0:	eb09 269e 	add.w	r6, r9, lr, lsr #10
 80052e4:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80052e8:	f3c4 0409 	ubfx	r4, r4, #0, #10
 80052ec:	f3c6 0909 	ubfx	r9, r6, #0, #10
 80052f0:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 80052f4:	f3c8 0809 	ubfx	r8, r8, #0, #10
 80052f8:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 80052fc:	ea45 4a0a 	orr.w	sl, r5, sl, lsl #16
 8005300:	ea44 4808 	orr.w	r8, r4, r8, lsl #16
 8005304:	ea49 4e0e 	orr.w	lr, r9, lr, lsl #16
 8005308:	4c3e      	ldr	r4, [pc, #248]	; (8005404 <D48_GENERIC+0x1d4>)
 800530a:	9d00      	ldr	r5, [sp, #0]
 800530c:	fb2a 5404 	smlad	r4, sl, r4, r5
 8005310:	4d3d      	ldr	r5, [pc, #244]	; (8005408 <D48_GENERIC+0x1d8>)
 8005312:	fb28 4405 	smlad	r4, r8, r5, r4
 8005316:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800531a:	fb2e 4b03 	smlad	fp, lr, r3, r4
 800531e:	4c3b      	ldr	r4, [pc, #236]	; (800540c <D48_GENERIC+0x1dc>)
 8005320:	9b01      	ldr	r3, [sp, #4]
 8005322:	fb2a 3304 	smlad	r3, sl, r4, r3
 8005326:	f04f 141b 	mov.w	r4, #1769499	; 0x1b001b
 800532a:	fb28 3304 	smlad	r3, r8, r4, r3
 800532e:	4c38      	ldr	r4, [pc, #224]	; (8005410 <D48_GENERIC+0x1e0>)
 8005330:	fb2e 3304 	smlad	r3, lr, r4, r3
 8005334:	2501      	movs	r5, #1
 8005336:	9300      	str	r3, [sp, #0]
 8005338:	fb2a fa05 	smuad	sl, sl, r5
 800533c:	4b35      	ldr	r3, [pc, #212]	; (8005414 <D48_GENERIC+0x1e4>)
 800533e:	fb28 a803 	smlad	r8, r8, r3, sl
 8005342:	4b35      	ldr	r3, [pc, #212]	; (8005418 <D48_GENERIC+0x1e8>)
 8005344:	fb2e 8303 	smlad	r3, lr, r3, r8
 8005348:	f5ab 4458 	sub.w	r4, fp, #55296	; 0xd800
 800534c:	9301      	str	r3, [sp, #4]
 800534e:	9b02      	ldr	r3, [sp, #8]
 8005350:	eb04 0807 	add.w	r8, r4, r7
 8005354:	eba8 0803 	sub.w	r8, r8, r3
 8005358:	9b05      	ldr	r3, [sp, #20]
 800535a:	4465      	add	r5, ip
 800535c:	ea4f 7be8 	mov.w	fp, r8, asr #31
 8005360:	b163      	cbz	r3, 800537c <D48_GENERIC+0x14c>
 8005362:	6a17      	ldr	r7, [r2, #32]
 8005364:	9402      	str	r4, [sp, #8]
 8005366:	fba8 8907 	umull	r8, r9, r8, r7
 800536a:	fb07 990b 	mla	r9, r7, fp, r9
 800536e:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 8005372:	f149 0900 	adc.w	r9, r9, #0
 8005376:	ea4f 0749 	mov.w	r7, r9, lsl #1
 800537a:	463c      	mov	r4, r7
 800537c:	f8b2 e028 	ldrh.w	lr, [r2, #40]	; 0x28
 8005380:	9b03      	ldr	r3, [sp, #12]
 8005382:	02e4      	lsls	r4, r4, #11
 8005384:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8005388:	f04f 0900 	mov.w	r9, #0
 800538c:	fb0c fc0e 	mul.w	ip, ip, lr
 8005390:	fbc3 8904 	smlal	r8, r9, r3, r4
 8005394:	9b04      	ldr	r3, [sp, #16]
 8005396:	ea4f 04a9 	mov.w	r4, r9, asr #2
 800539a:	f304 040f 	ssat	r4, #16, r4
 800539e:	f823 401c 	strh.w	r4, [r3, ip, lsl #1]
 80053a2:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 80053a4:	fa1f fc85 	uxth.w	ip, r5
 80053a8:	4564      	cmp	r4, ip
 80053aa:	d919      	bls.n	80053e0 <D48_GENERIC+0x1b0>
 80053ac:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 80053ae:	fa5f fe84 	uxtb.w	lr, r4
 80053b2:	eb0e 094e 	add.w	r9, lr, lr, lsl #1
 80053b6:	f1ce 0500 	rsb	r5, lr, #0
 80053ba:	eb00 0b09 	add.w	fp, r0, r9
 80053be:	eb0b 0a05 	add.w	sl, fp, r5
 80053c2:	2c01      	cmp	r4, #1
 80053c4:	eb0a 0809 	add.w	r8, sl, r9
 80053c8:	f47f af53 	bne.w	8005272 <D48_GENERIC+0x42>
 80053cc:	9b06      	ldr	r3, [sp, #24]
 80053ce:	6805      	ldr	r5, [r0, #0]
 80053d0:	6844      	ldr	r4, [r0, #4]
 80053d2:	3006      	adds	r0, #6
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	f43f af63 	beq.w	80052a0 <D48_GENERIC+0x70>
 80053da:	ba6d      	rev16	r5, r5
 80053dc:	ba64      	rev16	r4, r4
 80053de:	e75f      	b.n	80052a0 <D48_GENERIC+0x70>
 80053e0:	9b01      	ldr	r3, [sp, #4]
 80053e2:	46ba      	mov	sl, r7
 80053e4:	6093      	str	r3, [r2, #8]
 80053e6:	9b00      	ldr	r3, [sp, #0]
 80053e8:	60d3      	str	r3, [r2, #12]
 80053ea:	9b02      	ldr	r3, [sp, #8]
 80053ec:	6153      	str	r3, [r2, #20]
 80053ee:	9b07      	ldr	r3, [sp, #28]
 80053f0:	61d6      	str	r6, [r2, #28]
 80053f2:	2000      	movs	r0, #0
 80053f4:	f8c2 a010 	str.w	sl, [r2, #16]
 80053f8:	6193      	str	r3, [r2, #24]
 80053fa:	b009      	add	sp, #36	; 0x24
 80053fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005400:	20000000 	.word	0x20000000
 8005404:	000f000a 	.word	0x000f000a
 8005408:	00060003 	.word	0x00060003
 800540c:	00150019 	.word	0x00150019
 8005410:	00190015 	.word	0x00190015
 8005414:	00030006 	.word	0x00030006
 8005418:	000a000f 	.word	0x000a000f

0800541c <D64_GENERIC>:
 800541c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005420:	b089      	sub	sp, #36	; 0x24
 8005422:	6913      	ldr	r3, [r2, #16]
 8005424:	6895      	ldr	r5, [r2, #8]
 8005426:	9303      	str	r3, [sp, #12]
 8005428:	9501      	str	r5, [sp, #4]
 800542a:	6953      	ldr	r3, [r2, #20]
 800542c:	68d5      	ldr	r5, [r2, #12]
 800542e:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 8005430:	9304      	str	r3, [sp, #16]
 8005432:	9500      	str	r5, [sp, #0]
 8005434:	6993      	ldr	r3, [r2, #24]
 8005436:	6b15      	ldr	r5, [r2, #48]	; 0x30
 8005438:	9307      	str	r3, [sp, #28]
 800543a:	9505      	str	r5, [sp, #20]
 800543c:	69d3      	ldr	r3, [r2, #28]
 800543e:	9106      	str	r1, [sp, #24]
 8005440:	2c00      	cmp	r4, #0
 8005442:	f000 80d9 	beq.w	80055f8 <D64_GENERIC+0x1dc>
 8005446:	6a11      	ldr	r1, [r2, #32]
 8005448:	9102      	str	r1, [sp, #8]
 800544a:	f8df e1ec 	ldr.w	lr, [pc, #492]	; 8005638 <D64_GENERIC+0x21c>
 800544e:	f04f 0c00 	mov.w	ip, #0
 8005452:	4681      	mov	r9, r0
 8005454:	e0c1      	b.n	80055da <D64_GENERIC+0x1be>
 8005456:	eb06 0846 	add.w	r8, r6, r6, lsl #1
 800545a:	4274      	negs	r4, r6
 800545c:	eb09 0708 	add.w	r7, r9, r8
 8005460:	eb07 0a44 	add.w	sl, r7, r4, lsl #1
 8005464:	eb0a 0548 	add.w	r5, sl, r8, lsl #1
 8005468:	5d38      	ldrb	r0, [r7, r4]
 800546a:	5d29      	ldrb	r1, [r5, r4]
 800546c:	f81a b018 	ldrb.w	fp, [sl, r8, lsl #1]
 8005470:	f819 a008 	ldrb.w	sl, [r9, r8]
 8005474:	f817 8014 	ldrb.w	r8, [r7, r4, lsl #1]
 8005478:	f899 7000 	ldrb.w	r7, [r9]
 800547c:	f815 9014 	ldrb.w	r9, [r5, r4, lsl #1]
 8005480:	4425      	add	r5, r4
 8005482:	0409      	lsls	r1, r1, #16
 8005484:	0400      	lsls	r0, r0, #16
 8005486:	eb01 610b 	add.w	r1, r1, fp, lsl #24
 800548a:	eb00 600a 	add.w	r0, r0, sl, lsl #24
 800548e:	f815 b014 	ldrb.w	fp, [r5, r4, lsl #1]
 8005492:	eb01 2109 	add.w	r1, r1, r9, lsl #8
 8005496:	eb05 0444 	add.w	r4, r5, r4, lsl #1
 800549a:	eb00 2008 	add.w	r0, r0, r8, lsl #8
 800549e:	4459      	add	r1, fp
 80054a0:	eb04 0986 	add.w	r9, r4, r6, lsl #2
 80054a4:	4438      	add	r0, r7
 80054a6:	b2c5      	uxtb	r5, r0
 80054a8:	f3c0 2407 	ubfx	r4, r0, #8, #8
 80054ac:	f85e 6025 	ldr.w	r6, [lr, r5, lsl #2]
 80054b0:	f85e 5024 	ldr.w	r5, [lr, r4, lsl #2]
 80054b4:	f3c0 4407 	ubfx	r4, r0, #16, #8
 80054b8:	0e00      	lsrs	r0, r0, #24
 80054ba:	eb03 0806 	add.w	r8, r3, r6
 80054be:	f85e 7024 	ldr.w	r7, [lr, r4, lsl #2]
 80054c2:	f85e 4020 	ldr.w	r4, [lr, r0, lsl #2]
 80054c6:	f3c1 2307 	ubfx	r3, r1, #8, #8
 80054ca:	b2c8      	uxtb	r0, r1
 80054cc:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 80054d0:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 80054d4:	f85e 6020 	ldr.w	r6, [lr, r0, lsl #2]
 80054d8:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 80054dc:	f3c1 4307 	ubfx	r3, r1, #16, #8
 80054e0:	eb04 2497 	add.w	r4, r4, r7, lsr #10
 80054e4:	0e09      	lsrs	r1, r1, #24
 80054e6:	eb06 2694 	add.w	r6, r6, r4, lsr #10
 80054ea:	f85e 3023 	ldr.w	r3, [lr, r3, lsl #2]
 80054ee:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
 80054f2:	eb00 2096 	add.w	r0, r0, r6, lsr #10
 80054f6:	eb03 2a90 	add.w	sl, r3, r0, lsr #10
 80054fa:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 80054fe:	f3ca 0309 	ubfx	r3, sl, #0, #10
 8005502:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8005506:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800550a:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800550e:	f3c1 0a09 	ubfx	sl, r1, #0, #10
 8005512:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8005516:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800551a:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800551e:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 8005522:	ea4a 4a03 	orr.w	sl, sl, r3, lsl #16
 8005526:	ea45 4808 	orr.w	r8, r5, r8, lsl #16
 800552a:	0a8b      	lsrs	r3, r1, #10
 800552c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8005530:	4939      	ldr	r1, [pc, #228]	; (8005618 <D64_GENERIC+0x1fc>)
 8005532:	9c00      	ldr	r4, [sp, #0]
 8005534:	fb28 4101 	smlad	r1, r8, r1, r4
 8005538:	4c38      	ldr	r4, [pc, #224]	; (800561c <D64_GENERIC+0x200>)
 800553a:	fb27 1104 	smlad	r1, r7, r4, r1
 800553e:	4c38      	ldr	r4, [pc, #224]	; (8005620 <D64_GENERIC+0x204>)
 8005540:	fb20 1104 	smlad	r1, r0, r4, r1
 8005544:	f44f 3680 	mov.w	r6, #65536	; 0x10000
 8005548:	fb2a 1106 	smlad	r1, sl, r6, r1
 800554c:	4c35      	ldr	r4, [pc, #212]	; (8005624 <D64_GENERIC+0x208>)
 800554e:	9d01      	ldr	r5, [sp, #4]
 8005550:	fb28 5404 	smlad	r4, r8, r4, r5
 8005554:	4d33      	ldr	r5, [pc, #204]	; (8005624 <D64_GENERIC+0x208>)
 8005556:	fb2a 4415 	smladx	r4, sl, r5, r4
 800555a:	4d33      	ldr	r5, [pc, #204]	; (8005628 <D64_GENERIC+0x20c>)
 800555c:	fb27 4405 	smlad	r4, r7, r5, r4
 8005560:	fb20 4415 	smladx	r4, r0, r5, r4
 8005564:	2501      	movs	r5, #1
 8005566:	9400      	str	r4, [sp, #0]
 8005568:	fb28 f805 	smuad	r8, r8, r5
 800556c:	4c2f      	ldr	r4, [pc, #188]	; (800562c <D64_GENERIC+0x210>)
 800556e:	fb27 8704 	smlad	r7, r7, r4, r8
 8005572:	4c2f      	ldr	r4, [pc, #188]	; (8005630 <D64_GENERIC+0x214>)
 8005574:	fb20 7004 	smlad	r0, r0, r4, r7
 8005578:	4c2e      	ldr	r4, [pc, #184]	; (8005634 <D64_GENERIC+0x218>)
 800557a:	fb2a 0004 	smlad	r0, sl, r4, r0
 800557e:	f5a1 3600 	sub.w	r6, r1, #131072	; 0x20000
 8005582:	9902      	ldr	r1, [sp, #8]
 8005584:	9001      	str	r0, [sp, #4]
 8005586:	b189      	cbz	r1, 80055ac <D64_GENERIC+0x190>
 8005588:	9803      	ldr	r0, [sp, #12]
 800558a:	9c04      	ldr	r4, [sp, #16]
 800558c:	9604      	str	r6, [sp, #16]
 800558e:	4430      	add	r0, r6
 8005590:	1b00      	subs	r0, r0, r4
 8005592:	17c5      	asrs	r5, r0, #31
 8005594:	460f      	mov	r7, r1
 8005596:	fba0 0101 	umull	r0, r1, r0, r1
 800559a:	fb07 1105 	mla	r1, r7, r5, r1
 800559e:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 80055a2:	f141 0100 	adc.w	r1, r1, #0
 80055a6:	0049      	lsls	r1, r1, #1
 80055a8:	9103      	str	r1, [sp, #12]
 80055aa:	460e      	mov	r6, r1
 80055ac:	8d14      	ldrh	r4, [r2, #40]	; 0x28
 80055ae:	9905      	ldr	r1, [sp, #20]
 80055b0:	9806      	ldr	r0, [sp, #24]
 80055b2:	02b6      	lsls	r6, r6, #10
 80055b4:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 80055b8:	f04f 0800 	mov.w	r8, #0
 80055bc:	fb0c f404 	mul.w	r4, ip, r4
 80055c0:	fbc1 7806 	smlal	r7, r8, r1, r6
 80055c4:	4641      	mov	r1, r8
 80055c6:	1089      	asrs	r1, r1, #2
 80055c8:	f301 010f 	ssat	r1, #16, r1
 80055cc:	f820 1014 	strh.w	r1, [r0, r4, lsl #1]
 80055d0:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
 80055d2:	f10c 0c01 	add.w	ip, ip, #1
 80055d6:	4561      	cmp	r1, ip
 80055d8:	dd0e      	ble.n	80055f8 <D64_GENERIC+0x1dc>
 80055da:	8d56      	ldrh	r6, [r2, #42]	; 0x2a
 80055dc:	2e01      	cmp	r6, #1
 80055de:	f47f af3a 	bne.w	8005456 <D64_GENERIC+0x3a>
 80055e2:	6b56      	ldr	r6, [r2, #52]	; 0x34
 80055e4:	06b4      	lsls	r4, r6, #26
 80055e6:	e899 0003 	ldmia.w	r9, {r0, r1}
 80055ea:	f109 0908 	add.w	r9, r9, #8
 80055ee:	f57f af5a 	bpl.w	80054a6 <D64_GENERIC+0x8a>
 80055f2:	ba40      	rev16	r0, r0
 80055f4:	ba49      	rev16	r1, r1
 80055f6:	e756      	b.n	80054a6 <D64_GENERIC+0x8a>
 80055f8:	61d3      	str	r3, [r2, #28]
 80055fa:	9b03      	ldr	r3, [sp, #12]
 80055fc:	9901      	ldr	r1, [sp, #4]
 80055fe:	6113      	str	r3, [r2, #16]
 8005600:	9b04      	ldr	r3, [sp, #16]
 8005602:	6091      	str	r1, [r2, #8]
 8005604:	6153      	str	r3, [r2, #20]
 8005606:	9900      	ldr	r1, [sp, #0]
 8005608:	9b07      	ldr	r3, [sp, #28]
 800560a:	60d1      	str	r1, [r2, #12]
 800560c:	2000      	movs	r0, #0
 800560e:	6193      	str	r3, [r2, #24]
 8005610:	b009      	add	sp, #36	; 0x24
 8005612:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005616:	bf00      	nop
 8005618:	001c0015 	.word	0x001c0015
 800561c:	000f000a 	.word	0x000f000a
 8005620:	00060003 	.word	0x00060003
 8005624:	0024002a 	.word	0x0024002a
 8005628:	002e0030 	.word	0x002e0030
 800562c:	00030006 	.word	0x00030006
 8005630:	000a000f 	.word	0x000a000f
 8005634:	0015001c 	.word	0x0015001c
 8005638:	20000000 	.word	0x20000000

0800563c <D80_GENERIC>:
 800563c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005640:	b08b      	sub	sp, #44	; 0x2c
 8005642:	6914      	ldr	r4, [r2, #16]
 8005644:	9404      	str	r4, [sp, #16]
 8005646:	6954      	ldr	r4, [r2, #20]
 8005648:	9405      	str	r4, [sp, #20]
 800564a:	6994      	ldr	r4, [r2, #24]
 800564c:	9409      	str	r4, [sp, #36]	; 0x24
 800564e:	6894      	ldr	r4, [r2, #8]
 8005650:	9402      	str	r4, [sp, #8]
 8005652:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8005654:	68d4      	ldr	r4, [r2, #12]
 8005656:	9401      	str	r4, [sp, #4]
 8005658:	6b14      	ldr	r4, [r2, #48]	; 0x30
 800565a:	f8d2 b01c 	ldr.w	fp, [r2, #28]
 800565e:	9406      	str	r4, [sp, #24]
 8005660:	9107      	str	r1, [sp, #28]
 8005662:	2b00      	cmp	r3, #0
 8005664:	f000 810f 	beq.w	8005886 <D80_GENERIC+0x24a>
 8005668:	6a13      	ldr	r3, [r2, #32]
 800566a:	9308      	str	r3, [sp, #32]
 800566c:	2300      	movs	r3, #0
 800566e:	9200      	str	r2, [sp, #0]
 8005670:	f8df 9264 	ldr.w	r9, [pc, #612]	; 80058d8 <D80_GENERIC+0x29c>
 8005674:	f8cd b00c 	str.w	fp, [sp, #12]
 8005678:	461a      	mov	r2, r3
 800567a:	e0ed      	b.n	8005858 <D80_GENERIC+0x21c>
 800567c:	fa5f fc8c 	uxtb.w	ip, ip
 8005680:	fa0f f48c 	sxth.w	r4, ip
 8005684:	0066      	lsls	r6, r4, #1
 8005686:	eb06 0804 	add.w	r8, r6, r4
 800568a:	f1cc 0500 	rsb	r5, ip, #0
 800568e:	eb00 0108 	add.w	r1, r0, r8
 8005692:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8005696:	194b      	adds	r3, r1, r5
 8005698:	5d49      	ldrb	r1, [r1, r5]
 800569a:	f810 a008 	ldrb.w	sl, [r0, r8]
 800569e:	f813 b004 	ldrb.w	fp, [r3, r4]
 80056a2:	f810 c00c 	ldrb.w	ip, [r0, ip]
 80056a6:	f890 8000 	ldrb.w	r8, [r0]
 80056aa:	eb03 0e04 	add.w	lr, r3, r4
 80056ae:	eb0e 0705 	add.w	r7, lr, r5
 80056b2:	0409      	lsls	r1, r1, #16
 80056b4:	f81e 3005 	ldrb.w	r3, [lr, r5]
 80056b8:	f81e e015 	ldrb.w	lr, [lr, r5, lsl #1]
 80056bc:	eb01 610a 	add.w	r1, r1, sl, lsl #24
 80056c0:	eb07 0a45 	add.w	sl, r7, r5, lsl #1
 80056c4:	eb0a 0004 	add.w	r0, sl, r4
 80056c8:	041b      	lsls	r3, r3, #16
 80056ca:	f81a a004 	ldrb.w	sl, [sl, r4]
 80056ce:	f817 7015 	ldrb.w	r7, [r7, r5, lsl #1]
 80056d2:	5d44      	ldrb	r4, [r0, r5]
 80056d4:	eb03 630b 	add.w	r3, r3, fp, lsl #24
 80056d8:	eb01 210c 	add.w	r1, r1, ip, lsl #8
 80056dc:	4428      	add	r0, r5
 80056de:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 80056e2:	4441      	add	r1, r8
 80056e4:	4430      	add	r0, r6
 80056e6:	eb04 240a 	add.w	r4, r4, sl, lsl #8
 80056ea:	441f      	add	r7, r3
 80056ec:	b2cd      	uxtb	r5, r1
 80056ee:	f3c1 2307 	ubfx	r3, r1, #8, #8
 80056f2:	f859 6025 	ldr.w	r6, [r9, r5, lsl #2]
 80056f6:	f859 e023 	ldr.w	lr, [r9, r3, lsl #2]
 80056fa:	9b03      	ldr	r3, [sp, #12]
 80056fc:	f3c1 4507 	ubfx	r5, r1, #16, #8
 8005700:	0e09      	lsrs	r1, r1, #24
 8005702:	4433      	add	r3, r6
 8005704:	f859 8025 	ldr.w	r8, [r9, r5, lsl #2]
 8005708:	f859 6021 	ldr.w	r6, [r9, r1, lsl #2]
 800570c:	b2fd      	uxtb	r5, r7
 800570e:	eb0e 2193 	add.w	r1, lr, r3, lsr #10
 8005712:	469b      	mov	fp, r3
 8005714:	f3c7 2307 	ubfx	r3, r7, #8, #8
 8005718:	eb08 2891 	add.w	r8, r8, r1, lsr #10
 800571c:	f859 c025 	ldr.w	ip, [r9, r5, lsl #2]
 8005720:	f859 5023 	ldr.w	r5, [r9, r3, lsl #2]
 8005724:	f3c7 4e07 	ubfx	lr, r7, #16, #8
 8005728:	eb06 2698 	add.w	r6, r6, r8, lsr #10
 800572c:	0e3b      	lsrs	r3, r7, #24
 800572e:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 8005732:	f859 702e 	ldr.w	r7, [r9, lr, lsl #2]
 8005736:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800573a:	fa5f fe84 	uxtb.w	lr, r4
 800573e:	eb05 259c 	add.w	r5, r5, ip, lsr #10
 8005742:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8005746:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 800574a:	f859 e02e 	ldr.w	lr, [r9, lr, lsl #2]
 800574e:	f859 4024 	ldr.w	r4, [r9, r4, lsl #2]
 8005752:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 8005756:	eb0e 2e93 	add.w	lr, lr, r3, lsr #10
 800575a:	eb04 249e 	add.w	r4, r4, lr, lsr #10
 800575e:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8005762:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005766:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800576a:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800576e:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8005772:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8005776:	ea41 4b0b 	orr.w	fp, r1, fp, lsl #16
 800577a:	ea43 4707 	orr.w	r7, r3, r7, lsl #16
 800577e:	f3c4 0109 	ubfx	r1, r4, #0, #10
 8005782:	0aa3      	lsrs	r3, r4, #10
 8005784:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8005788:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800578c:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8005790:	ea41 4e0e 	orr.w	lr, r1, lr, lsl #16
 8005794:	9303      	str	r3, [sp, #12]
 8005796:	ea46 4808 	orr.w	r8, r6, r8, lsl #16
 800579a:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
 800579e:	4b42      	ldr	r3, [pc, #264]	; (80058a8 <D80_GENERIC+0x26c>)
 80057a0:	9901      	ldr	r1, [sp, #4]
 80057a2:	fb2b 1303 	smlad	r3, fp, r3, r1
 80057a6:	4941      	ldr	r1, [pc, #260]	; (80058ac <D80_GENERIC+0x270>)
 80057a8:	fb28 3301 	smlad	r3, r8, r1, r3
 80057ac:	4940      	ldr	r1, [pc, #256]	; (80058b0 <D80_GENERIC+0x274>)
 80057ae:	fb2c 3301 	smlad	r3, ip, r1, r3
 80057b2:	4940      	ldr	r1, [pc, #256]	; (80058b4 <D80_GENERIC+0x278>)
 80057b4:	fb27 3301 	smlad	r3, r7, r1, r3
 80057b8:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80057bc:	fb2e 3301 	smlad	r3, lr, r1, r3
 80057c0:	493d      	ldr	r1, [pc, #244]	; (80058b8 <D80_GENERIC+0x27c>)
 80057c2:	9c02      	ldr	r4, [sp, #8]
 80057c4:	fb2b 4401 	smlad	r4, fp, r1, r4
 80057c8:	493c      	ldr	r1, [pc, #240]	; (80058bc <D80_GENERIC+0x280>)
 80057ca:	fb28 4401 	smlad	r4, r8, r1, r4
 80057ce:	f04f 114b 	mov.w	r1, #4915275	; 0x4b004b
 80057d2:	fb2c 4101 	smlad	r1, ip, r1, r4
 80057d6:	4c3a      	ldr	r4, [pc, #232]	; (80058c0 <D80_GENERIC+0x284>)
 80057d8:	fb27 1104 	smlad	r1, r7, r4, r1
 80057dc:	4c39      	ldr	r4, [pc, #228]	; (80058c4 <D80_GENERIC+0x288>)
 80057de:	fb2e 1104 	smlad	r1, lr, r4, r1
 80057e2:	9101      	str	r1, [sp, #4]
 80057e4:	2101      	movs	r1, #1
 80057e6:	fb2b fb01 	smuad	fp, fp, r1
 80057ea:	4937      	ldr	r1, [pc, #220]	; (80058c8 <D80_GENERIC+0x28c>)
 80057ec:	fb28 b801 	smlad	r8, r8, r1, fp
 80057f0:	4d36      	ldr	r5, [pc, #216]	; (80058cc <D80_GENERIC+0x290>)
 80057f2:	fb2c 8c05 	smlad	ip, ip, r5, r8
 80057f6:	4d36      	ldr	r5, [pc, #216]	; (80058d0 <D80_GENERIC+0x294>)
 80057f8:	fb27 c705 	smlad	r7, r7, r5, ip
 80057fc:	4d35      	ldr	r5, [pc, #212]	; (80058d4 <D80_GENERIC+0x298>)
 80057fe:	fb2e 7105 	smlad	r1, lr, r5, r7
 8005802:	9102      	str	r1, [sp, #8]
 8005804:	9908      	ldr	r1, [sp, #32]
 8005806:	f5a3 337a 	sub.w	r3, r3, #256000	; 0x3e800
 800580a:	b181      	cbz	r1, 800582e <D80_GENERIC+0x1f2>
 800580c:	9c04      	ldr	r4, [sp, #16]
 800580e:	9d05      	ldr	r5, [sp, #20]
 8005810:	9305      	str	r3, [sp, #20]
 8005812:	441c      	add	r4, r3
 8005814:	1b64      	subs	r4, r4, r5
 8005816:	17e7      	asrs	r7, r4, #31
 8005818:	fba4 4501 	umull	r4, r5, r4, r1
 800581c:	fb01 5507 	mla	r5, r1, r7, r5
 8005820:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 8005824:	f145 0500 	adc.w	r5, r5, #0
 8005828:	0069      	lsls	r1, r5, #1
 800582a:	9104      	str	r1, [sp, #16]
 800582c:	460b      	mov	r3, r1
 800582e:	9e00      	ldr	r6, [sp, #0]
 8005830:	9f06      	ldr	r7, [sp, #24]
 8005832:	8d31      	ldrh	r1, [r6, #40]	; 0x28
 8005834:	025b      	lsls	r3, r3, #9
 8005836:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800583a:	2500      	movs	r5, #0
 800583c:	fb02 f101 	mul.w	r1, r2, r1
 8005840:	fbc7 4503 	smlal	r4, r5, r7, r3
 8005844:	9c07      	ldr	r4, [sp, #28]
 8005846:	10ab      	asrs	r3, r5, #2
 8005848:	f303 030f 	ssat	r3, #16, r3
 800584c:	f824 3011 	strh.w	r3, [r4, r1, lsl #1]
 8005850:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
 8005852:	3201      	adds	r2, #1
 8005854:	4293      	cmp	r3, r2
 8005856:	dd13      	ble.n	8005880 <D80_GENERIC+0x244>
 8005858:	9b00      	ldr	r3, [sp, #0]
 800585a:	f8b3 c02a 	ldrh.w	ip, [r3, #42]	; 0x2a
 800585e:	f1bc 0f01 	cmp.w	ip, #1
 8005862:	f47f af0b 	bne.w	800567c <D80_GENERIC+0x40>
 8005866:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005868:	6884      	ldr	r4, [r0, #8]
 800586a:	069b      	lsls	r3, r3, #26
 800586c:	e890 0082 	ldmia.w	r0, {r1, r7}
 8005870:	f100 000a 	add.w	r0, r0, #10
 8005874:	f57f af3a 	bpl.w	80056ec <D80_GENERIC+0xb0>
 8005878:	ba49      	rev16	r1, r1
 800587a:	ba7f      	rev16	r7, r7
 800587c:	ba64      	rev16	r4, r4
 800587e:	e735      	b.n	80056ec <D80_GENERIC+0xb0>
 8005880:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8005884:	4632      	mov	r2, r6
 8005886:	9b02      	ldr	r3, [sp, #8]
 8005888:	6093      	str	r3, [r2, #8]
 800588a:	9b01      	ldr	r3, [sp, #4]
 800588c:	60d3      	str	r3, [r2, #12]
 800588e:	9b04      	ldr	r3, [sp, #16]
 8005890:	6113      	str	r3, [r2, #16]
 8005892:	9b05      	ldr	r3, [sp, #20]
 8005894:	6153      	str	r3, [r2, #20]
 8005896:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005898:	f8c2 b01c 	str.w	fp, [r2, #28]
 800589c:	2000      	movs	r0, #0
 800589e:	6193      	str	r3, [r2, #24]
 80058a0:	b00b      	add	sp, #44	; 0x2c
 80058a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058a6:	bf00      	nop
 80058a8:	002d0024 	.word	0x002d0024
 80058ac:	001c0015 	.word	0x001c0015
 80058b0:	000f000a 	.word	0x000f000a
 80058b4:	00060003 	.word	0x00060003
 80058b8:	0037003f 	.word	0x0037003f
 80058bc:	00450049 	.word	0x00450049
 80058c0:	00490045 	.word	0x00490045
 80058c4:	003f0037 	.word	0x003f0037
 80058c8:	00030006 	.word	0x00030006
 80058cc:	000a000f 	.word	0x000a000f
 80058d0:	0015001c 	.word	0x0015001c
 80058d4:	0024002d 	.word	0x0024002d
 80058d8:	20000000 	.word	0x20000000

080058dc <D128_GENERIC>:
 80058dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058e0:	b093      	sub	sp, #76	; 0x4c
 80058e2:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 80058e4:	9005      	str	r0, [sp, #20]
 80058e6:	4610      	mov	r0, r2
 80058e8:	9201      	str	r2, [sp, #4]
 80058ea:	6912      	ldr	r2, [r2, #16]
 80058ec:	920c      	str	r2, [sp, #48]	; 0x30
 80058ee:	4602      	mov	r2, r0
 80058f0:	6940      	ldr	r0, [r0, #20]
 80058f2:	900d      	str	r0, [sp, #52]	; 0x34
 80058f4:	4610      	mov	r0, r2
 80058f6:	4614      	mov	r4, r2
 80058f8:	6992      	ldr	r2, [r2, #24]
 80058fa:	9211      	str	r2, [sp, #68]	; 0x44
 80058fc:	69c2      	ldr	r2, [r0, #28]
 80058fe:	9202      	str	r2, [sp, #8]
 8005900:	68e2      	ldr	r2, [r4, #12]
 8005902:	6880      	ldr	r0, [r0, #8]
 8005904:	9203      	str	r2, [sp, #12]
 8005906:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005908:	9004      	str	r0, [sp, #16]
 800590a:	920e      	str	r2, [sp, #56]	; 0x38
 800590c:	910f      	str	r1, [sp, #60]	; 0x3c
 800590e:	2b00      	cmp	r3, #0
 8005910:	f000 819b 	beq.w	8005c4a <D128_GENERIC+0x36e>
 8005914:	6a23      	ldr	r3, [r4, #32]
 8005916:	9310      	str	r3, [sp, #64]	; 0x40
 8005918:	2300      	movs	r3, #0
 800591a:	f8df 93a8 	ldr.w	r9, [pc, #936]	; 8005cc4 <D128_GENERIC+0x3e8>
 800591e:	9306      	str	r3, [sp, #24]
 8005920:	e17a      	b.n	8005c18 <D128_GENERIC+0x33c>
 8005922:	b2d2      	uxtb	r2, r2
 8005924:	9d05      	ldr	r5, [sp, #20]
 8005926:	b214      	sxth	r4, r2
 8005928:	eb04 0a44 	add.w	sl, r4, r4, lsl #1
 800592c:	4250      	negs	r0, r2
 800592e:	eb05 010a 	add.w	r1, r5, sl
 8005932:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005936:	eb01 0800 	add.w	r8, r1, r0
 800593a:	eb0b 0c04 	add.w	ip, fp, r4
 800593e:	eb08 070c 	add.w	r7, r8, ip
 8005942:	183b      	adds	r3, r7, r0
 8005944:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 8005948:	eb03 0e40 	add.w	lr, r3, r0, lsl #1
 800594c:	eb0e 0604 	add.w	r6, lr, r4
 8005950:	9307      	str	r3, [sp, #28]
 8005952:	1833      	adds	r3, r6, r0
 8005954:	9305      	str	r3, [sp, #20]
 8005956:	462b      	mov	r3, r5
 8005958:	f815 a00a 	ldrb.w	sl, [r5, sl]
 800595c:	f8cd a020 	str.w	sl, [sp, #32]
 8005960:	f818 a00c 	ldrb.w	sl, [r8, ip]
 8005964:	f813 c002 	ldrb.w	ip, [r3, r2]
 8005968:	f81e 8004 	ldrb.w	r8, [lr, r4]
 800596c:	5c3a      	ldrb	r2, [r7, r0]
 800596e:	f817 e010 	ldrb.w	lr, [r7, r0, lsl #1]
 8005972:	781f      	ldrb	r7, [r3, #0]
 8005974:	9b07      	ldr	r3, [sp, #28]
 8005976:	9d05      	ldr	r5, [sp, #20]
 8005978:	f813 3010 	ldrb.w	r3, [r3, r0, lsl #1]
 800597c:	5c09      	ldrb	r1, [r1, r0]
 800597e:	9709      	str	r7, [sp, #36]	; 0x24
 8005980:	9307      	str	r3, [sp, #28]
 8005982:	f816 7010 	ldrb.w	r7, [r6, r0, lsl #1]
 8005986:	5c33      	ldrb	r3, [r6, r0]
 8005988:	0412      	lsls	r2, r2, #16
 800598a:	eb05 0640 	add.w	r6, r5, r0, lsl #1
 800598e:	eb02 620a 	add.w	r2, r2, sl, lsl #24
 8005992:	9d08      	ldr	r5, [sp, #32]
 8005994:	eb06 0a04 	add.w	sl, r6, r4
 8005998:	0409      	lsls	r1, r1, #16
 800599a:	eb01 6105 	add.w	r1, r1, r5, lsl #24
 800599e:	f81a 5000 	ldrb.w	r5, [sl, r0]
 80059a2:	5d36      	ldrb	r6, [r6, r4]
 80059a4:	9c05      	ldr	r4, [sp, #20]
 80059a6:	042d      	lsls	r5, r5, #16
 80059a8:	eb05 6606 	add.w	r6, r5, r6, lsl #24
 80059ac:	eb01 210c 	add.w	r1, r1, ip, lsl #8
 80059b0:	f81a 5010 	ldrb.w	r5, [sl, r0, lsl #1]
 80059b4:	f814 4010 	ldrb.w	r4, [r4, r0, lsl #1]
 80059b8:	eb0a 0c00 	add.w	ip, sl, r0
 80059bc:	041b      	lsls	r3, r3, #16
 80059be:	eb03 6308 	add.w	r3, r3, r8, lsl #24
 80059c2:	eb06 2605 	add.w	r6, r6, r5, lsl #8
 80059c6:	f81c a010 	ldrb.w	sl, [ip, r0, lsl #1]
 80059ca:	9d07      	ldr	r5, [sp, #28]
 80059cc:	eb03 2307 	add.w	r3, r3, r7, lsl #8
 80059d0:	eb0c 0040 	add.w	r0, ip, r0, lsl #1
 80059d4:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80059d6:	4458      	add	r0, fp
 80059d8:	eb02 220e 	add.w	r2, r2, lr, lsl #8
 80059dc:	9005      	str	r0, [sp, #20]
 80059de:	4439      	add	r1, r7
 80059e0:	442a      	add	r2, r5
 80059e2:	44b2      	add	sl, r6
 80059e4:	1918      	adds	r0, r3, r4
 80059e6:	b2cb      	uxtb	r3, r1
 80059e8:	f3c1 2407 	ubfx	r4, r1, #8, #8
 80059ec:	9e02      	ldr	r6, [sp, #8]
 80059ee:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80059f2:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
 80059f6:	f3c1 4407 	ubfx	r4, r1, #16, #8
 80059fa:	441e      	add	r6, r3
 80059fc:	0e09      	lsrs	r1, r1, #24
 80059fe:	4633      	mov	r3, r6
 8005a00:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 8005a04:	f859 7021 	ldr.w	r7, [r9, r1, lsl #2]
 8005a08:	b2d4      	uxtb	r4, r2
 8005a0a:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 8005a0e:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8005a12:	eb06 2b95 	add.w	fp, r6, r5, lsr #10
 8005a16:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 8005a1a:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8005a1e:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8005a22:	0e12      	lsrs	r2, r2, #24
 8005a24:	eb07 279b 	add.w	r7, r7, fp, lsr #10
 8005a28:	eb06 2897 	add.w	r8, r6, r7, lsr #10
 8005a2c:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 8005a30:	f859 4022 	ldr.w	r4, [r9, r2, lsl #2]
 8005a34:	9702      	str	r7, [sp, #8]
 8005a36:	b2c2      	uxtb	r2, r0
 8005a38:	eb01 2198 	add.w	r1, r1, r8, lsr #10
 8005a3c:	eb06 2c91 	add.w	ip, r6, r1, lsr #10
 8005a40:	f859 6022 	ldr.w	r6, [r9, r2, lsl #2]
 8005a44:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 8005a48:	f3c0 2207 	ubfx	r2, r0, #8, #8
 8005a4c:	eb06 2e94 	add.w	lr, r6, r4, lsr #10
 8005a50:	f3c0 4607 	ubfx	r6, r0, #16, #8
 8005a54:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 8005a58:	f859 7026 	ldr.w	r7, [r9, r6, lsl #2]
 8005a5c:	0e00      	lsrs	r0, r0, #24
 8005a5e:	fa5f f68a 	uxtb.w	r6, sl
 8005a62:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a66:	9309      	str	r3, [sp, #36]	; 0x24
 8005a68:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 8005a6c:	f859 6026 	ldr.w	r6, [r9, r6, lsl #2]
 8005a70:	eb02 229e 	add.w	r2, r2, lr, lsr #10
 8005a74:	f3ca 2307 	ubfx	r3, sl, #8, #8
 8005a78:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8005a7c:	950a      	str	r5, [sp, #40]	; 0x28
 8005a7e:	eb07 2792 	add.w	r7, r7, r2, lsr #10
 8005a82:	f3ca 4507 	ubfx	r5, sl, #16, #8
 8005a86:	eb00 2097 	add.w	r0, r0, r7, lsr #10
 8005a8a:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8005a8e:	f859 5025 	ldr.w	r5, [r9, r5, lsl #2]
 8005a92:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8005a96:	920b      	str	r2, [sp, #44]	; 0x2c
 8005a98:	eb06 2690 	add.w	r6, r6, r0, lsr #10
 8005a9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005a9e:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 8005aa2:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8005aa6:	9307      	str	r3, [sp, #28]
 8005aa8:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 8005aac:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 8005ab0:	9b02      	ldr	r3, [sp, #8]
 8005ab2:	f8cd c008 	str.w	ip, [sp, #8]
 8005ab6:	4694      	mov	ip, r2
 8005ab8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005aba:	f859 a02a 	ldr.w	sl, [r9, sl, lsl #2]
 8005abe:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8005ac2:	9a02      	ldr	r2, [sp, #8]
 8005ac4:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8005ac8:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 8005acc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8005ad0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005ad2:	f8cd a020 	str.w	sl, [sp, #32]
 8005ad6:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8005ada:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8005ade:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8005ae2:	9b07      	ldr	r3, [sp, #28]
 8005ae4:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8005ae8:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8005aec:	ea42 480e 	orr.w	r8, r2, lr, lsl #16
 8005af0:	9a08      	ldr	r2, [sp, #32]
 8005af2:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8005af6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005afa:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8005afe:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8005b02:	f3c2 0e09 	ubfx	lr, r2, #0, #10
 8005b06:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8005b0a:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8005b0e:	0a96      	lsrs	r6, r2, #10
 8005b10:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8005b14:	9602      	str	r6, [sp, #8]
 8005b16:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8005b1a:	ea4a 4a0b 	orr.w	sl, sl, fp, lsl #16
 8005b1e:	ea4e 4505 	orr.w	r5, lr, r5, lsl #16
 8005b22:	4e53      	ldr	r6, [pc, #332]	; (8005c70 <D128_GENERIC+0x394>)
 8005b24:	9f03      	ldr	r7, [sp, #12]
 8005b26:	fb2c 7606 	smlad	r6, ip, r6, r7
 8005b2a:	4f52      	ldr	r7, [pc, #328]	; (8005c74 <D128_GENERIC+0x398>)
 8005b2c:	fb2a 6607 	smlad	r6, sl, r7, r6
 8005b30:	4f51      	ldr	r7, [pc, #324]	; (8005c78 <D128_GENERIC+0x39c>)
 8005b32:	fb21 6607 	smlad	r6, r1, r7, r6
 8005b36:	4f51      	ldr	r7, [pc, #324]	; (8005c7c <D128_GENERIC+0x3a0>)
 8005b38:	fb24 6607 	smlad	r6, r4, r7, r6
 8005b3c:	4f50      	ldr	r7, [pc, #320]	; (8005c80 <D128_GENERIC+0x3a4>)
 8005b3e:	fb28 6607 	smlad	r6, r8, r7, r6
 8005b42:	4f50      	ldr	r7, [pc, #320]	; (8005c84 <D128_GENERIC+0x3a8>)
 8005b44:	fb20 6607 	smlad	r6, r0, r7, r6
 8005b48:	4f4f      	ldr	r7, [pc, #316]	; (8005c88 <D128_GENERIC+0x3ac>)
 8005b4a:	fb23 6607 	smlad	r6, r3, r7, r6
 8005b4e:	f44f 3780 	mov.w	r7, #65536	; 0x10000
 8005b52:	fb25 6607 	smlad	r6, r5, r7, r6
 8005b56:	4f4d      	ldr	r7, [pc, #308]	; (8005c8c <D128_GENERIC+0x3b0>)
 8005b58:	9a04      	ldr	r2, [sp, #16]
 8005b5a:	fb2c 2e07 	smlad	lr, ip, r7, r2
 8005b5e:	4a4c      	ldr	r2, [pc, #304]	; (8005c90 <D128_GENERIC+0x3b4>)
 8005b60:	fb2a ee02 	smlad	lr, sl, r2, lr
 8005b64:	4f4b      	ldr	r7, [pc, #300]	; (8005c94 <D128_GENERIC+0x3b8>)
 8005b66:	fb21 ee07 	smlad	lr, r1, r7, lr
 8005b6a:	4f4b      	ldr	r7, [pc, #300]	; (8005c98 <D128_GENERIC+0x3bc>)
 8005b6c:	fb24 ee07 	smlad	lr, r4, r7, lr
 8005b70:	4f4a      	ldr	r7, [pc, #296]	; (8005c9c <D128_GENERIC+0x3c0>)
 8005b72:	fb28 ee07 	smlad	lr, r8, r7, lr
 8005b76:	4f4a      	ldr	r7, [pc, #296]	; (8005ca0 <D128_GENERIC+0x3c4>)
 8005b78:	fb20 ee07 	smlad	lr, r0, r7, lr
 8005b7c:	4f49      	ldr	r7, [pc, #292]	; (8005ca4 <D128_GENERIC+0x3c8>)
 8005b7e:	fb23 e707 	smlad	r7, r3, r7, lr
 8005b82:	f8df e144 	ldr.w	lr, [pc, #324]	; 8005cc8 <D128_GENERIC+0x3ec>
 8005b86:	fb25 720e 	smlad	r2, r5, lr, r7
 8005b8a:	f04f 0b01 	mov.w	fp, #1
 8005b8e:	9203      	str	r2, [sp, #12]
 8005b90:	fb2c fb0b 	smuad	fp, ip, fp
 8005b94:	4f44      	ldr	r7, [pc, #272]	; (8005ca8 <D128_GENERIC+0x3cc>)
 8005b96:	fb2a ba07 	smlad	sl, sl, r7, fp
 8005b9a:	4f44      	ldr	r7, [pc, #272]	; (8005cac <D128_GENERIC+0x3d0>)
 8005b9c:	fb21 aa07 	smlad	sl, r1, r7, sl
 8005ba0:	4f43      	ldr	r7, [pc, #268]	; (8005cb0 <D128_GENERIC+0x3d4>)
 8005ba2:	fb24 aa07 	smlad	sl, r4, r7, sl
 8005ba6:	4f43      	ldr	r7, [pc, #268]	; (8005cb4 <D128_GENERIC+0x3d8>)
 8005ba8:	fb28 a707 	smlad	r7, r8, r7, sl
 8005bac:	4a42      	ldr	r2, [pc, #264]	; (8005cb8 <D128_GENERIC+0x3dc>)
 8005bae:	fb20 7702 	smlad	r7, r0, r2, r7
 8005bb2:	4a42      	ldr	r2, [pc, #264]	; (8005cbc <D128_GENERIC+0x3e0>)
 8005bb4:	fb23 7702 	smlad	r7, r3, r2, r7
 8005bb8:	4b41      	ldr	r3, [pc, #260]	; (8005cc0 <D128_GENERIC+0x3e4>)
 8005bba:	fb25 7303 	smlad	r3, r5, r3, r7
 8005bbe:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005bc0:	9304      	str	r3, [sp, #16]
 8005bc2:	f5a6 1680 	sub.w	r6, r6, #1048576	; 0x100000
 8005bc6:	b185      	cbz	r5, 8005bea <D128_GENERIC+0x30e>
 8005bc8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005bca:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005bcc:	960d      	str	r6, [sp, #52]	; 0x34
 8005bce:	4432      	add	r2, r6
 8005bd0:	1a52      	subs	r2, r2, r1
 8005bd2:	17d1      	asrs	r1, r2, #31
 8005bd4:	fba2 2305 	umull	r2, r3, r2, r5
 8005bd8:	fb05 3301 	mla	r3, r5, r1, r3
 8005bdc:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 8005be0:	f143 0300 	adc.w	r3, r3, #0
 8005be4:	005b      	lsls	r3, r3, #1
 8005be6:	930c      	str	r3, [sp, #48]	; 0x30
 8005be8:	461e      	mov	r6, r3
 8005bea:	9801      	ldr	r0, [sp, #4]
 8005bec:	9c06      	ldr	r4, [sp, #24]
 8005bee:	8d01      	ldrh	r1, [r0, #40]	; 0x28
 8005bf0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8005bf2:	01f6      	lsls	r6, r6, #7
 8005bf4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	fbc5 2306 	smlal	r2, r3, r5, r6
 8005bfe:	fb04 f101 	mul.w	r1, r4, r1
 8005c02:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005c04:	109b      	asrs	r3, r3, #2
 8005c06:	f303 030f 	ssat	r3, #16, r3
 8005c0a:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
 8005c0e:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 8005c10:	1c62      	adds	r2, r4, #1
 8005c12:	4293      	cmp	r3, r2
 8005c14:	9206      	str	r2, [sp, #24]
 8005c16:	dd18      	ble.n	8005c4a <D128_GENERIC+0x36e>
 8005c18:	9b01      	ldr	r3, [sp, #4]
 8005c1a:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8005c1c:	2a01      	cmp	r2, #1
 8005c1e:	f47f ae80 	bne.w	8005922 <D128_GENERIC+0x46>
 8005c22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c24:	9d05      	ldr	r5, [sp, #20]
 8005c26:	069b      	lsls	r3, r3, #26
 8005c28:	6829      	ldr	r1, [r5, #0]
 8005c2a:	686a      	ldr	r2, [r5, #4]
 8005c2c:	68a8      	ldr	r0, [r5, #8]
 8005c2e:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 8005c32:	f105 0410 	add.w	r4, r5, #16
 8005c36:	d506      	bpl.n	8005c46 <D128_GENERIC+0x36a>
 8005c38:	ba49      	rev16	r1, r1
 8005c3a:	ba52      	rev16	r2, r2
 8005c3c:	ba40      	rev16	r0, r0
 8005c3e:	fa9a fa9a 	rev16.w	sl, sl
 8005c42:	9405      	str	r4, [sp, #20]
 8005c44:	e6cf      	b.n	80059e6 <D128_GENERIC+0x10a>
 8005c46:	9405      	str	r4, [sp, #20]
 8005c48:	e6cd      	b.n	80059e6 <D128_GENERIC+0x10a>
 8005c4a:	9a01      	ldr	r2, [sp, #4]
 8005c4c:	9904      	ldr	r1, [sp, #16]
 8005c4e:	6091      	str	r1, [r2, #8]
 8005c50:	9903      	ldr	r1, [sp, #12]
 8005c52:	60d1      	str	r1, [r2, #12]
 8005c54:	9b02      	ldr	r3, [sp, #8]
 8005c56:	61d3      	str	r3, [r2, #28]
 8005c58:	4611      	mov	r1, r2
 8005c5a:	4613      	mov	r3, r2
 8005c5c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005c5e:	610a      	str	r2, [r1, #16]
 8005c60:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005c62:	6159      	str	r1, [r3, #20]
 8005c64:	9911      	ldr	r1, [sp, #68]	; 0x44
 8005c66:	6199      	str	r1, [r3, #24]
 8005c68:	2000      	movs	r0, #0
 8005c6a:	b013      	add	sp, #76	; 0x4c
 8005c6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c70:	00780069 	.word	0x00780069
 8005c74:	005b004e 	.word	0x005b004e
 8005c78:	00420037 	.word	0x00420037
 8005c7c:	002d0024 	.word	0x002d0024
 8005c80:	001c0015 	.word	0x001c0015
 8005c84:	000f000a 	.word	0x000f000a
 8005c88:	00060003 	.word	0x00060003
 8005c8c:	00880096 	.word	0x00880096
 8005c90:	00a200ac 	.word	0x00a200ac
 8005c94:	00b400ba 	.word	0x00b400ba
 8005c98:	00be00c0 	.word	0x00be00c0
 8005c9c:	00c000be 	.word	0x00c000be
 8005ca0:	00ba00b4 	.word	0x00ba00b4
 8005ca4:	00ac00a2 	.word	0x00ac00a2
 8005ca8:	00030006 	.word	0x00030006
 8005cac:	000a000f 	.word	0x000a000f
 8005cb0:	0015001c 	.word	0x0015001c
 8005cb4:	0024002d 	.word	0x0024002d
 8005cb8:	00370042 	.word	0x00370042
 8005cbc:	004e005b 	.word	0x004e005b
 8005cc0:	00690078 	.word	0x00690078
 8005cc4:	20000000 	.word	0x20000000
 8005cc8:	00960088 	.word	0x00960088

08005ccc <D16_1CH_HTONS_VOL_HP>:
 8005ccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cd0:	4691      	mov	r9, r2
 8005cd2:	b083      	sub	sp, #12
 8005cd4:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 8005cd6:	f8d9 3018 	ldr.w	r3, [r9, #24]
 8005cda:	f8d9 400c 	ldr.w	r4, [r9, #12]
 8005cde:	9300      	str	r3, [sp, #0]
 8005ce0:	4680      	mov	r8, r0
 8005ce2:	f8d9 7014 	ldr.w	r7, [r9, #20]
 8005ce6:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8005cea:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005cee:	f8d9 5008 	ldr.w	r5, [r9, #8]
 8005cf2:	9401      	str	r4, [sp, #4]
 8005cf4:	f8d9 a030 	ldr.w	sl, [r9, #48]	; 0x30
 8005cf8:	f8d9 e020 	ldr.w	lr, [r9, #32]
 8005cfc:	2a00      	cmp	r2, #0
 8005cfe:	d04e      	beq.n	8005d9e <D16_1CH_HTONS_VOL_HP+0xd2>
 8005d00:	f8df c0a8 	ldr.w	ip, [pc, #168]	; 8005dac <D16_1CH_HTONS_VOL_HP+0xe0>
 8005d04:	1e8c      	subs	r4, r1, #2
 8005d06:	eb08 0b42 	add.w	fp, r8, r2, lsl #1
 8005d0a:	f858 2b02 	ldr.w	r2, [r8], #2
 8005d0e:	ba52      	rev16	r2, r2
 8005d10:	b2d6      	uxtb	r6, r2
 8005d12:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8005d16:	f85c 2026 	ldr.w	r2, [ip, r6, lsl #2]
 8005d1a:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
 8005d1e:	4413      	add	r3, r2
 8005d20:	eb01 2293 	add.w	r2, r1, r3, lsr #10
 8005d24:	f3c2 0109 	ubfx	r1, r2, #0, #10
 8005d28:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8005d30:	0a93      	lsrs	r3, r2, #10
 8005d32:	4a1c      	ldr	r2, [pc, #112]	; (8005da4 <D16_1CH_HTONS_VOL_HP+0xd8>)
 8005d34:	fb21 5202 	smlad	r2, r1, r2, r5
 8005d38:	4d1b      	ldr	r5, [pc, #108]	; (8005da8 <D16_1CH_HTONS_VOL_HP+0xdc>)
 8005d3a:	fb21 f505 	smuad	r5, r1, r5
 8005d3e:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
 8005d42:	4410      	add	r0, r2
 8005d44:	1bc0      	subs	r0, r0, r7
 8005d46:	17c7      	asrs	r7, r0, #31
 8005d48:	fba0 010e 	umull	r0, r1, r0, lr
 8005d4c:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 8005d50:	fb0e 1107 	mla	r1, lr, r7, r1
 8005d54:	f141 0100 	adc.w	r1, r1, #0
 8005d58:	0448      	lsls	r0, r1, #17
 8005d5a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8005d5e:	2700      	movs	r7, #0
 8005d60:	fbc0 670a 	smlal	r6, r7, r0, sl
 8005d64:	45d8      	cmp	r8, fp
 8005d66:	ea4f 0041 	mov.w	r0, r1, lsl #1
 8005d6a:	ea4f 01a7 	mov.w	r1, r7, asr #2
 8005d6e:	4617      	mov	r7, r2
 8005d70:	f301 010f 	ssat	r1, #16, r1
 8005d74:	f824 1f02 	strh.w	r1, [r4, #2]!
 8005d78:	d1c7      	bne.n	8005d0a <D16_1CH_HTONS_VOL_HP+0x3e>
 8005d7a:	9901      	ldr	r1, [sp, #4]
 8005d7c:	f8c9 301c 	str.w	r3, [r9, #28]
 8005d80:	9b00      	ldr	r3, [sp, #0]
 8005d82:	f8c9 0010 	str.w	r0, [r9, #16]
 8005d86:	2000      	movs	r0, #0
 8005d88:	f8c9 5008 	str.w	r5, [r9, #8]
 8005d8c:	f8c9 100c 	str.w	r1, [r9, #12]
 8005d90:	f8c9 2014 	str.w	r2, [r9, #20]
 8005d94:	f8c9 3018 	str.w	r3, [r9, #24]
 8005d98:	b003      	add	sp, #12
 8005d9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d9e:	463a      	mov	r2, r7
 8005da0:	4621      	mov	r1, r4
 8005da2:	e7eb      	b.n	8005d7c <D16_1CH_HTONS_VOL_HP+0xb0>
 8005da4:	00030001 	.word	0x00030001
 8005da8:	00010003 	.word	0x00010003
 8005dac:	20000000 	.word	0x20000000

08005db0 <D24_1CH_HTONS_VOL_HP>:
 8005db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005db4:	b089      	sub	sp, #36	; 0x24
 8005db6:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8005db8:	6996      	ldr	r6, [r2, #24]
 8005dba:	9304      	str	r3, [sp, #16]
 8005dbc:	6b17      	ldr	r7, [r2, #48]	; 0x30
 8005dbe:	9207      	str	r2, [sp, #28]
 8005dc0:	6915      	ldr	r5, [r2, #16]
 8005dc2:	6954      	ldr	r4, [r2, #20]
 8005dc4:	9606      	str	r6, [sp, #24]
 8005dc6:	6893      	ldr	r3, [r2, #8]
 8005dc8:	69d6      	ldr	r6, [r2, #28]
 8005dca:	f8d2 c00c 	ldr.w	ip, [r2, #12]
 8005dce:	f8d2 a020 	ldr.w	sl, [r2, #32]
 8005dd2:	9a04      	ldr	r2, [sp, #16]
 8005dd4:	9705      	str	r7, [sp, #20]
 8005dd6:	2a00      	cmp	r2, #0
 8005dd8:	d07e      	beq.n	8005ed8 <D24_1CH_HTONS_VOL_HP+0x128>
 8005dda:	f1a1 0b02 	sub.w	fp, r1, #2
 8005dde:	2700      	movs	r7, #0
 8005de0:	46a8      	mov	r8, r5
 8005de2:	f8cd b004 	str.w	fp, [sp, #4]
 8005de6:	4655      	mov	r5, sl
 8005de8:	46e3      	mov	fp, ip
 8005dea:	f8df e0f8 	ldr.w	lr, [pc, #248]	; 8005ee4 <D24_1CH_HTONS_VOL_HP+0x134>
 8005dee:	46ba      	mov	sl, r7
 8005df0:	469c      	mov	ip, r3
 8005df2:	e055      	b.n	8005ea0 <D24_1CH_HTONS_VOL_HP+0xf0>
 8005df4:	7802      	ldrb	r2, [r0, #0]
 8005df6:	78c3      	ldrb	r3, [r0, #3]
 8005df8:	7841      	ldrb	r1, [r0, #1]
 8005dfa:	0212      	lsls	r2, r2, #8
 8005dfc:	eb02 4303 	add.w	r3, r2, r3, lsl #16
 8005e00:	440b      	add	r3, r1
 8005e02:	3002      	adds	r0, #2
 8005e04:	b2d9      	uxtb	r1, r3
 8005e06:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8005e0a:	f85e 7021 	ldr.w	r7, [lr, r1, lsl #2]
 8005e0e:	f85e 2022 	ldr.w	r2, [lr, r2, lsl #2]
 8005e12:	0c1b      	lsrs	r3, r3, #16
 8005e14:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 8005e18:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 8005e1c:	f85e 6023 	ldr.w	r6, [lr, r3, lsl #2]
 8005e20:	f3c7 0309 	ubfx	r3, r7, #0, #10
 8005e24:	f3c2 0709 	ubfx	r7, r2, #0, #10
 8005e28:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 8005e2c:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 8005e30:	4a2a      	ldr	r2, [pc, #168]	; (8005edc <D24_1CH_HTONS_VOL_HP+0x12c>)
 8005e32:	fb23 b102 	smlad	r1, r3, r2, fp
 8005e36:	4a2a      	ldr	r2, [pc, #168]	; (8005ee0 <D24_1CH_HTONS_VOL_HP+0x130>)
 8005e38:	fb23 cb02 	smlad	fp, r3, r2, ip
 8005e3c:	f3c6 0c09 	ubfx	ip, r6, #0, #10
 8005e40:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8005e44:	eb0b 0b4c 	add.w	fp, fp, ip, lsl #1
 8005e48:	2201      	movs	r2, #1
 8005e4a:	fb23 f702 	smuad	r7, r3, r2
 8005e4e:	f5a1 51d8 	sub.w	r1, r1, #6912	; 0x1b00
 8005e52:	eb01 0208 	add.w	r2, r1, r8
 8005e56:	1b12      	subs	r2, r2, r4
 8005e58:	17d4      	asrs	r4, r2, #31
 8005e5a:	fba2 2305 	umull	r2, r3, r2, r5
 8005e5e:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 8005e62:	fb05 3304 	mla	r3, r5, r4, r3
 8005e66:	f143 0300 	adc.w	r3, r3, #0
 8005e6a:	9c05      	ldr	r4, [sp, #20]
 8005e6c:	03da      	lsls	r2, r3, #15
 8005e6e:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8005e72:	f04f 0900 	mov.w	r9, #0
 8005e76:	fbc4 8902 	smlal	r8, r9, r4, r2
 8005e7a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8005e7e:	9a01      	ldr	r2, [sp, #4]
 8005e80:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8005e84:	9b03      	ldr	r3, [sp, #12]
 8005e86:	109b      	asrs	r3, r3, #2
 8005e88:	f303 030f 	ssat	r3, #16, r3
 8005e8c:	f822 3f02 	strh.w	r3, [r2, #2]!
 8005e90:	9b04      	ldr	r3, [sp, #16]
 8005e92:	9201      	str	r2, [sp, #4]
 8005e94:	f10a 0a01 	add.w	sl, sl, #1
 8005e98:	459a      	cmp	sl, r3
 8005e9a:	44bc      	add	ip, r7
 8005e9c:	460c      	mov	r4, r1
 8005e9e:	d00b      	beq.n	8005eb8 <D24_1CH_HTONS_VOL_HP+0x108>
 8005ea0:	f01a 0f01 	tst.w	sl, #1
 8005ea4:	d0a6      	beq.n	8005df4 <D24_1CH_HTONS_VOL_HP+0x44>
 8005ea6:	78c2      	ldrb	r2, [r0, #3]
 8005ea8:	7883      	ldrb	r3, [r0, #2]
 8005eaa:	f810 1b04 	ldrb.w	r1, [r0], #4
 8005eae:	0212      	lsls	r2, r2, #8
 8005eb0:	eb02 4303 	add.w	r3, r2, r3, lsl #16
 8005eb4:	440b      	add	r3, r1
 8005eb6:	e7a5      	b.n	8005e04 <D24_1CH_HTONS_VOL_HP+0x54>
 8005eb8:	4663      	mov	r3, ip
 8005eba:	4645      	mov	r5, r8
 8005ebc:	46dc      	mov	ip, fp
 8005ebe:	9807      	ldr	r0, [sp, #28]
 8005ec0:	6141      	str	r1, [r0, #20]
 8005ec2:	9906      	ldr	r1, [sp, #24]
 8005ec4:	6083      	str	r3, [r0, #8]
 8005ec6:	f8c0 c00c 	str.w	ip, [r0, #12]
 8005eca:	61c6      	str	r6, [r0, #28]
 8005ecc:	6105      	str	r5, [r0, #16]
 8005ece:	6181      	str	r1, [r0, #24]
 8005ed0:	2000      	movs	r0, #0
 8005ed2:	b009      	add	sp, #36	; 0x24
 8005ed4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ed8:	4621      	mov	r1, r4
 8005eda:	e7f0      	b.n	8005ebe <D24_1CH_HTONS_VOL_HP+0x10e>
 8005edc:	00030001 	.word	0x00030001
 8005ee0:	00060007 	.word	0x00060007
 8005ee4:	20000000 	.word	0x20000000

08005ee8 <D32_1CH_HTONS_VOL_HP>:
 8005ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005eec:	4692      	mov	sl, r2
 8005eee:	b087      	sub	sp, #28
 8005ef0:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 8005ef2:	f8da 3018 	ldr.w	r3, [sl, #24]
 8005ef6:	f8da 5030 	ldr.w	r5, [sl, #48]	; 0x30
 8005efa:	9304      	str	r3, [sp, #16]
 8005efc:	f8da 4010 	ldr.w	r4, [sl, #16]
 8005f00:	f8da 8014 	ldr.w	r8, [sl, #20]
 8005f04:	f8da 601c 	ldr.w	r6, [sl, #28]
 8005f08:	f8da 3008 	ldr.w	r3, [sl, #8]
 8005f0c:	f8da e00c 	ldr.w	lr, [sl, #12]
 8005f10:	9501      	str	r5, [sp, #4]
 8005f12:	f8da c020 	ldr.w	ip, [sl, #32]
 8005f16:	2a00      	cmp	r2, #0
 8005f18:	d07b      	beq.n	8006012 <D32_1CH_HTONS_VOL_HP+0x12a>
 8005f1a:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8005f1e:	4f3e      	ldr	r7, [pc, #248]	; (8006018 <D32_1CH_HTONS_VOL_HP+0x130>)
 8005f20:	f8cd c00c 	str.w	ip, [sp, #12]
 8005f24:	9202      	str	r2, [sp, #8]
 8005f26:	460d      	mov	r5, r1
 8005f28:	46a1      	mov	r9, r4
 8005f2a:	4684      	mov	ip, r0
 8005f2c:	f8cd a014 	str.w	sl, [sp, #20]
 8005f30:	f85c 1b04 	ldr.w	r1, [ip], #4
 8005f34:	ba49      	rev16	r1, r1
 8005f36:	b2c8      	uxtb	r0, r1
 8005f38:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8005f3c:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 8005f40:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 8005f44:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8005f48:	0e09      	lsrs	r1, r1, #24
 8005f4a:	eb00 2096 	add.w	r0, r0, r6, lsr #10
 8005f4e:	f857 602a 	ldr.w	r6, [r7, sl, lsl #2]
 8005f52:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 8005f56:	eb02 2290 	add.w	r2, r2, r0, lsr #10
 8005f5a:	eb06 2a92 	add.w	sl, r6, r2, lsr #10
 8005f5e:	eb01 269a 	add.w	r6, r1, sl, lsr #10
 8005f62:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8005f66:	f3c6 0109 	ubfx	r1, r6, #0, #10
 8005f6a:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8005f6e:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8005f72:	ea42 4000 	orr.w	r0, r2, r0, lsl #16
 8005f76:	ea41 4a0a 	orr.w	sl, r1, sl, lsl #16
 8005f7a:	4a28      	ldr	r2, [pc, #160]	; (800601c <D32_1CH_HTONS_VOL_HP+0x134>)
 8005f7c:	fb20 e202 	smlad	r2, r0, r2, lr
 8005f80:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8005f84:	fb2a 2101 	smlad	r1, sl, r1, r2
 8005f88:	4a25      	ldr	r2, [pc, #148]	; (8006020 <D32_1CH_HTONS_VOL_HP+0x138>)
 8005f8a:	fb20 3302 	smlad	r3, r0, r2, r3
 8005f8e:	4a25      	ldr	r2, [pc, #148]	; (8006024 <D32_1CH_HTONS_VOL_HP+0x13c>)
 8005f90:	fb2a 3e02 	smlad	lr, sl, r2, r3
 8005f94:	2301      	movs	r3, #1
 8005f96:	fb20 f003 	smuad	r0, r0, r3
 8005f9a:	4b23      	ldr	r3, [pc, #140]	; (8006028 <D32_1CH_HTONS_VOL_HP+0x140>)
 8005f9c:	fb2a 0303 	smlad	r3, sl, r3, r0
 8005fa0:	f5a1 4280 	sub.w	r2, r1, #16384	; 0x4000
 8005fa4:	9c03      	ldr	r4, [sp, #12]
 8005fa6:	eb02 0009 	add.w	r0, r2, r9
 8005faa:	eba0 0008 	sub.w	r0, r0, r8
 8005fae:	ea4f 7be0 	mov.w	fp, r0, asr #31
 8005fb2:	fba0 0104 	umull	r0, r1, r0, r4
 8005fb6:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 8005fba:	fb04 110b 	mla	r1, r4, fp, r1
 8005fbe:	f141 0100 	adc.w	r1, r1, #0
 8005fc2:	9c01      	ldr	r4, [sp, #4]
 8005fc4:	0388      	lsls	r0, r1, #14
 8005fc6:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8005fca:	f04f 0900 	mov.w	r9, #0
 8005fce:	fbc0 8904 	smlal	r8, r9, r0, r4
 8005fd2:	ea4f 00a9 	mov.w	r0, r9, asr #2
 8005fd6:	ea4f 0941 	mov.w	r9, r1, lsl #1
 8005fda:	f300 000f 	ssat	r0, #16, r0
 8005fde:	9902      	ldr	r1, [sp, #8]
 8005fe0:	f825 0b02 	strh.w	r0, [r5], #2
 8005fe4:	428d      	cmp	r5, r1
 8005fe6:	4690      	mov	r8, r2
 8005fe8:	d1a2      	bne.n	8005f30 <D32_1CH_HTONS_VOL_HP+0x48>
 8005fea:	f8dd a014 	ldr.w	sl, [sp, #20]
 8005fee:	464c      	mov	r4, r9
 8005ff0:	f8ca 3008 	str.w	r3, [sl, #8]
 8005ff4:	9b04      	ldr	r3, [sp, #16]
 8005ff6:	f8ca e00c 	str.w	lr, [sl, #12]
 8005ffa:	2000      	movs	r0, #0
 8005ffc:	f8ca 601c 	str.w	r6, [sl, #28]
 8006000:	f8ca 4010 	str.w	r4, [sl, #16]
 8006004:	f8ca 2014 	str.w	r2, [sl, #20]
 8006008:	f8ca 3018 	str.w	r3, [sl, #24]
 800600c:	b007      	add	sp, #28
 800600e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006012:	4642      	mov	r2, r8
 8006014:	e7ec      	b.n	8005ff0 <D32_1CH_HTONS_VOL_HP+0x108>
 8006016:	bf00      	nop
 8006018:	20000000 	.word	0x20000000
 800601c:	00060003 	.word	0x00060003
 8006020:	000a000c 	.word	0x000a000c
 8006024:	000c000a 	.word	0x000c000a
 8006028:	00030006 	.word	0x00030006

0800602c <D48_1CH_HTONS_VOL_HP>:
 800602c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006030:	4613      	mov	r3, r2
 8006032:	461c      	mov	r4, r3
 8006034:	b087      	sub	sp, #28
 8006036:	4625      	mov	r5, r4
 8006038:	4626      	mov	r6, r4
 800603a:	6b2d      	ldr	r5, [r5, #48]	; 0x30
 800603c:	9205      	str	r2, [sp, #20]
 800603e:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 8006040:	f8d3 9014 	ldr.w	r9, [r3, #20]
 8006044:	9501      	str	r5, [sp, #4]
 8006046:	4680      	mov	r8, r0
 8006048:	6a35      	ldr	r5, [r6, #32]
 800604a:	6918      	ldr	r0, [r3, #16]
 800604c:	699b      	ldr	r3, [r3, #24]
 800604e:	9304      	str	r3, [sp, #16]
 8006050:	f8d4 e01c 	ldr.w	lr, [r4, #28]
 8006054:	68a3      	ldr	r3, [r4, #8]
 8006056:	9502      	str	r5, [sp, #8]
 8006058:	68e4      	ldr	r4, [r4, #12]
 800605a:	2a00      	cmp	r2, #0
 800605c:	f000 808c 	beq.w	8006178 <D48_1CH_HTONS_VOL_HP+0x14c>
 8006060:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8006064:	4d45      	ldr	r5, [pc, #276]	; (800617c <D48_1CH_HTONS_VOL_HP+0x150>)
 8006066:	9203      	str	r2, [sp, #12]
 8006068:	468c      	mov	ip, r1
 800606a:	e898 0044 	ldmia.w	r8, {r2, r6}
 800606e:	f108 0806 	add.w	r8, r8, #6
 8006072:	ba52      	rev16	r2, r2
 8006074:	ba76      	rev16	r6, r6
 8006076:	b2d7      	uxtb	r7, r2
 8006078:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800607c:	f855 a027 	ldr.w	sl, [r5, r7, lsl #2]
 8006080:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8006084:	f3c2 4707 	ubfx	r7, r2, #16, #8
 8006088:	0e12      	lsrs	r2, r2, #24
 800608a:	eb0a 2a9e 	add.w	sl, sl, lr, lsr #10
 800608e:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
 8006092:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8006096:	fa5f fb86 	uxtb.w	fp, r6
 800609a:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 800609e:	f3c6 2e07 	ubfx	lr, r6, #8, #8
 80060a2:	eb07 2791 	add.w	r7, r7, r1, lsr #10
 80060a6:	f855 602b 	ldr.w	r6, [r5, fp, lsl #2]
 80060aa:	f855 e02e 	ldr.w	lr, [r5, lr, lsl #2]
 80060ae:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 80060b2:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 80060b6:	eb0e 2e96 	add.w	lr, lr, r6, lsr #10
 80060ba:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80060be:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80060c2:	f3ce 0b09 	ubfx	fp, lr, #0, #10
 80060c6:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 80060ca:	f3c7 0709 	ubfx	r7, r7, #0, #10
 80060ce:	f3c6 0609 	ubfx	r6, r6, #0, #10
 80060d2:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
 80060d6:	ea41 4a0a 	orr.w	sl, r1, sl, lsl #16
 80060da:	ea4b 4606 	orr.w	r6, fp, r6, lsl #16
 80060de:	4a28      	ldr	r2, [pc, #160]	; (8006180 <D48_1CH_HTONS_VOL_HP+0x154>)
 80060e0:	fb2a 4202 	smlad	r2, sl, r2, r4
 80060e4:	4927      	ldr	r1, [pc, #156]	; (8006184 <D48_1CH_HTONS_VOL_HP+0x158>)
 80060e6:	fb27 2201 	smlad	r2, r7, r1, r2
 80060ea:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80060ee:	fb26 2201 	smlad	r2, r6, r1, r2
 80060f2:	4925      	ldr	r1, [pc, #148]	; (8006188 <D48_1CH_HTONS_VOL_HP+0x15c>)
 80060f4:	fb2a 3401 	smlad	r4, sl, r1, r3
 80060f8:	f04f 131b 	mov.w	r3, #1769499	; 0x1b001b
 80060fc:	fb27 4403 	smlad	r4, r7, r3, r4
 8006100:	4b22      	ldr	r3, [pc, #136]	; (800618c <D48_1CH_HTONS_VOL_HP+0x160>)
 8006102:	fb26 4403 	smlad	r4, r6, r3, r4
 8006106:	2101      	movs	r1, #1
 8006108:	fb2a fa01 	smuad	sl, sl, r1
 800610c:	4b20      	ldr	r3, [pc, #128]	; (8006190 <D48_1CH_HTONS_VOL_HP+0x164>)
 800610e:	fb27 a703 	smlad	r7, r7, r3, sl
 8006112:	4b20      	ldr	r3, [pc, #128]	; (8006194 <D48_1CH_HTONS_VOL_HP+0x168>)
 8006114:	fb26 7303 	smlad	r3, r6, r3, r7
 8006118:	f5a2 4258 	sub.w	r2, r2, #55296	; 0xd800
 800611c:	9e02      	ldr	r6, [sp, #8]
 800611e:	9f01      	ldr	r7, [sp, #4]
 8006120:	4410      	add	r0, r2
 8006122:	eba0 0009 	sub.w	r0, r0, r9
 8006126:	ea4f 7ae0 	mov.w	sl, r0, asr #31
 800612a:	fba0 0106 	umull	r0, r1, r0, r6
 800612e:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 8006132:	fb06 110a 	mla	r1, r6, sl, r1
 8006136:	f141 0100 	adc.w	r1, r1, #0
 800613a:	0308      	lsls	r0, r1, #12
 800613c:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 8006140:	f04f 0a00 	mov.w	sl, #0
 8006144:	fbc0 9a07 	smlal	r9, sl, r0, r7
 8006148:	4657      	mov	r7, sl
 800614a:	10b8      	asrs	r0, r7, #2
 800614c:	f300 000f 	ssat	r0, #16, r0
 8006150:	f82c 0b02 	strh.w	r0, [ip], #2
 8006154:	0048      	lsls	r0, r1, #1
 8006156:	9903      	ldr	r1, [sp, #12]
 8006158:	458c      	cmp	ip, r1
 800615a:	4691      	mov	r9, r2
 800615c:	d185      	bne.n	800606a <D48_1CH_HTONS_VOL_HP+0x3e>
 800615e:	9d05      	ldr	r5, [sp, #20]
 8006160:	616a      	str	r2, [r5, #20]
 8006162:	9a04      	ldr	r2, [sp, #16]
 8006164:	6128      	str	r0, [r5, #16]
 8006166:	2000      	movs	r0, #0
 8006168:	60ab      	str	r3, [r5, #8]
 800616a:	60ec      	str	r4, [r5, #12]
 800616c:	f8c5 e01c 	str.w	lr, [r5, #28]
 8006170:	61aa      	str	r2, [r5, #24]
 8006172:	b007      	add	sp, #28
 8006174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006178:	464a      	mov	r2, r9
 800617a:	e7f0      	b.n	800615e <D48_1CH_HTONS_VOL_HP+0x132>
 800617c:	20000000 	.word	0x20000000
 8006180:	000f000a 	.word	0x000f000a
 8006184:	00060003 	.word	0x00060003
 8006188:	00150019 	.word	0x00150019
 800618c:	00190015 	.word	0x00190015
 8006190:	00030006 	.word	0x00030006
 8006194:	000a000f 	.word	0x000a000f

08006198 <D64_1CH_HTONS_VOL_HP>:
 8006198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800619c:	b089      	sub	sp, #36	; 0x24
 800619e:	4614      	mov	r4, r2
 80061a0:	9207      	str	r2, [sp, #28]
 80061a2:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 80061a4:	f8d2 c010 	ldr.w	ip, [r2, #16]
 80061a8:	f8d2 8014 	ldr.w	r8, [r2, #20]
 80061ac:	6992      	ldr	r2, [r2, #24]
 80061ae:	9206      	str	r2, [sp, #24]
 80061b0:	68e2      	ldr	r2, [r4, #12]
 80061b2:	9201      	str	r2, [sp, #4]
 80061b4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80061b6:	9203      	str	r2, [sp, #12]
 80061b8:	6a22      	ldr	r2, [r4, #32]
 80061ba:	69e5      	ldr	r5, [r4, #28]
 80061bc:	68a6      	ldr	r6, [r4, #8]
 80061be:	9204      	str	r2, [sp, #16]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	f000 80b0 	beq.w	8006326 <D64_1CH_HTONS_VOL_HP+0x18e>
 80061c6:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 80061ca:	4f58      	ldr	r7, [pc, #352]	; (800632c <D64_1CH_HTONS_VOL_HP+0x194>)
 80061cc:	9305      	str	r3, [sp, #20]
 80061ce:	9102      	str	r1, [sp, #8]
 80061d0:	f850 2b08 	ldr.w	r2, [r0], #8
 80061d4:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80061d8:	ba52      	rev16	r2, r2
 80061da:	fa93 f993 	rev16.w	r9, r3
 80061de:	b2d4      	uxtb	r4, r2
 80061e0:	f3c2 2307 	ubfx	r3, r2, #8, #8
 80061e4:	f857 b024 	ldr.w	fp, [r7, r4, lsl #2]
 80061e8:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 80061ec:	9901      	ldr	r1, [sp, #4]
 80061ee:	f3c2 4407 	ubfx	r4, r2, #16, #8
 80061f2:	0e12      	lsrs	r2, r2, #24
 80061f4:	44ab      	add	fp, r5
 80061f6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80061fa:	f857 4022 	ldr.w	r4, [r7, r2, lsl #2]
 80061fe:	fa5f f289 	uxtb.w	r2, r9
 8006202:	eb03 2e9b 	add.w	lr, r3, fp, lsr #10
 8006206:	f3c9 2307 	ubfx	r3, r9, #8, #8
 800620a:	eb05 2a9e 	add.w	sl, r5, lr, lsr #10
 800620e:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8006212:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 8006216:	f3c9 4507 	ubfx	r5, r9, #16, #8
 800621a:	eb04 249a 	add.w	r4, r4, sl, lsr #10
 800621e:	ea4f 6919 	mov.w	r9, r9, lsr #24
 8006222:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 8006226:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 800622a:	f857 9029 	ldr.w	r9, [r7, r9, lsl #2]
 800622e:	eb03 2392 	add.w	r3, r3, r2, lsr #10
 8006232:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 8006236:	eb09 2995 	add.w	r9, r9, r5, lsr #10
 800623a:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800623e:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8006242:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8006246:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800624a:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800624e:	ea4e 4b0b 	orr.w	fp, lr, fp, lsl #16
 8006252:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8006256:	f3c9 0e09 	ubfx	lr, r9, #0, #10
 800625a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800625e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 8006262:	ea4e 4e05 	orr.w	lr, lr, r5, lsl #16
 8006266:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800626a:	ea4f 2599 	mov.w	r5, r9, lsr #10
 800626e:	4b30      	ldr	r3, [pc, #192]	; (8006330 <D64_1CH_HTONS_VOL_HP+0x198>)
 8006270:	fb2b 1303 	smlad	r3, fp, r3, r1
 8006274:	492f      	ldr	r1, [pc, #188]	; (8006334 <D64_1CH_HTONS_VOL_HP+0x19c>)
 8006276:	fb24 3301 	smlad	r3, r4, r1, r3
 800627a:	492f      	ldr	r1, [pc, #188]	; (8006338 <D64_1CH_HTONS_VOL_HP+0x1a0>)
 800627c:	fb22 3301 	smlad	r3, r2, r1, r3
 8006280:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 8006284:	fb2e 390a 	smlad	r9, lr, sl, r3
 8006288:	4b2c      	ldr	r3, [pc, #176]	; (800633c <D64_1CH_HTONS_VOL_HP+0x1a4>)
 800628a:	fb2b 6603 	smlad	r6, fp, r3, r6
 800628e:	fb2e 6613 	smladx	r6, lr, r3, r6
 8006292:	4b2b      	ldr	r3, [pc, #172]	; (8006340 <D64_1CH_HTONS_VOL_HP+0x1a8>)
 8006294:	fb24 6603 	smlad	r6, r4, r3, r6
 8006298:	fb22 6313 	smladx	r3, r2, r3, r6
 800629c:	f04f 0a01 	mov.w	sl, #1
 80062a0:	9301      	str	r3, [sp, #4]
 80062a2:	fb2b fb0a 	smuad	fp, fp, sl
 80062a6:	4b27      	ldr	r3, [pc, #156]	; (8006344 <D64_1CH_HTONS_VOL_HP+0x1ac>)
 80062a8:	fb24 ba03 	smlad	sl, r4, r3, fp
 80062ac:	4b26      	ldr	r3, [pc, #152]	; (8006348 <D64_1CH_HTONS_VOL_HP+0x1b0>)
 80062ae:	fb22 a203 	smlad	r2, r2, r3, sl
 80062b2:	4b26      	ldr	r3, [pc, #152]	; (800634c <D64_1CH_HTONS_VOL_HP+0x1b4>)
 80062b4:	fb2e 2603 	smlad	r6, lr, r3, r2
 80062b8:	f5a9 3a00 	sub.w	sl, r9, #131072	; 0x20000
 80062bc:	eb0a 020c 	add.w	r2, sl, ip
 80062c0:	9c04      	ldr	r4, [sp, #16]
 80062c2:	9903      	ldr	r1, [sp, #12]
 80062c4:	eba2 0208 	sub.w	r2, r2, r8
 80062c8:	ea4f 79e2 	mov.w	r9, r2, asr #31
 80062cc:	fba2 2304 	umull	r2, r3, r2, r4
 80062d0:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 80062d4:	fb04 3309 	mla	r3, r4, r9, r3
 80062d8:	f143 0300 	adc.w	r3, r3, #0
 80062dc:	02da      	lsls	r2, r3, #11
 80062de:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 80062e2:	f04f 0900 	mov.w	r9, #0
 80062e6:	fbc1 8902 	smlal	r8, r9, r1, r2
 80062ea:	9902      	ldr	r1, [sp, #8]
 80062ec:	ea4f 02a9 	mov.w	r2, r9, asr #2
 80062f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80062f4:	f302 020f 	ssat	r2, #16, r2
 80062f8:	9b05      	ldr	r3, [sp, #20]
 80062fa:	f821 2b02 	strh.w	r2, [r1], #2
 80062fe:	4299      	cmp	r1, r3
 8006300:	9102      	str	r1, [sp, #8]
 8006302:	46d0      	mov	r8, sl
 8006304:	f47f af64 	bne.w	80061d0 <D64_1CH_HTONS_VOL_HP+0x38>
 8006308:	9a07      	ldr	r2, [sp, #28]
 800630a:	9901      	ldr	r1, [sp, #4]
 800630c:	60d1      	str	r1, [r2, #12]
 800630e:	9906      	ldr	r1, [sp, #24]
 8006310:	6096      	str	r6, [r2, #8]
 8006312:	2000      	movs	r0, #0
 8006314:	61d5      	str	r5, [r2, #28]
 8006316:	f8c2 c010 	str.w	ip, [r2, #16]
 800631a:	f8c2 a014 	str.w	sl, [r2, #20]
 800631e:	6191      	str	r1, [r2, #24]
 8006320:	b009      	add	sp, #36	; 0x24
 8006322:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006326:	46c2      	mov	sl, r8
 8006328:	4622      	mov	r2, r4
 800632a:	e7ee      	b.n	800630a <D64_1CH_HTONS_VOL_HP+0x172>
 800632c:	20000000 	.word	0x20000000
 8006330:	001c0015 	.word	0x001c0015
 8006334:	000f000a 	.word	0x000f000a
 8006338:	00060003 	.word	0x00060003
 800633c:	0024002a 	.word	0x0024002a
 8006340:	002e0030 	.word	0x002e0030
 8006344:	00030006 	.word	0x00030006
 8006348:	000a000f 	.word	0x000a000f
 800634c:	0015001c 	.word	0x0015001c

08006350 <D80_1CH_HTONS_VOL_HP>:
 8006350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006354:	4613      	mov	r3, r2
 8006356:	b089      	sub	sp, #36	; 0x24
 8006358:	4686      	mov	lr, r0
 800635a:	6918      	ldr	r0, [r3, #16]
 800635c:	9000      	str	r0, [sp, #0]
 800635e:	4618      	mov	r0, r3
 8006360:	461c      	mov	r4, r3
 8006362:	695b      	ldr	r3, [r3, #20]
 8006364:	9302      	str	r3, [sp, #8]
 8006366:	6983      	ldr	r3, [r0, #24]
 8006368:	9306      	str	r3, [sp, #24]
 800636a:	f8d0 c008 	ldr.w	ip, [r0, #8]
 800636e:	69c3      	ldr	r3, [r0, #28]
 8006370:	68c0      	ldr	r0, [r0, #12]
 8006372:	9207      	str	r2, [sp, #28]
 8006374:	9001      	str	r0, [sp, #4]
 8006376:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 8006378:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800637a:	9003      	str	r0, [sp, #12]
 800637c:	6a20      	ldr	r0, [r4, #32]
 800637e:	9004      	str	r0, [sp, #16]
 8006380:	2a00      	cmp	r2, #0
 8006382:	f000 80d2 	beq.w	800652a <D80_1CH_HTONS_VOL_HP+0x1da>
 8006386:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800638a:	4869      	ldr	r0, [pc, #420]	; (8006530 <D80_1CH_HTONS_VOL_HP+0x1e0>)
 800638c:	9205      	str	r2, [sp, #20]
 800638e:	461c      	mov	r4, r3
 8006390:	f8de 5000 	ldr.w	r5, [lr]
 8006394:	f8de 2004 	ldr.w	r2, [lr, #4]
 8006398:	f8de 3008 	ldr.w	r3, [lr, #8]
 800639c:	f10e 0e0a 	add.w	lr, lr, #10
 80063a0:	ba6d      	rev16	r5, r5
 80063a2:	ba52      	rev16	r2, r2
 80063a4:	fa93 fb93 	rev16.w	fp, r3
 80063a8:	b2ee      	uxtb	r6, r5
 80063aa:	f3c5 2307 	ubfx	r3, r5, #8, #8
 80063ae:	f850 7026 	ldr.w	r7, [r0, r6, lsl #2]
 80063b2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80063b6:	f3c5 4607 	ubfx	r6, r5, #16, #8
 80063ba:	eb04 0a07 	add.w	sl, r4, r7
 80063be:	0e2d      	lsrs	r5, r5, #24
 80063c0:	f850 4026 	ldr.w	r4, [r0, r6, lsl #2]
 80063c4:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
 80063c8:	eb03 239a 	add.w	r3, r3, sl, lsr #10
 80063cc:	eb04 2993 	add.w	r9, r4, r3, lsr #10
 80063d0:	b2d5      	uxtb	r5, r2
 80063d2:	f3c2 2407 	ubfx	r4, r2, #8, #8
 80063d6:	f850 7025 	ldr.w	r7, [r0, r5, lsl #2]
 80063da:	f850 5024 	ldr.w	r5, [r0, r4, lsl #2]
 80063de:	f3c2 4407 	ubfx	r4, r2, #16, #8
 80063e2:	eb06 2699 	add.w	r6, r6, r9, lsr #10
 80063e6:	0e12      	lsrs	r2, r2, #24
 80063e8:	eb07 2896 	add.w	r8, r7, r6, lsr #10
 80063ec:	f850 7024 	ldr.w	r7, [r0, r4, lsl #2]
 80063f0:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 80063f4:	fa5f f48b 	uxtb.w	r4, fp
 80063f8:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 80063fc:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 8006400:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 8006404:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
 8006408:	f850 b02b 	ldr.w	fp, [r0, fp, lsl #2]
 800640c:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 8006410:	eb04 2492 	add.w	r4, r4, r2, lsr #10
 8006414:	eb0b 2b94 	add.w	fp, fp, r4, lsr #10
 8006418:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800641c:	f3c9 0909 	ubfx	r9, r9, #0, #10
 8006420:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8006424:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8006428:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800642c:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8006430:	ea46 4909 	orr.w	r9, r6, r9, lsl #16
 8006434:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006438:	f3cb 0609 	ubfx	r6, fp, #0, #10
 800643c:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8006440:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8006444:	ea45 4808 	orr.w	r8, r5, r8, lsl #16
 8006448:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800644c:	ea46 4604 	orr.w	r6, r6, r4, lsl #16
 8006450:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 8006454:	ea4f 249b 	mov.w	r4, fp, lsr #10
 8006458:	4d36      	ldr	r5, [pc, #216]	; (8006534 <D80_1CH_HTONS_VOL_HP+0x1e4>)
 800645a:	9f01      	ldr	r7, [sp, #4]
 800645c:	fb23 7505 	smlad	r5, r3, r5, r7
 8006460:	4f35      	ldr	r7, [pc, #212]	; (8006538 <D80_1CH_HTONS_VOL_HP+0x1e8>)
 8006462:	fb29 5507 	smlad	r5, r9, r7, r5
 8006466:	4f35      	ldr	r7, [pc, #212]	; (800653c <D80_1CH_HTONS_VOL_HP+0x1ec>)
 8006468:	fb28 5507 	smlad	r5, r8, r7, r5
 800646c:	4f34      	ldr	r7, [pc, #208]	; (8006540 <D80_1CH_HTONS_VOL_HP+0x1f0>)
 800646e:	fb22 5507 	smlad	r5, r2, r7, r5
 8006472:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 8006476:	fb26 5b0a 	smlad	fp, r6, sl, r5
 800647a:	4d32      	ldr	r5, [pc, #200]	; (8006544 <D80_1CH_HTONS_VOL_HP+0x1f4>)
 800647c:	fb23 cc05 	smlad	ip, r3, r5, ip
 8006480:	4d31      	ldr	r5, [pc, #196]	; (8006548 <D80_1CH_HTONS_VOL_HP+0x1f8>)
 8006482:	fb29 cc05 	smlad	ip, r9, r5, ip
 8006486:	f04f 154b 	mov.w	r5, #4915275	; 0x4b004b
 800648a:	fb28 c505 	smlad	r5, r8, r5, ip
 800648e:	4f2f      	ldr	r7, [pc, #188]	; (800654c <D80_1CH_HTONS_VOL_HP+0x1fc>)
 8006490:	fb22 5507 	smlad	r5, r2, r7, r5
 8006494:	4f2e      	ldr	r7, [pc, #184]	; (8006550 <D80_1CH_HTONS_VOL_HP+0x200>)
 8006496:	fb26 5507 	smlad	r5, r6, r7, r5
 800649a:	f04f 0a01 	mov.w	sl, #1
 800649e:	9501      	str	r5, [sp, #4]
 80064a0:	fb23 fa0a 	smuad	sl, r3, sl
 80064a4:	4b2b      	ldr	r3, [pc, #172]	; (8006554 <D80_1CH_HTONS_VOL_HP+0x204>)
 80064a6:	fb29 a903 	smlad	r9, r9, r3, sl
 80064aa:	4d2b      	ldr	r5, [pc, #172]	; (8006558 <D80_1CH_HTONS_VOL_HP+0x208>)
 80064ac:	fb28 9805 	smlad	r8, r8, r5, r9
 80064b0:	4d2a      	ldr	r5, [pc, #168]	; (800655c <D80_1CH_HTONS_VOL_HP+0x20c>)
 80064b2:	fb22 8205 	smlad	r2, r2, r5, r8
 80064b6:	4b2a      	ldr	r3, [pc, #168]	; (8006560 <D80_1CH_HTONS_VOL_HP+0x210>)
 80064b8:	fb26 2c03 	smlad	ip, r6, r3, r2
 80064bc:	9b00      	ldr	r3, [sp, #0]
 80064be:	9d04      	ldr	r5, [sp, #16]
 80064c0:	f5ab 3a7a 	sub.w	sl, fp, #256000	; 0x3e800
 80064c4:	4453      	add	r3, sl
 80064c6:	461a      	mov	r2, r3
 80064c8:	9b02      	ldr	r3, [sp, #8]
 80064ca:	f8cd a008 	str.w	sl, [sp, #8]
 80064ce:	1ad2      	subs	r2, r2, r3
 80064d0:	17d7      	asrs	r7, r2, #31
 80064d2:	fba2 2305 	umull	r2, r3, r2, r5
 80064d6:	fb05 3307 	mla	r3, r5, r7, r3
 80064da:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 80064de:	f143 0300 	adc.w	r3, r3, #0
 80064e2:	9d03      	ldr	r5, [sp, #12]
 80064e4:	029a      	lsls	r2, r3, #10
 80064e6:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80064ea:	2700      	movs	r7, #0
 80064ec:	005b      	lsls	r3, r3, #1
 80064ee:	fbc5 6702 	smlal	r6, r7, r5, r2
 80064f2:	10ba      	asrs	r2, r7, #2
 80064f4:	9300      	str	r3, [sp, #0]
 80064f6:	f302 020f 	ssat	r2, #16, r2
 80064fa:	9b05      	ldr	r3, [sp, #20]
 80064fc:	f821 2b02 	strh.w	r2, [r1], #2
 8006500:	4299      	cmp	r1, r3
 8006502:	f47f af45 	bne.w	8006390 <D80_1CH_HTONS_VOL_HP+0x40>
 8006506:	4623      	mov	r3, r4
 8006508:	9907      	ldr	r1, [sp, #28]
 800650a:	9801      	ldr	r0, [sp, #4]
 800650c:	60c8      	str	r0, [r1, #12]
 800650e:	9a00      	ldr	r2, [sp, #0]
 8006510:	f8c1 c008 	str.w	ip, [r1, #8]
 8006514:	4608      	mov	r0, r1
 8006516:	61cb      	str	r3, [r1, #28]
 8006518:	610a      	str	r2, [r1, #16]
 800651a:	f8c1 a014 	str.w	sl, [r1, #20]
 800651e:	9906      	ldr	r1, [sp, #24]
 8006520:	6181      	str	r1, [r0, #24]
 8006522:	2000      	movs	r0, #0
 8006524:	b009      	add	sp, #36	; 0x24
 8006526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800652a:	f8dd a008 	ldr.w	sl, [sp, #8]
 800652e:	e7eb      	b.n	8006508 <D80_1CH_HTONS_VOL_HP+0x1b8>
 8006530:	20000000 	.word	0x20000000
 8006534:	002d0024 	.word	0x002d0024
 8006538:	001c0015 	.word	0x001c0015
 800653c:	000f000a 	.word	0x000f000a
 8006540:	00060003 	.word	0x00060003
 8006544:	0037003f 	.word	0x0037003f
 8006548:	00450049 	.word	0x00450049
 800654c:	00490045 	.word	0x00490045
 8006550:	003f0037 	.word	0x003f0037
 8006554:	00030006 	.word	0x00030006
 8006558:	000a000f 	.word	0x000a000f
 800655c:	0015001c 	.word	0x0015001c
 8006560:	0024002d 	.word	0x0024002d

08006564 <D128_1CH_HTONS_VOL_HP>:
 8006564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006568:	b093      	sub	sp, #76	; 0x4c
 800656a:	4614      	mov	r4, r2
 800656c:	9211      	str	r2, [sp, #68]	; 0x44
 800656e:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8006570:	6912      	ldr	r2, [r2, #16]
 8006572:	9203      	str	r2, [sp, #12]
 8006574:	4622      	mov	r2, r4
 8006576:	4615      	mov	r5, r2
 8006578:	6964      	ldr	r4, [r4, #20]
 800657a:	9406      	str	r4, [sp, #24]
 800657c:	4614      	mov	r4, r2
 800657e:	6992      	ldr	r2, [r2, #24]
 8006580:	9210      	str	r2, [sp, #64]	; 0x40
 8006582:	68ea      	ldr	r2, [r5, #12]
 8006584:	9204      	str	r2, [sp, #16]
 8006586:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8006588:	69e6      	ldr	r6, [r4, #28]
 800658a:	920d      	str	r2, [sp, #52]	; 0x34
 800658c:	68a4      	ldr	r4, [r4, #8]
 800658e:	6a2a      	ldr	r2, [r5, #32]
 8006590:	9405      	str	r4, [sp, #20]
 8006592:	920e      	str	r2, [sp, #56]	; 0x38
 8006594:	2b00      	cmp	r3, #0
 8006596:	f000 8145 	beq.w	8006824 <D128_1CH_HTONS_VOL_HP+0x2c0>
 800659a:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800659e:	930f      	str	r3, [sp, #60]	; 0x3c
 80065a0:	f8df 82dc 	ldr.w	r8, [pc, #732]	; 8006880 <D128_1CH_HTONS_VOL_HP+0x31c>
 80065a4:	9107      	str	r1, [sp, #28]
 80065a6:	f100 0310 	add.w	r3, r0, #16
 80065aa:	4699      	mov	r9, r3
 80065ac:	f1a9 0110 	sub.w	r1, r9, #16
 80065b0:	c90e      	ldmia	r1, {r1, r2, r3}
 80065b2:	f859 0c04 	ldr.w	r0, [r9, #-4]
 80065b6:	ba49      	rev16	r1, r1
 80065b8:	ba52      	rev16	r2, r2
 80065ba:	ba5b      	rev16	r3, r3
 80065bc:	fa90 fa90 	rev16.w	sl, r0
 80065c0:	f3c1 2007 	ubfx	r0, r1, #8, #8
 80065c4:	b2cc      	uxtb	r4, r1
 80065c6:	f858 5020 	ldr.w	r5, [r8, r0, lsl #2]
 80065ca:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 80065ce:	f3c1 4007 	ubfx	r0, r1, #16, #8
 80065d2:	0e09      	lsrs	r1, r1, #24
 80065d4:	4426      	add	r6, r4
 80065d6:	f858 4020 	ldr.w	r4, [r8, r0, lsl #2]
 80065da:	f858 7021 	ldr.w	r7, [r8, r1, lsl #2]
 80065de:	b2d0      	uxtb	r0, r2
 80065e0:	eb05 2596 	add.w	r5, r5, r6, lsr #10
 80065e4:	eb04 2b95 	add.w	fp, r4, r5, lsr #10
 80065e8:	f3c2 2107 	ubfx	r1, r2, #8, #8
 80065ec:	f858 4020 	ldr.w	r4, [r8, r0, lsl #2]
 80065f0:	f858 1021 	ldr.w	r1, [r8, r1, lsl #2]
 80065f4:	eb07 279b 	add.w	r7, r7, fp, lsr #10
 80065f8:	f3c2 4007 	ubfx	r0, r2, #16, #8
 80065fc:	0e12      	lsrs	r2, r2, #24
 80065fe:	eb04 2497 	add.w	r4, r4, r7, lsr #10
 8006602:	9701      	str	r7, [sp, #4]
 8006604:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 8006608:	4627      	mov	r7, r4
 800660a:	f858 4022 	ldr.w	r4, [r8, r2, lsl #2]
 800660e:	9702      	str	r7, [sp, #8]
 8006610:	b2da      	uxtb	r2, r3
 8006612:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 8006616:	eb00 2c91 	add.w	ip, r0, r1, lsr #10
 800661a:	f858 0022 	ldr.w	r0, [r8, r2, lsl #2]
 800661e:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 8006622:	eb00 2e94 	add.w	lr, r0, r4, lsr #10
 8006626:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800662a:	f3c3 4007 	ubfx	r0, r3, #16, #8
 800662e:	0e1b      	lsrs	r3, r3, #24
 8006630:	f858 7020 	ldr.w	r7, [r8, r0, lsl #2]
 8006634:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 8006638:	f858 0023 	ldr.w	r0, [r8, r3, lsl #2]
 800663c:	fa5f f38a 	uxtb.w	r3, sl
 8006640:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8006644:	960a      	str	r6, [sp, #40]	; 0x28
 8006646:	eb02 229e 	add.w	r2, r2, lr, lsr #10
 800664a:	f858 6023 	ldr.w	r6, [r8, r3, lsl #2]
 800664e:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8006652:	f3ca 2307 	ubfx	r3, sl, #8, #8
 8006656:	950b      	str	r5, [sp, #44]	; 0x2c
 8006658:	eb07 2792 	add.w	r7, r7, r2, lsr #10
 800665c:	f3ca 4507 	ubfx	r5, sl, #16, #8
 8006660:	eb00 2097 	add.w	r0, r0, r7, lsr #10
 8006664:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8006668:	f858 5025 	ldr.w	r5, [r8, r5, lsl #2]
 800666c:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 8006670:	eb06 2690 	add.w	r6, r6, r0, lsr #10
 8006674:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 8006678:	f858 a02a 	ldr.w	sl, [r8, sl, lsl #2]
 800667c:	9308      	str	r3, [sp, #32]
 800667e:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 8006682:	9b01      	ldr	r3, [sp, #4]
 8006684:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 8006688:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800668c:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8006690:	9b02      	ldr	r3, [sp, #8]
 8006692:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006696:	9302      	str	r3, [sp, #8]
 8006698:	9b08      	ldr	r3, [sp, #32]
 800669a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800669e:	9308      	str	r3, [sp, #32]
 80066a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80066a2:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80066a6:	950c      	str	r5, [sp, #48]	; 0x30
 80066a8:	461d      	mov	r5, r3
 80066aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066ac:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 80066b0:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80066b4:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 80066b8:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 80066bc:	9301      	str	r3, [sp, #4]
 80066be:	9b02      	ldr	r3, [sp, #8]
 80066c0:	9202      	str	r2, [sp, #8]
 80066c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80066c4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80066c6:	f3c7 0709 	ubfx	r7, r7, #0, #10
 80066ca:	f3c0 0009 	ubfx	r0, r0, #0, #10
 80066ce:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80066d2:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80066d6:	f3c2 0709 	ubfx	r7, r2, #0, #10
 80066da:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80066de:	ea47 4505 	orr.w	r5, r7, r5, lsl #16
 80066e2:	9b08      	ldr	r3, [sp, #32]
 80066e4:	9f01      	ldr	r7, [sp, #4]
 80066e6:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 80066ea:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 80066ee:	f3c6 0609 	ubfx	r6, r6, #0, #10
 80066f2:	f3c4 0409 	ubfx	r4, r4, #0, #10
 80066f6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80066fa:	46be      	mov	lr, r7
 80066fc:	0a96      	lsrs	r6, r2, #10
 80066fe:	ea4a 4a0b 	orr.w	sl, sl, fp, lsl #16
 8006702:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 8006706:	4f49      	ldr	r7, [pc, #292]	; (800682c <D128_1CH_HTONS_VOL_HP+0x2c8>)
 8006708:	9a04      	ldr	r2, [sp, #16]
 800670a:	fb2e 2e07 	smlad	lr, lr, r7, r2
 800670e:	4a48      	ldr	r2, [pc, #288]	; (8006830 <D128_1CH_HTONS_VOL_HP+0x2cc>)
 8006710:	fb2a ee02 	smlad	lr, sl, r2, lr
 8006714:	4a47      	ldr	r2, [pc, #284]	; (8006834 <D128_1CH_HTONS_VOL_HP+0x2d0>)
 8006716:	fb21 ee02 	smlad	lr, r1, r2, lr
 800671a:	4a47      	ldr	r2, [pc, #284]	; (8006838 <D128_1CH_HTONS_VOL_HP+0x2d4>)
 800671c:	fb24 ee02 	smlad	lr, r4, r2, lr
 8006720:	4a46      	ldr	r2, [pc, #280]	; (800683c <D128_1CH_HTONS_VOL_HP+0x2d8>)
 8006722:	9f02      	ldr	r7, [sp, #8]
 8006724:	fb27 ee02 	smlad	lr, r7, r2, lr
 8006728:	4a45      	ldr	r2, [pc, #276]	; (8006840 <D128_1CH_HTONS_VOL_HP+0x2dc>)
 800672a:	fb20 ee02 	smlad	lr, r0, r2, lr
 800672e:	4a45      	ldr	r2, [pc, #276]	; (8006844 <D128_1CH_HTONS_VOL_HP+0x2e0>)
 8006730:	fb23 e702 	smlad	r7, r3, r2, lr
 8006734:	f44f 3e80 	mov.w	lr, #65536	; 0x10000
 8006738:	fb25 7e0e 	smlad	lr, r5, lr, r7
 800673c:	9f01      	ldr	r7, [sp, #4]
 800673e:	4a42      	ldr	r2, [pc, #264]	; (8006848 <D128_1CH_HTONS_VOL_HP+0x2e4>)
 8006740:	46bc      	mov	ip, r7
 8006742:	9f05      	ldr	r7, [sp, #20]
 8006744:	fb2c 7c02 	smlad	ip, ip, r2, r7
 8006748:	4a40      	ldr	r2, [pc, #256]	; (800684c <D128_1CH_HTONS_VOL_HP+0x2e8>)
 800674a:	fb2a cc02 	smlad	ip, sl, r2, ip
 800674e:	4f40      	ldr	r7, [pc, #256]	; (8006850 <D128_1CH_HTONS_VOL_HP+0x2ec>)
 8006750:	fb21 cc07 	smlad	ip, r1, r7, ip
 8006754:	4f3f      	ldr	r7, [pc, #252]	; (8006854 <D128_1CH_HTONS_VOL_HP+0x2f0>)
 8006756:	fb24 cc07 	smlad	ip, r4, r7, ip
 800675a:	4f3f      	ldr	r7, [pc, #252]	; (8006858 <D128_1CH_HTONS_VOL_HP+0x2f4>)
 800675c:	9a02      	ldr	r2, [sp, #8]
 800675e:	fb22 cc07 	smlad	ip, r2, r7, ip
 8006762:	4f3e      	ldr	r7, [pc, #248]	; (800685c <D128_1CH_HTONS_VOL_HP+0x2f8>)
 8006764:	fb20 cc07 	smlad	ip, r0, r7, ip
 8006768:	4f3d      	ldr	r7, [pc, #244]	; (8006860 <D128_1CH_HTONS_VOL_HP+0x2fc>)
 800676a:	fb23 c707 	smlad	r7, r3, r7, ip
 800676e:	f8df c114 	ldr.w	ip, [pc, #276]	; 8006884 <D128_1CH_HTONS_VOL_HP+0x320>
 8006772:	fb25 720c 	smlad	r2, r5, ip, r7
 8006776:	f04f 0b01 	mov.w	fp, #1
 800677a:	9204      	str	r2, [sp, #16]
 800677c:	9f01      	ldr	r7, [sp, #4]
 800677e:	fb27 fb0b 	smuad	fp, r7, fp
 8006782:	4f38      	ldr	r7, [pc, #224]	; (8006864 <D128_1CH_HTONS_VOL_HP+0x300>)
 8006784:	fb2a ba07 	smlad	sl, sl, r7, fp
 8006788:	4f37      	ldr	r7, [pc, #220]	; (8006868 <D128_1CH_HTONS_VOL_HP+0x304>)
 800678a:	fb21 aa07 	smlad	sl, r1, r7, sl
 800678e:	4f37      	ldr	r7, [pc, #220]	; (800686c <D128_1CH_HTONS_VOL_HP+0x308>)
 8006790:	fb24 aa07 	smlad	sl, r4, r7, sl
 8006794:	4f36      	ldr	r7, [pc, #216]	; (8006870 <D128_1CH_HTONS_VOL_HP+0x30c>)
 8006796:	9a02      	ldr	r2, [sp, #8]
 8006798:	fb22 a707 	smlad	r7, r2, r7, sl
 800679c:	4a35      	ldr	r2, [pc, #212]	; (8006874 <D128_1CH_HTONS_VOL_HP+0x310>)
 800679e:	fb20 7702 	smlad	r7, r0, r2, r7
 80067a2:	4a35      	ldr	r2, [pc, #212]	; (8006878 <D128_1CH_HTONS_VOL_HP+0x314>)
 80067a4:	fb23 7702 	smlad	r7, r3, r2, r7
 80067a8:	4b34      	ldr	r3, [pc, #208]	; (800687c <D128_1CH_HTONS_VOL_HP+0x318>)
 80067aa:	fb25 7303 	smlad	r3, r5, r3, r7
 80067ae:	9305      	str	r3, [sp, #20]
 80067b0:	9b03      	ldr	r3, [sp, #12]
 80067b2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80067b4:	f5ae 1e80 	sub.w	lr, lr, #1048576	; 0x100000
 80067b8:	4473      	add	r3, lr
 80067ba:	461a      	mov	r2, r3
 80067bc:	9b06      	ldr	r3, [sp, #24]
 80067be:	f8cd e018 	str.w	lr, [sp, #24]
 80067c2:	1ad2      	subs	r2, r2, r3
 80067c4:	17d1      	asrs	r1, r2, #31
 80067c6:	fba2 2304 	umull	r2, r3, r2, r4
 80067ca:	fb04 3301 	mla	r3, r4, r1, r3
 80067ce:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 80067d2:	f143 0300 	adc.w	r3, r3, #0
 80067d6:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80067d8:	021a      	lsls	r2, r3, #8
 80067da:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80067de:	2100      	movs	r1, #0
 80067e0:	fbc4 0102 	smlal	r0, r1, r4, r2
 80067e4:	108a      	asrs	r2, r1, #2
 80067e6:	9907      	ldr	r1, [sp, #28]
 80067e8:	f302 020f 	ssat	r2, #16, r2
 80067ec:	005b      	lsls	r3, r3, #1
 80067ee:	f821 2b02 	strh.w	r2, [r1], #2
 80067f2:	9303      	str	r3, [sp, #12]
 80067f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80067f6:	9107      	str	r1, [sp, #28]
 80067f8:	4299      	cmp	r1, r3
 80067fa:	f109 0910 	add.w	r9, r9, #16
 80067fe:	f47f aed5 	bne.w	80065ac <D128_1CH_HTONS_VOL_HP+0x48>
 8006802:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006804:	9905      	ldr	r1, [sp, #20]
 8006806:	6091      	str	r1, [r2, #8]
 8006808:	9904      	ldr	r1, [sp, #16]
 800680a:	60d1      	str	r1, [r2, #12]
 800680c:	4613      	mov	r3, r2
 800680e:	61d6      	str	r6, [r2, #28]
 8006810:	9910      	ldr	r1, [sp, #64]	; 0x40
 8006812:	9a03      	ldr	r2, [sp, #12]
 8006814:	611a      	str	r2, [r3, #16]
 8006816:	2000      	movs	r0, #0
 8006818:	f8c3 e014 	str.w	lr, [r3, #20]
 800681c:	6199      	str	r1, [r3, #24]
 800681e:	b013      	add	sp, #76	; 0x4c
 8006820:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006824:	f8dd e018 	ldr.w	lr, [sp, #24]
 8006828:	e7eb      	b.n	8006802 <D128_1CH_HTONS_VOL_HP+0x29e>
 800682a:	bf00      	nop
 800682c:	00780069 	.word	0x00780069
 8006830:	005b004e 	.word	0x005b004e
 8006834:	00420037 	.word	0x00420037
 8006838:	002d0024 	.word	0x002d0024
 800683c:	001c0015 	.word	0x001c0015
 8006840:	000f000a 	.word	0x000f000a
 8006844:	00060003 	.word	0x00060003
 8006848:	00880096 	.word	0x00880096
 800684c:	00a200ac 	.word	0x00a200ac
 8006850:	00b400ba 	.word	0x00b400ba
 8006854:	00be00c0 	.word	0x00be00c0
 8006858:	00c000be 	.word	0x00c000be
 800685c:	00ba00b4 	.word	0x00ba00b4
 8006860:	00ac00a2 	.word	0x00ac00a2
 8006864:	00030006 	.word	0x00030006
 8006868:	000a000f 	.word	0x000a000f
 800686c:	0015001c 	.word	0x0015001c
 8006870:	0024002d 	.word	0x0024002d
 8006874:	00370042 	.word	0x00370042
 8006878:	004e005b 	.word	0x004e005b
 800687c:	00690078 	.word	0x00690078
 8006880:	20000000 	.word	0x20000000
 8006884:	00960088 	.word	0x00960088

08006888 <PDM_Filter_Init>:
 8006888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800688a:	2240      	movs	r2, #64	; 0x40
 800688c:	4604      	mov	r4, r0
 800688e:	2100      	movs	r1, #0
 8006890:	300c      	adds	r0, #12
 8006892:	f000 f9f9 	bl	8006c88 <memset>
 8006896:	493b      	ldr	r1, [pc, #236]	; (8006984 <PDM_Filter_Init+0xfc>)
 8006898:	483b      	ldr	r0, [pc, #236]	; (8006988 <PDM_Filter_Init+0x100>)
 800689a:	f000 f98d 	bl	8006bb8 <CRC_Lock>
 800689e:	8822      	ldrh	r2, [r4, #0]
 80068a0:	8963      	ldrh	r3, [r4, #10]
 80068a2:	4938      	ldr	r1, [pc, #224]	; (8006984 <PDM_Filter_Init+0xfc>)
 80068a4:	8925      	ldrh	r5, [r4, #8]
 80068a6:	86a3      	strh	r3, [r4, #52]	; 0x34
 80068a8:	2801      	cmp	r0, #1
 80068aa:	f04f 0300 	mov.w	r3, #0
 80068ae:	bf18      	it	ne
 80068b0:	2100      	movne	r1, #0
 80068b2:	2a01      	cmp	r2, #1
 80068b4:	6461      	str	r1, [r4, #68]	; 0x44
 80068b6:	86e5      	strh	r5, [r4, #54]	; 0x36
 80068b8:	61a3      	str	r3, [r4, #24]
 80068ba:	6123      	str	r3, [r4, #16]
 80068bc:	6163      	str	r3, [r4, #20]
 80068be:	60e3      	str	r3, [r4, #12]
 80068c0:	6263      	str	r3, [r4, #36]	; 0x24
 80068c2:	61e3      	str	r3, [r4, #28]
 80068c4:	6223      	str	r3, [r4, #32]
 80068c6:	6423      	str	r3, [r4, #64]	; 0x40
 80068c8:	d918      	bls.n	80068fc <PDM_Filter_Init+0x74>
 80068ca:	2003      	movs	r0, #3
 80068cc:	2302      	movs	r3, #2
 80068ce:	8862      	ldrh	r2, [r4, #2]
 80068d0:	2a01      	cmp	r2, #1
 80068d2:	d91d      	bls.n	8006910 <PDM_Filter_Init+0x88>
 80068d4:	2140      	movs	r1, #64	; 0x40
 80068d6:	2300      	movs	r3, #0
 80068d8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80068da:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
 80068de:	6862      	ldr	r2, [r4, #4]
 80068e0:	bf04      	itt	eq
 80068e2:	6421      	streq	r1, [r4, #64]	; 0x40
 80068e4:	460b      	moveq	r3, r1
 80068e6:	b11a      	cbz	r2, 80068f0 <PDM_Filter_Init+0x68>
 80068e8:	f043 0310 	orr.w	r3, r3, #16
 80068ec:	6423      	str	r3, [r4, #64]	; 0x40
 80068ee:	62e2      	str	r2, [r4, #44]	; 0x2c
 80068f0:	2200      	movs	r2, #0
 80068f2:	8722      	strh	r2, [r4, #56]	; 0x38
 80068f4:	b908      	cbnz	r0, 80068fa <PDM_Filter_Init+0x72>
 80068f6:	3380      	adds	r3, #128	; 0x80
 80068f8:	6423      	str	r3, [r4, #64]	; 0x40
 80068fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068fc:	4d23      	ldr	r5, [pc, #140]	; (800698c <PDM_Filter_Init+0x104>)
 80068fe:	d010      	beq.n	8006922 <PDM_Filter_Init+0x9a>
 8006900:	782a      	ldrb	r2, [r5, #0]
 8006902:	2a01      	cmp	r2, #1
 8006904:	d027      	beq.n	8006956 <PDM_Filter_Init+0xce>
 8006906:	8862      	ldrh	r2, [r4, #2]
 8006908:	2a01      	cmp	r2, #1
 800690a:	f04f 0001 	mov.w	r0, #1
 800690e:	d8e1      	bhi.n	80068d4 <PDM_Filter_Init+0x4c>
 8006910:	d001      	beq.n	8006916 <PDM_Filter_Init+0x8e>
 8006912:	4618      	mov	r0, r3
 8006914:	e7de      	b.n	80068d4 <PDM_Filter_Init+0x4c>
 8006916:	2220      	movs	r2, #32
 8006918:	4618      	mov	r0, r3
 800691a:	6422      	str	r2, [r4, #64]	; 0x40
 800691c:	4613      	mov	r3, r2
 800691e:	2160      	movs	r1, #96	; 0x60
 8006920:	e7da      	b.n	80068d8 <PDM_Filter_Init+0x50>
 8006922:	7829      	ldrb	r1, [r5, #0]
 8006924:	2900      	cmp	r1, #0
 8006926:	d1ee      	bne.n	8006906 <PDM_Filter_Init+0x7e>
 8006928:	4919      	ldr	r1, [pc, #100]	; (8006990 <PDM_Filter_Init+0x108>)
 800692a:	f8df e06c 	ldr.w	lr, [pc, #108]	; 8006998 <PDM_Filter_Init+0x110>
 800692e:	4f19      	ldr	r7, [pc, #100]	; (8006994 <PDM_Filter_Init+0x10c>)
 8006930:	f501 6680 	add.w	r6, r1, #1024	; 0x400
 8006934:	684a      	ldr	r2, [r1, #4]
 8006936:	ea0e 5302 	and.w	r3, lr, r2, lsl #20
 800693a:	ea02 0007 	and.w	r0, r2, r7
 800693e:	4303      	orrs	r3, r0
 8006940:	f3c2 5209 	ubfx	r2, r2, #20, #10
 8006944:	4413      	add	r3, r2
 8006946:	f841 3f04 	str.w	r3, [r1, #4]!
 800694a:	428e      	cmp	r6, r1
 800694c:	d1f2      	bne.n	8006934 <PDM_Filter_Init+0xac>
 800694e:	2001      	movs	r0, #1
 8006950:	7028      	strb	r0, [r5, #0]
 8006952:	2300      	movs	r3, #0
 8006954:	e7bb      	b.n	80068ce <PDM_Filter_Init+0x46>
 8006956:	490e      	ldr	r1, [pc, #56]	; (8006990 <PDM_Filter_Init+0x108>)
 8006958:	f8df e03c 	ldr.w	lr, [pc, #60]	; 8006998 <PDM_Filter_Init+0x110>
 800695c:	4f0d      	ldr	r7, [pc, #52]	; (8006994 <PDM_Filter_Init+0x10c>)
 800695e:	f501 6680 	add.w	r6, r1, #1024	; 0x400
 8006962:	684a      	ldr	r2, [r1, #4]
 8006964:	ea0e 5302 	and.w	r3, lr, r2, lsl #20
 8006968:	ea02 0007 	and.w	r0, r2, r7
 800696c:	4303      	orrs	r3, r0
 800696e:	f3c2 5209 	ubfx	r2, r2, #20, #10
 8006972:	4413      	add	r3, r2
 8006974:	f841 3f04 	str.w	r3, [r1, #4]!
 8006978:	428e      	cmp	r6, r1
 800697a:	d1f2      	bne.n	8006962 <PDM_Filter_Init+0xda>
 800697c:	2300      	movs	r3, #0
 800697e:	702b      	strb	r3, [r5, #0]
 8006980:	e7c1      	b.n	8006906 <PDM_Filter_Init+0x7e>
 8006982:	bf00      	nop
 8006984:	b5e8b5cd 	.word	0xb5e8b5cd
 8006988:	f407a5c2 	.word	0xf407a5c2
 800698c:	200005f8 	.word	0x200005f8
 8006990:	1ffffffc 	.word	0x1ffffffc
 8006994:	000ffc00 	.word	0x000ffc00
 8006998:	3ff00000 	.word	0x3ff00000

0800699c <PDM_Filter_setConfig>:
 800699c:	4b66      	ldr	r3, [pc, #408]	; (8006b38 <PDM_Filter_setConfig+0x19c>)
 800699e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80069a0:	429a      	cmp	r2, r3
 80069a2:	d001      	beq.n	80069a8 <PDM_Filter_setConfig+0xc>
 80069a4:	2004      	movs	r0, #4
 80069a6:	4770      	bx	lr
 80069a8:	b530      	push	{r4, r5, lr}
 80069aa:	880a      	ldrh	r2, [r1, #0]
 80069ac:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80069ae:	ed2d 8b04 	vpush	{d8-d9}
 80069b2:	4604      	mov	r4, r0
 80069b4:	460d      	mov	r5, r1
 80069b6:	1e51      	subs	r1, r2, #1
 80069b8:	f423 7080 	bic.w	r0, r3, #256	; 0x100
 80069bc:	2906      	cmp	r1, #6
 80069be:	b083      	sub	sp, #12
 80069c0:	6420      	str	r0, [r4, #64]	; 0x40
 80069c2:	d91a      	bls.n	80069fa <PDM_Filter_setConfig+0x5e>
 80069c4:	2008      	movs	r0, #8
 80069c6:	f9b4 1038 	ldrsh.w	r1, [r4, #56]	; 0x38
 80069ca:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 80069ce:	4299      	cmp	r1, r3
 80069d0:	d07e      	beq.n	8006ad0 <PDM_Filter_setConfig+0x134>
 80069d2:	f113 0f0c 	cmn.w	r3, #12
 80069d6:	da2a      	bge.n	8006a2e <PDM_Filter_setConfig+0x92>
 80069d8:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 80069dc:	3040      	adds	r0, #64	; 0x40
 80069de:	80ab      	strh	r3, [r5, #4]
 80069e0:	8622      	strh	r2, [r4, #48]	; 0x30
 80069e2:	886b      	ldrh	r3, [r5, #2]
 80069e4:	8663      	strh	r3, [r4, #50]	; 0x32
 80069e6:	b920      	cbnz	r0, 80069f2 <PDM_Filter_setConfig+0x56>
 80069e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80069ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069ee:	6423      	str	r3, [r4, #64]	; 0x40
 80069f0:	2000      	movs	r0, #0
 80069f2:	b003      	add	sp, #12
 80069f4:	ecbd 8b04 	vpop	{d8-d9}
 80069f8:	bd30      	pop	{r4, r5, pc}
 80069fa:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 80069fc:	4291      	cmp	r1, r2
 80069fe:	d06c      	beq.n	8006ada <PDM_Filter_setConfig+0x13e>
 8006a00:	f423 7387 	bic.w	r3, r3, #270	; 0x10e
 8006a04:	f023 0301 	bic.w	r3, r3, #1
 8006a08:	4313      	orrs	r3, r2
 8006a0a:	f003 0170 	and.w	r1, r3, #112	; 0x70
 8006a0e:	6423      	str	r3, [r4, #64]	; 0x40
 8006a10:	2970      	cmp	r1, #112	; 0x70
 8006a12:	f003 030f 	and.w	r3, r3, #15
 8006a16:	f103 33ff 	add.w	r3, r3, #4294967295
 8006a1a:	d066      	beq.n	8006aea <PDM_Filter_setConfig+0x14e>
 8006a1c:	2b06      	cmp	r3, #6
 8006a1e:	f200 8089 	bhi.w	8006b34 <PDM_Filter_setConfig+0x198>
 8006a22:	e8df f003 	tbb	[pc, r3]
 8006a26:	4f52      	.short	0x4f52
 8006a28:	3d43494c 	.word	0x3d43494c
 8006a2c:	46          	.byte	0x46
 8006a2d:	00          	.byte	0x00
 8006a2e:	2b33      	cmp	r3, #51	; 0x33
 8006a30:	dc32      	bgt.n	8006a98 <PDM_Filter_setConfig+0xfc>
 8006a32:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8006a34:	f002 020f 	and.w	r2, r2, #15
 8006a38:	3a01      	subs	r2, #1
 8006a3a:	2a06      	cmp	r2, #6
 8006a3c:	d872      	bhi.n	8006b24 <PDM_Filter_setConfig+0x188>
 8006a3e:	493f      	ldr	r1, [pc, #252]	; (8006b3c <PDM_Filter_setConfig+0x1a0>)
 8006a40:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8006a44:	ed92 9a00 	vldr	s18, [r2]
 8006a48:	ed92 8a07 	vldr	s16, [r2, #28]
 8006a4c:	9001      	str	r0, [sp, #4]
 8006a4e:	ee07 3a90 	vmov	s15, r3
 8006a52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006a56:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 8006a5a:	eec7 0aa0 	vdiv.f32	s1, s15, s1
 8006a5e:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8006a62:	f002 fe6d 	bl	8009740 <powf>
 8006a66:	eddf 0a36 	vldr	s1, [pc, #216]	; 8006b40 <PDM_Filter_setConfig+0x1a4>
 8006a6a:	eef0 8a40 	vmov.f32	s17, s0
 8006a6e:	ee70 0ac9 	vsub.f32	s1, s1, s18
 8006a72:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8006a76:	f002 fe63 	bl	8009740 <powf>
 8006a7a:	ee28 8a28 	vmul.f32	s16, s16, s17
 8006a7e:	ee28 0a00 	vmul.f32	s0, s16, s0
 8006a82:	f002 fe39 	bl	80096f8 <roundf>
 8006a86:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8006a8a:	88ab      	ldrh	r3, [r5, #4]
 8006a8c:	882a      	ldrh	r2, [r5, #0]
 8006a8e:	9801      	ldr	r0, [sp, #4]
 8006a90:	ed84 0a0f 	vstr	s0, [r4, #60]	; 0x3c
 8006a94:	8723      	strh	r3, [r4, #56]	; 0x38
 8006a96:	e7a3      	b.n	80069e0 <PDM_Filter_setConfig+0x44>
 8006a98:	2333      	movs	r3, #51	; 0x33
 8006a9a:	3040      	adds	r0, #64	; 0x40
 8006a9c:	80ab      	strh	r3, [r5, #4]
 8006a9e:	e79f      	b.n	80069e0 <PDM_Filter_setConfig+0x44>
 8006aa0:	4b28      	ldr	r3, [pc, #160]	; (8006b44 <PDM_Filter_setConfig+0x1a8>)
 8006aa2:	64a3      	str	r3, [r4, #72]	; 0x48
 8006aa4:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8006aa8:	2000      	movs	r0, #0
 8006aaa:	e792      	b.n	80069d2 <PDM_Filter_setConfig+0x36>
 8006aac:	4b26      	ldr	r3, [pc, #152]	; (8006b48 <PDM_Filter_setConfig+0x1ac>)
 8006aae:	64a3      	str	r3, [r4, #72]	; 0x48
 8006ab0:	e7f8      	b.n	8006aa4 <PDM_Filter_setConfig+0x108>
 8006ab2:	4b26      	ldr	r3, [pc, #152]	; (8006b4c <PDM_Filter_setConfig+0x1b0>)
 8006ab4:	64a3      	str	r3, [r4, #72]	; 0x48
 8006ab6:	e7f5      	b.n	8006aa4 <PDM_Filter_setConfig+0x108>
 8006ab8:	4b25      	ldr	r3, [pc, #148]	; (8006b50 <PDM_Filter_setConfig+0x1b4>)
 8006aba:	64a3      	str	r3, [r4, #72]	; 0x48
 8006abc:	e7f2      	b.n	8006aa4 <PDM_Filter_setConfig+0x108>
 8006abe:	4b25      	ldr	r3, [pc, #148]	; (8006b54 <PDM_Filter_setConfig+0x1b8>)
 8006ac0:	64a3      	str	r3, [r4, #72]	; 0x48
 8006ac2:	e7ef      	b.n	8006aa4 <PDM_Filter_setConfig+0x108>
 8006ac4:	4b24      	ldr	r3, [pc, #144]	; (8006b58 <PDM_Filter_setConfig+0x1bc>)
 8006ac6:	64a3      	str	r3, [r4, #72]	; 0x48
 8006ac8:	e7ec      	b.n	8006aa4 <PDM_Filter_setConfig+0x108>
 8006aca:	4b24      	ldr	r3, [pc, #144]	; (8006b5c <PDM_Filter_setConfig+0x1c0>)
 8006acc:	64a3      	str	r3, [r4, #72]	; 0x48
 8006ace:	e7e9      	b.n	8006aa4 <PDM_Filter_setConfig+0x108>
 8006ad0:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 8006ad2:	4291      	cmp	r1, r2
 8006ad4:	f47f af7d 	bne.w	80069d2 <PDM_Filter_setConfig+0x36>
 8006ad8:	e783      	b.n	80069e2 <PDM_Filter_setConfig+0x46>
 8006ada:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8006ade:	f9b4 1038 	ldrsh.w	r1, [r4, #56]	; 0x38
 8006ae2:	4299      	cmp	r1, r3
 8006ae4:	d023      	beq.n	8006b2e <PDM_Filter_setConfig+0x192>
 8006ae6:	2000      	movs	r0, #0
 8006ae8:	e773      	b.n	80069d2 <PDM_Filter_setConfig+0x36>
 8006aea:	2b06      	cmp	r3, #6
 8006aec:	d822      	bhi.n	8006b34 <PDM_Filter_setConfig+0x198>
 8006aee:	e8df f003 	tbb	[pc, r3]
 8006af2:	1316      	.short	0x1316
 8006af4:	070a0d10 	.word	0x070a0d10
 8006af8:	04          	.byte	0x04
 8006af9:	00          	.byte	0x00
 8006afa:	4b19      	ldr	r3, [pc, #100]	; (8006b60 <PDM_Filter_setConfig+0x1c4>)
 8006afc:	64a3      	str	r3, [r4, #72]	; 0x48
 8006afe:	e7d1      	b.n	8006aa4 <PDM_Filter_setConfig+0x108>
 8006b00:	4b18      	ldr	r3, [pc, #96]	; (8006b64 <PDM_Filter_setConfig+0x1c8>)
 8006b02:	64a3      	str	r3, [r4, #72]	; 0x48
 8006b04:	e7ce      	b.n	8006aa4 <PDM_Filter_setConfig+0x108>
 8006b06:	4b18      	ldr	r3, [pc, #96]	; (8006b68 <PDM_Filter_setConfig+0x1cc>)
 8006b08:	64a3      	str	r3, [r4, #72]	; 0x48
 8006b0a:	e7cb      	b.n	8006aa4 <PDM_Filter_setConfig+0x108>
 8006b0c:	4b17      	ldr	r3, [pc, #92]	; (8006b6c <PDM_Filter_setConfig+0x1d0>)
 8006b0e:	64a3      	str	r3, [r4, #72]	; 0x48
 8006b10:	e7c8      	b.n	8006aa4 <PDM_Filter_setConfig+0x108>
 8006b12:	4b17      	ldr	r3, [pc, #92]	; (8006b70 <PDM_Filter_setConfig+0x1d4>)
 8006b14:	64a3      	str	r3, [r4, #72]	; 0x48
 8006b16:	e7c5      	b.n	8006aa4 <PDM_Filter_setConfig+0x108>
 8006b18:	4b16      	ldr	r3, [pc, #88]	; (8006b74 <PDM_Filter_setConfig+0x1d8>)
 8006b1a:	64a3      	str	r3, [r4, #72]	; 0x48
 8006b1c:	e7c2      	b.n	8006aa4 <PDM_Filter_setConfig+0x108>
 8006b1e:	4b16      	ldr	r3, [pc, #88]	; (8006b78 <PDM_Filter_setConfig+0x1dc>)
 8006b20:	64a3      	str	r3, [r4, #72]	; 0x48
 8006b22:	e7bf      	b.n	8006aa4 <PDM_Filter_setConfig+0x108>
 8006b24:	ed9f 8a15 	vldr	s16, [pc, #84]	; 8006b7c <PDM_Filter_setConfig+0x1e0>
 8006b28:	eeb0 9a48 	vmov.f32	s18, s16
 8006b2c:	e78e      	b.n	8006a4c <PDM_Filter_setConfig+0xb0>
 8006b2e:	886b      	ldrh	r3, [r5, #2]
 8006b30:	8663      	strh	r3, [r4, #50]	; 0x32
 8006b32:	e759      	b.n	80069e8 <PDM_Filter_setConfig+0x4c>
 8006b34:	2000      	movs	r0, #0
 8006b36:	e746      	b.n	80069c6 <PDM_Filter_setConfig+0x2a>
 8006b38:	b5e8b5cd 	.word	0xb5e8b5cd
 8006b3c:	08009f1c 	.word	0x08009f1c
 8006b40:	42000000 	.word	0x42000000
 8006b44:	08004f09 	.word	0x08004f09
 8006b48:	08004de9 	.word	0x08004de9
 8006b4c:	08005099 	.word	0x08005099
 8006b50:	080058dd 	.word	0x080058dd
 8006b54:	0800563d 	.word	0x0800563d
 8006b58:	0800541d 	.word	0x0800541d
 8006b5c:	08005231 	.word	0x08005231
 8006b60:	08005ee9 	.word	0x08005ee9
 8006b64:	08005db1 	.word	0x08005db1
 8006b68:	08005ccd 	.word	0x08005ccd
 8006b6c:	08006565 	.word	0x08006565
 8006b70:	08006351 	.word	0x08006351
 8006b74:	08006199 	.word	0x08006199
 8006b78:	0800602d 	.word	0x0800602d
 8006b7c:	00000000 	.word	0x00000000

08006b80 <PDM_Filter>:
 8006b80:	b410      	push	{r4}
 8006b82:	4b0c      	ldr	r3, [pc, #48]	; (8006bb4 <PDM_Filter+0x34>)
 8006b84:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8006b86:	429c      	cmp	r4, r3
 8006b88:	d003      	beq.n	8006b92 <PDM_Filter+0x12>
 8006b8a:	2004      	movs	r0, #4
 8006b8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006b90:	4770      	bx	lr
 8006b92:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8006b94:	05dc      	lsls	r4, r3, #23
 8006b96:	d407      	bmi.n	8006ba8 <PDM_Filter+0x28>
 8006b98:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006b9c:	bf14      	ite	ne
 8006b9e:	2020      	movne	r0, #32
 8006ba0:	2030      	moveq	r0, #48	; 0x30
 8006ba2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006ba6:	4770      	bx	lr
 8006ba8:	6c93      	ldr	r3, [r2, #72]	; 0x48
 8006baa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006bae:	320c      	adds	r2, #12
 8006bb0:	4718      	bx	r3
 8006bb2:	bf00      	nop
 8006bb4:	b5e8b5cd 	.word	0xb5e8b5cd

08006bb8 <CRC_Lock>:
 8006bb8:	4a17      	ldr	r2, [pc, #92]	; (8006c18 <CRC_Lock+0x60>)
 8006bba:	6813      	ldr	r3, [r2, #0]
 8006bbc:	b410      	push	{r4}
 8006bbe:	f023 0301 	bic.w	r3, r3, #1
 8006bc2:	4c16      	ldr	r4, [pc, #88]	; (8006c1c <CRC_Lock+0x64>)
 8006bc4:	6013      	str	r3, [r2, #0]
 8006bc6:	6823      	ldr	r3, [r4, #0]
 8006bc8:	b933      	cbnz	r3, 8006bd8 <CRC_Lock+0x20>
 8006bca:	4b15      	ldr	r3, [pc, #84]	; (8006c20 <CRC_Lock+0x68>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006bd2:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8006bd6:	d00f      	beq.n	8006bf8 <CRC_Lock+0x40>
 8006bd8:	4a12      	ldr	r2, [pc, #72]	; (8006c24 <CRC_Lock+0x6c>)
 8006bda:	2301      	movs	r3, #1
 8006bdc:	6013      	str	r3, [r2, #0]
 8006bde:	6813      	ldr	r3, [r2, #0]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d1fc      	bne.n	8006bde <CRC_Lock+0x26>
 8006be4:	4b10      	ldr	r3, [pc, #64]	; (8006c28 <CRC_Lock+0x70>)
 8006be6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006bea:	6018      	str	r0, [r3, #0]
 8006bec:	6818      	ldr	r0, [r3, #0]
 8006bee:	1a08      	subs	r0, r1, r0
 8006bf0:	fab0 f080 	clz	r0, r0
 8006bf4:	0940      	lsrs	r0, r0, #5
 8006bf6:	4770      	bx	lr
 8006bf8:	4a0c      	ldr	r2, [pc, #48]	; (8006c2c <CRC_Lock+0x74>)
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	6013      	str	r3, [r2, #0]
 8006bfe:	6813      	ldr	r3, [r2, #0]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d1fc      	bne.n	8006bfe <CRC_Lock+0x46>
 8006c04:	4b0a      	ldr	r3, [pc, #40]	; (8006c30 <CRC_Lock+0x78>)
 8006c06:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006c0a:	6018      	str	r0, [r3, #0]
 8006c0c:	6818      	ldr	r0, [r3, #0]
 8006c0e:	1a40      	subs	r0, r0, r1
 8006c10:	fab0 f080 	clz	r0, r0
 8006c14:	0940      	lsrs	r0, r0, #5
 8006c16:	4770      	bx	lr
 8006c18:	e0002000 	.word	0xe0002000
 8006c1c:	e0042000 	.word	0xe0042000
 8006c20:	5c001000 	.word	0x5c001000
 8006c24:	40023008 	.word	0x40023008
 8006c28:	40023000 	.word	0x40023000
 8006c2c:	58024c08 	.word	0x58024c08
 8006c30:	58024c00 	.word	0x58024c00

08006c34 <__errno>:
 8006c34:	4b01      	ldr	r3, [pc, #4]	; (8006c3c <__errno+0x8>)
 8006c36:	6818      	ldr	r0, [r3, #0]
 8006c38:	4770      	bx	lr
 8006c3a:	bf00      	nop
 8006c3c:	2000040c 	.word	0x2000040c

08006c40 <__libc_init_array>:
 8006c40:	b570      	push	{r4, r5, r6, lr}
 8006c42:	4d0d      	ldr	r5, [pc, #52]	; (8006c78 <__libc_init_array+0x38>)
 8006c44:	4c0d      	ldr	r4, [pc, #52]	; (8006c7c <__libc_init_array+0x3c>)
 8006c46:	1b64      	subs	r4, r4, r5
 8006c48:	10a4      	asrs	r4, r4, #2
 8006c4a:	2600      	movs	r6, #0
 8006c4c:	42a6      	cmp	r6, r4
 8006c4e:	d109      	bne.n	8006c64 <__libc_init_array+0x24>
 8006c50:	4d0b      	ldr	r5, [pc, #44]	; (8006c80 <__libc_init_array+0x40>)
 8006c52:	4c0c      	ldr	r4, [pc, #48]	; (8006c84 <__libc_init_array+0x44>)
 8006c54:	f003 f946 	bl	8009ee4 <_init>
 8006c58:	1b64      	subs	r4, r4, r5
 8006c5a:	10a4      	asrs	r4, r4, #2
 8006c5c:	2600      	movs	r6, #0
 8006c5e:	42a6      	cmp	r6, r4
 8006c60:	d105      	bne.n	8006c6e <__libc_init_array+0x2e>
 8006c62:	bd70      	pop	{r4, r5, r6, pc}
 8006c64:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c68:	4798      	blx	r3
 8006c6a:	3601      	adds	r6, #1
 8006c6c:	e7ee      	b.n	8006c4c <__libc_init_array+0xc>
 8006c6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c72:	4798      	blx	r3
 8006c74:	3601      	adds	r6, #1
 8006c76:	e7f2      	b.n	8006c5e <__libc_init_array+0x1e>
 8006c78:	0800a36c 	.word	0x0800a36c
 8006c7c:	0800a36c 	.word	0x0800a36c
 8006c80:	0800a36c 	.word	0x0800a36c
 8006c84:	0800a370 	.word	0x0800a370

08006c88 <memset>:
 8006c88:	4402      	add	r2, r0
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d100      	bne.n	8006c92 <memset+0xa>
 8006c90:	4770      	bx	lr
 8006c92:	f803 1b01 	strb.w	r1, [r3], #1
 8006c96:	e7f9      	b.n	8006c8c <memset+0x4>

08006c98 <__cvt>:
 8006c98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006c9c:	ec55 4b10 	vmov	r4, r5, d0
 8006ca0:	2d00      	cmp	r5, #0
 8006ca2:	460e      	mov	r6, r1
 8006ca4:	4619      	mov	r1, r3
 8006ca6:	462b      	mov	r3, r5
 8006ca8:	bfbb      	ittet	lt
 8006caa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006cae:	461d      	movlt	r5, r3
 8006cb0:	2300      	movge	r3, #0
 8006cb2:	232d      	movlt	r3, #45	; 0x2d
 8006cb4:	700b      	strb	r3, [r1, #0]
 8006cb6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006cb8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006cbc:	4691      	mov	r9, r2
 8006cbe:	f023 0820 	bic.w	r8, r3, #32
 8006cc2:	bfbc      	itt	lt
 8006cc4:	4622      	movlt	r2, r4
 8006cc6:	4614      	movlt	r4, r2
 8006cc8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006ccc:	d005      	beq.n	8006cda <__cvt+0x42>
 8006cce:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006cd2:	d100      	bne.n	8006cd6 <__cvt+0x3e>
 8006cd4:	3601      	adds	r6, #1
 8006cd6:	2102      	movs	r1, #2
 8006cd8:	e000      	b.n	8006cdc <__cvt+0x44>
 8006cda:	2103      	movs	r1, #3
 8006cdc:	ab03      	add	r3, sp, #12
 8006cde:	9301      	str	r3, [sp, #4]
 8006ce0:	ab02      	add	r3, sp, #8
 8006ce2:	9300      	str	r3, [sp, #0]
 8006ce4:	ec45 4b10 	vmov	d0, r4, r5
 8006ce8:	4653      	mov	r3, sl
 8006cea:	4632      	mov	r2, r6
 8006cec:	f000 fce4 	bl	80076b8 <_dtoa_r>
 8006cf0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006cf4:	4607      	mov	r7, r0
 8006cf6:	d102      	bne.n	8006cfe <__cvt+0x66>
 8006cf8:	f019 0f01 	tst.w	r9, #1
 8006cfc:	d022      	beq.n	8006d44 <__cvt+0xac>
 8006cfe:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006d02:	eb07 0906 	add.w	r9, r7, r6
 8006d06:	d110      	bne.n	8006d2a <__cvt+0x92>
 8006d08:	783b      	ldrb	r3, [r7, #0]
 8006d0a:	2b30      	cmp	r3, #48	; 0x30
 8006d0c:	d10a      	bne.n	8006d24 <__cvt+0x8c>
 8006d0e:	2200      	movs	r2, #0
 8006d10:	2300      	movs	r3, #0
 8006d12:	4620      	mov	r0, r4
 8006d14:	4629      	mov	r1, r5
 8006d16:	f7f9 fed7 	bl	8000ac8 <__aeabi_dcmpeq>
 8006d1a:	b918      	cbnz	r0, 8006d24 <__cvt+0x8c>
 8006d1c:	f1c6 0601 	rsb	r6, r6, #1
 8006d20:	f8ca 6000 	str.w	r6, [sl]
 8006d24:	f8da 3000 	ldr.w	r3, [sl]
 8006d28:	4499      	add	r9, r3
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	4620      	mov	r0, r4
 8006d30:	4629      	mov	r1, r5
 8006d32:	f7f9 fec9 	bl	8000ac8 <__aeabi_dcmpeq>
 8006d36:	b108      	cbz	r0, 8006d3c <__cvt+0xa4>
 8006d38:	f8cd 900c 	str.w	r9, [sp, #12]
 8006d3c:	2230      	movs	r2, #48	; 0x30
 8006d3e:	9b03      	ldr	r3, [sp, #12]
 8006d40:	454b      	cmp	r3, r9
 8006d42:	d307      	bcc.n	8006d54 <__cvt+0xbc>
 8006d44:	9b03      	ldr	r3, [sp, #12]
 8006d46:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006d48:	1bdb      	subs	r3, r3, r7
 8006d4a:	4638      	mov	r0, r7
 8006d4c:	6013      	str	r3, [r2, #0]
 8006d4e:	b004      	add	sp, #16
 8006d50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d54:	1c59      	adds	r1, r3, #1
 8006d56:	9103      	str	r1, [sp, #12]
 8006d58:	701a      	strb	r2, [r3, #0]
 8006d5a:	e7f0      	b.n	8006d3e <__cvt+0xa6>

08006d5c <__exponent>:
 8006d5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006d5e:	4603      	mov	r3, r0
 8006d60:	2900      	cmp	r1, #0
 8006d62:	bfb8      	it	lt
 8006d64:	4249      	neglt	r1, r1
 8006d66:	f803 2b02 	strb.w	r2, [r3], #2
 8006d6a:	bfb4      	ite	lt
 8006d6c:	222d      	movlt	r2, #45	; 0x2d
 8006d6e:	222b      	movge	r2, #43	; 0x2b
 8006d70:	2909      	cmp	r1, #9
 8006d72:	7042      	strb	r2, [r0, #1]
 8006d74:	dd2a      	ble.n	8006dcc <__exponent+0x70>
 8006d76:	f10d 0407 	add.w	r4, sp, #7
 8006d7a:	46a4      	mov	ip, r4
 8006d7c:	270a      	movs	r7, #10
 8006d7e:	46a6      	mov	lr, r4
 8006d80:	460a      	mov	r2, r1
 8006d82:	fb91 f6f7 	sdiv	r6, r1, r7
 8006d86:	fb07 1516 	mls	r5, r7, r6, r1
 8006d8a:	3530      	adds	r5, #48	; 0x30
 8006d8c:	2a63      	cmp	r2, #99	; 0x63
 8006d8e:	f104 34ff 	add.w	r4, r4, #4294967295
 8006d92:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006d96:	4631      	mov	r1, r6
 8006d98:	dcf1      	bgt.n	8006d7e <__exponent+0x22>
 8006d9a:	3130      	adds	r1, #48	; 0x30
 8006d9c:	f1ae 0502 	sub.w	r5, lr, #2
 8006da0:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006da4:	1c44      	adds	r4, r0, #1
 8006da6:	4629      	mov	r1, r5
 8006da8:	4561      	cmp	r1, ip
 8006daa:	d30a      	bcc.n	8006dc2 <__exponent+0x66>
 8006dac:	f10d 0209 	add.w	r2, sp, #9
 8006db0:	eba2 020e 	sub.w	r2, r2, lr
 8006db4:	4565      	cmp	r5, ip
 8006db6:	bf88      	it	hi
 8006db8:	2200      	movhi	r2, #0
 8006dba:	4413      	add	r3, r2
 8006dbc:	1a18      	subs	r0, r3, r0
 8006dbe:	b003      	add	sp, #12
 8006dc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006dc2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006dc6:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006dca:	e7ed      	b.n	8006da8 <__exponent+0x4c>
 8006dcc:	2330      	movs	r3, #48	; 0x30
 8006dce:	3130      	adds	r1, #48	; 0x30
 8006dd0:	7083      	strb	r3, [r0, #2]
 8006dd2:	70c1      	strb	r1, [r0, #3]
 8006dd4:	1d03      	adds	r3, r0, #4
 8006dd6:	e7f1      	b.n	8006dbc <__exponent+0x60>

08006dd8 <_printf_float>:
 8006dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ddc:	ed2d 8b02 	vpush	{d8}
 8006de0:	b08d      	sub	sp, #52	; 0x34
 8006de2:	460c      	mov	r4, r1
 8006de4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006de8:	4616      	mov	r6, r2
 8006dea:	461f      	mov	r7, r3
 8006dec:	4605      	mov	r5, r0
 8006dee:	f001 fb47 	bl	8008480 <_localeconv_r>
 8006df2:	f8d0 a000 	ldr.w	sl, [r0]
 8006df6:	4650      	mov	r0, sl
 8006df8:	f7f9 f9ea 	bl	80001d0 <strlen>
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	930a      	str	r3, [sp, #40]	; 0x28
 8006e00:	6823      	ldr	r3, [r4, #0]
 8006e02:	9305      	str	r3, [sp, #20]
 8006e04:	f8d8 3000 	ldr.w	r3, [r8]
 8006e08:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006e0c:	3307      	adds	r3, #7
 8006e0e:	f023 0307 	bic.w	r3, r3, #7
 8006e12:	f103 0208 	add.w	r2, r3, #8
 8006e16:	f8c8 2000 	str.w	r2, [r8]
 8006e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e1e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006e22:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006e26:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006e2a:	9307      	str	r3, [sp, #28]
 8006e2c:	f8cd 8018 	str.w	r8, [sp, #24]
 8006e30:	ee08 0a10 	vmov	s16, r0
 8006e34:	4b9f      	ldr	r3, [pc, #636]	; (80070b4 <_printf_float+0x2dc>)
 8006e36:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006e3a:	f04f 32ff 	mov.w	r2, #4294967295
 8006e3e:	f7f9 fe75 	bl	8000b2c <__aeabi_dcmpun>
 8006e42:	bb88      	cbnz	r0, 8006ea8 <_printf_float+0xd0>
 8006e44:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006e48:	4b9a      	ldr	r3, [pc, #616]	; (80070b4 <_printf_float+0x2dc>)
 8006e4a:	f04f 32ff 	mov.w	r2, #4294967295
 8006e4e:	f7f9 fe4f 	bl	8000af0 <__aeabi_dcmple>
 8006e52:	bb48      	cbnz	r0, 8006ea8 <_printf_float+0xd0>
 8006e54:	2200      	movs	r2, #0
 8006e56:	2300      	movs	r3, #0
 8006e58:	4640      	mov	r0, r8
 8006e5a:	4649      	mov	r1, r9
 8006e5c:	f7f9 fe3e 	bl	8000adc <__aeabi_dcmplt>
 8006e60:	b110      	cbz	r0, 8006e68 <_printf_float+0x90>
 8006e62:	232d      	movs	r3, #45	; 0x2d
 8006e64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e68:	4b93      	ldr	r3, [pc, #588]	; (80070b8 <_printf_float+0x2e0>)
 8006e6a:	4894      	ldr	r0, [pc, #592]	; (80070bc <_printf_float+0x2e4>)
 8006e6c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006e70:	bf94      	ite	ls
 8006e72:	4698      	movls	r8, r3
 8006e74:	4680      	movhi	r8, r0
 8006e76:	2303      	movs	r3, #3
 8006e78:	6123      	str	r3, [r4, #16]
 8006e7a:	9b05      	ldr	r3, [sp, #20]
 8006e7c:	f023 0204 	bic.w	r2, r3, #4
 8006e80:	6022      	str	r2, [r4, #0]
 8006e82:	f04f 0900 	mov.w	r9, #0
 8006e86:	9700      	str	r7, [sp, #0]
 8006e88:	4633      	mov	r3, r6
 8006e8a:	aa0b      	add	r2, sp, #44	; 0x2c
 8006e8c:	4621      	mov	r1, r4
 8006e8e:	4628      	mov	r0, r5
 8006e90:	f000 f9d8 	bl	8007244 <_printf_common>
 8006e94:	3001      	adds	r0, #1
 8006e96:	f040 8090 	bne.w	8006fba <_printf_float+0x1e2>
 8006e9a:	f04f 30ff 	mov.w	r0, #4294967295
 8006e9e:	b00d      	add	sp, #52	; 0x34
 8006ea0:	ecbd 8b02 	vpop	{d8}
 8006ea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ea8:	4642      	mov	r2, r8
 8006eaa:	464b      	mov	r3, r9
 8006eac:	4640      	mov	r0, r8
 8006eae:	4649      	mov	r1, r9
 8006eb0:	f7f9 fe3c 	bl	8000b2c <__aeabi_dcmpun>
 8006eb4:	b140      	cbz	r0, 8006ec8 <_printf_float+0xf0>
 8006eb6:	464b      	mov	r3, r9
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	bfbc      	itt	lt
 8006ebc:	232d      	movlt	r3, #45	; 0x2d
 8006ebe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006ec2:	487f      	ldr	r0, [pc, #508]	; (80070c0 <_printf_float+0x2e8>)
 8006ec4:	4b7f      	ldr	r3, [pc, #508]	; (80070c4 <_printf_float+0x2ec>)
 8006ec6:	e7d1      	b.n	8006e6c <_printf_float+0x94>
 8006ec8:	6863      	ldr	r3, [r4, #4]
 8006eca:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006ece:	9206      	str	r2, [sp, #24]
 8006ed0:	1c5a      	adds	r2, r3, #1
 8006ed2:	d13f      	bne.n	8006f54 <_printf_float+0x17c>
 8006ed4:	2306      	movs	r3, #6
 8006ed6:	6063      	str	r3, [r4, #4]
 8006ed8:	9b05      	ldr	r3, [sp, #20]
 8006eda:	6861      	ldr	r1, [r4, #4]
 8006edc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	9303      	str	r3, [sp, #12]
 8006ee4:	ab0a      	add	r3, sp, #40	; 0x28
 8006ee6:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006eea:	ab09      	add	r3, sp, #36	; 0x24
 8006eec:	ec49 8b10 	vmov	d0, r8, r9
 8006ef0:	9300      	str	r3, [sp, #0]
 8006ef2:	6022      	str	r2, [r4, #0]
 8006ef4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006ef8:	4628      	mov	r0, r5
 8006efa:	f7ff fecd 	bl	8006c98 <__cvt>
 8006efe:	9b06      	ldr	r3, [sp, #24]
 8006f00:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006f02:	2b47      	cmp	r3, #71	; 0x47
 8006f04:	4680      	mov	r8, r0
 8006f06:	d108      	bne.n	8006f1a <_printf_float+0x142>
 8006f08:	1cc8      	adds	r0, r1, #3
 8006f0a:	db02      	blt.n	8006f12 <_printf_float+0x13a>
 8006f0c:	6863      	ldr	r3, [r4, #4]
 8006f0e:	4299      	cmp	r1, r3
 8006f10:	dd41      	ble.n	8006f96 <_printf_float+0x1be>
 8006f12:	f1ab 0b02 	sub.w	fp, fp, #2
 8006f16:	fa5f fb8b 	uxtb.w	fp, fp
 8006f1a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006f1e:	d820      	bhi.n	8006f62 <_printf_float+0x18a>
 8006f20:	3901      	subs	r1, #1
 8006f22:	465a      	mov	r2, fp
 8006f24:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006f28:	9109      	str	r1, [sp, #36]	; 0x24
 8006f2a:	f7ff ff17 	bl	8006d5c <__exponent>
 8006f2e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006f30:	1813      	adds	r3, r2, r0
 8006f32:	2a01      	cmp	r2, #1
 8006f34:	4681      	mov	r9, r0
 8006f36:	6123      	str	r3, [r4, #16]
 8006f38:	dc02      	bgt.n	8006f40 <_printf_float+0x168>
 8006f3a:	6822      	ldr	r2, [r4, #0]
 8006f3c:	07d2      	lsls	r2, r2, #31
 8006f3e:	d501      	bpl.n	8006f44 <_printf_float+0x16c>
 8006f40:	3301      	adds	r3, #1
 8006f42:	6123      	str	r3, [r4, #16]
 8006f44:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d09c      	beq.n	8006e86 <_printf_float+0xae>
 8006f4c:	232d      	movs	r3, #45	; 0x2d
 8006f4e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f52:	e798      	b.n	8006e86 <_printf_float+0xae>
 8006f54:	9a06      	ldr	r2, [sp, #24]
 8006f56:	2a47      	cmp	r2, #71	; 0x47
 8006f58:	d1be      	bne.n	8006ed8 <_printf_float+0x100>
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d1bc      	bne.n	8006ed8 <_printf_float+0x100>
 8006f5e:	2301      	movs	r3, #1
 8006f60:	e7b9      	b.n	8006ed6 <_printf_float+0xfe>
 8006f62:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006f66:	d118      	bne.n	8006f9a <_printf_float+0x1c2>
 8006f68:	2900      	cmp	r1, #0
 8006f6a:	6863      	ldr	r3, [r4, #4]
 8006f6c:	dd0b      	ble.n	8006f86 <_printf_float+0x1ae>
 8006f6e:	6121      	str	r1, [r4, #16]
 8006f70:	b913      	cbnz	r3, 8006f78 <_printf_float+0x1a0>
 8006f72:	6822      	ldr	r2, [r4, #0]
 8006f74:	07d0      	lsls	r0, r2, #31
 8006f76:	d502      	bpl.n	8006f7e <_printf_float+0x1a6>
 8006f78:	3301      	adds	r3, #1
 8006f7a:	440b      	add	r3, r1
 8006f7c:	6123      	str	r3, [r4, #16]
 8006f7e:	65a1      	str	r1, [r4, #88]	; 0x58
 8006f80:	f04f 0900 	mov.w	r9, #0
 8006f84:	e7de      	b.n	8006f44 <_printf_float+0x16c>
 8006f86:	b913      	cbnz	r3, 8006f8e <_printf_float+0x1b6>
 8006f88:	6822      	ldr	r2, [r4, #0]
 8006f8a:	07d2      	lsls	r2, r2, #31
 8006f8c:	d501      	bpl.n	8006f92 <_printf_float+0x1ba>
 8006f8e:	3302      	adds	r3, #2
 8006f90:	e7f4      	b.n	8006f7c <_printf_float+0x1a4>
 8006f92:	2301      	movs	r3, #1
 8006f94:	e7f2      	b.n	8006f7c <_printf_float+0x1a4>
 8006f96:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006f9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f9c:	4299      	cmp	r1, r3
 8006f9e:	db05      	blt.n	8006fac <_printf_float+0x1d4>
 8006fa0:	6823      	ldr	r3, [r4, #0]
 8006fa2:	6121      	str	r1, [r4, #16]
 8006fa4:	07d8      	lsls	r0, r3, #31
 8006fa6:	d5ea      	bpl.n	8006f7e <_printf_float+0x1a6>
 8006fa8:	1c4b      	adds	r3, r1, #1
 8006faa:	e7e7      	b.n	8006f7c <_printf_float+0x1a4>
 8006fac:	2900      	cmp	r1, #0
 8006fae:	bfd4      	ite	le
 8006fb0:	f1c1 0202 	rsble	r2, r1, #2
 8006fb4:	2201      	movgt	r2, #1
 8006fb6:	4413      	add	r3, r2
 8006fb8:	e7e0      	b.n	8006f7c <_printf_float+0x1a4>
 8006fba:	6823      	ldr	r3, [r4, #0]
 8006fbc:	055a      	lsls	r2, r3, #21
 8006fbe:	d407      	bmi.n	8006fd0 <_printf_float+0x1f8>
 8006fc0:	6923      	ldr	r3, [r4, #16]
 8006fc2:	4642      	mov	r2, r8
 8006fc4:	4631      	mov	r1, r6
 8006fc6:	4628      	mov	r0, r5
 8006fc8:	47b8      	blx	r7
 8006fca:	3001      	adds	r0, #1
 8006fcc:	d12c      	bne.n	8007028 <_printf_float+0x250>
 8006fce:	e764      	b.n	8006e9a <_printf_float+0xc2>
 8006fd0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006fd4:	f240 80e0 	bls.w	8007198 <_printf_float+0x3c0>
 8006fd8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006fdc:	2200      	movs	r2, #0
 8006fde:	2300      	movs	r3, #0
 8006fe0:	f7f9 fd72 	bl	8000ac8 <__aeabi_dcmpeq>
 8006fe4:	2800      	cmp	r0, #0
 8006fe6:	d034      	beq.n	8007052 <_printf_float+0x27a>
 8006fe8:	4a37      	ldr	r2, [pc, #220]	; (80070c8 <_printf_float+0x2f0>)
 8006fea:	2301      	movs	r3, #1
 8006fec:	4631      	mov	r1, r6
 8006fee:	4628      	mov	r0, r5
 8006ff0:	47b8      	blx	r7
 8006ff2:	3001      	adds	r0, #1
 8006ff4:	f43f af51 	beq.w	8006e9a <_printf_float+0xc2>
 8006ff8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006ffc:	429a      	cmp	r2, r3
 8006ffe:	db02      	blt.n	8007006 <_printf_float+0x22e>
 8007000:	6823      	ldr	r3, [r4, #0]
 8007002:	07d8      	lsls	r0, r3, #31
 8007004:	d510      	bpl.n	8007028 <_printf_float+0x250>
 8007006:	ee18 3a10 	vmov	r3, s16
 800700a:	4652      	mov	r2, sl
 800700c:	4631      	mov	r1, r6
 800700e:	4628      	mov	r0, r5
 8007010:	47b8      	blx	r7
 8007012:	3001      	adds	r0, #1
 8007014:	f43f af41 	beq.w	8006e9a <_printf_float+0xc2>
 8007018:	f04f 0800 	mov.w	r8, #0
 800701c:	f104 091a 	add.w	r9, r4, #26
 8007020:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007022:	3b01      	subs	r3, #1
 8007024:	4543      	cmp	r3, r8
 8007026:	dc09      	bgt.n	800703c <_printf_float+0x264>
 8007028:	6823      	ldr	r3, [r4, #0]
 800702a:	079b      	lsls	r3, r3, #30
 800702c:	f100 8105 	bmi.w	800723a <_printf_float+0x462>
 8007030:	68e0      	ldr	r0, [r4, #12]
 8007032:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007034:	4298      	cmp	r0, r3
 8007036:	bfb8      	it	lt
 8007038:	4618      	movlt	r0, r3
 800703a:	e730      	b.n	8006e9e <_printf_float+0xc6>
 800703c:	2301      	movs	r3, #1
 800703e:	464a      	mov	r2, r9
 8007040:	4631      	mov	r1, r6
 8007042:	4628      	mov	r0, r5
 8007044:	47b8      	blx	r7
 8007046:	3001      	adds	r0, #1
 8007048:	f43f af27 	beq.w	8006e9a <_printf_float+0xc2>
 800704c:	f108 0801 	add.w	r8, r8, #1
 8007050:	e7e6      	b.n	8007020 <_printf_float+0x248>
 8007052:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007054:	2b00      	cmp	r3, #0
 8007056:	dc39      	bgt.n	80070cc <_printf_float+0x2f4>
 8007058:	4a1b      	ldr	r2, [pc, #108]	; (80070c8 <_printf_float+0x2f0>)
 800705a:	2301      	movs	r3, #1
 800705c:	4631      	mov	r1, r6
 800705e:	4628      	mov	r0, r5
 8007060:	47b8      	blx	r7
 8007062:	3001      	adds	r0, #1
 8007064:	f43f af19 	beq.w	8006e9a <_printf_float+0xc2>
 8007068:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800706c:	4313      	orrs	r3, r2
 800706e:	d102      	bne.n	8007076 <_printf_float+0x29e>
 8007070:	6823      	ldr	r3, [r4, #0]
 8007072:	07d9      	lsls	r1, r3, #31
 8007074:	d5d8      	bpl.n	8007028 <_printf_float+0x250>
 8007076:	ee18 3a10 	vmov	r3, s16
 800707a:	4652      	mov	r2, sl
 800707c:	4631      	mov	r1, r6
 800707e:	4628      	mov	r0, r5
 8007080:	47b8      	blx	r7
 8007082:	3001      	adds	r0, #1
 8007084:	f43f af09 	beq.w	8006e9a <_printf_float+0xc2>
 8007088:	f04f 0900 	mov.w	r9, #0
 800708c:	f104 0a1a 	add.w	sl, r4, #26
 8007090:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007092:	425b      	negs	r3, r3
 8007094:	454b      	cmp	r3, r9
 8007096:	dc01      	bgt.n	800709c <_printf_float+0x2c4>
 8007098:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800709a:	e792      	b.n	8006fc2 <_printf_float+0x1ea>
 800709c:	2301      	movs	r3, #1
 800709e:	4652      	mov	r2, sl
 80070a0:	4631      	mov	r1, r6
 80070a2:	4628      	mov	r0, r5
 80070a4:	47b8      	blx	r7
 80070a6:	3001      	adds	r0, #1
 80070a8:	f43f aef7 	beq.w	8006e9a <_printf_float+0xc2>
 80070ac:	f109 0901 	add.w	r9, r9, #1
 80070b0:	e7ee      	b.n	8007090 <_printf_float+0x2b8>
 80070b2:	bf00      	nop
 80070b4:	7fefffff 	.word	0x7fefffff
 80070b8:	08009f78 	.word	0x08009f78
 80070bc:	08009f7c 	.word	0x08009f7c
 80070c0:	08009f84 	.word	0x08009f84
 80070c4:	08009f80 	.word	0x08009f80
 80070c8:	08009f88 	.word	0x08009f88
 80070cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80070ce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80070d0:	429a      	cmp	r2, r3
 80070d2:	bfa8      	it	ge
 80070d4:	461a      	movge	r2, r3
 80070d6:	2a00      	cmp	r2, #0
 80070d8:	4691      	mov	r9, r2
 80070da:	dc37      	bgt.n	800714c <_printf_float+0x374>
 80070dc:	f04f 0b00 	mov.w	fp, #0
 80070e0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80070e4:	f104 021a 	add.w	r2, r4, #26
 80070e8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80070ea:	9305      	str	r3, [sp, #20]
 80070ec:	eba3 0309 	sub.w	r3, r3, r9
 80070f0:	455b      	cmp	r3, fp
 80070f2:	dc33      	bgt.n	800715c <_printf_float+0x384>
 80070f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80070f8:	429a      	cmp	r2, r3
 80070fa:	db3b      	blt.n	8007174 <_printf_float+0x39c>
 80070fc:	6823      	ldr	r3, [r4, #0]
 80070fe:	07da      	lsls	r2, r3, #31
 8007100:	d438      	bmi.n	8007174 <_printf_float+0x39c>
 8007102:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007104:	9a05      	ldr	r2, [sp, #20]
 8007106:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007108:	1a9a      	subs	r2, r3, r2
 800710a:	eba3 0901 	sub.w	r9, r3, r1
 800710e:	4591      	cmp	r9, r2
 8007110:	bfa8      	it	ge
 8007112:	4691      	movge	r9, r2
 8007114:	f1b9 0f00 	cmp.w	r9, #0
 8007118:	dc35      	bgt.n	8007186 <_printf_float+0x3ae>
 800711a:	f04f 0800 	mov.w	r8, #0
 800711e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007122:	f104 0a1a 	add.w	sl, r4, #26
 8007126:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800712a:	1a9b      	subs	r3, r3, r2
 800712c:	eba3 0309 	sub.w	r3, r3, r9
 8007130:	4543      	cmp	r3, r8
 8007132:	f77f af79 	ble.w	8007028 <_printf_float+0x250>
 8007136:	2301      	movs	r3, #1
 8007138:	4652      	mov	r2, sl
 800713a:	4631      	mov	r1, r6
 800713c:	4628      	mov	r0, r5
 800713e:	47b8      	blx	r7
 8007140:	3001      	adds	r0, #1
 8007142:	f43f aeaa 	beq.w	8006e9a <_printf_float+0xc2>
 8007146:	f108 0801 	add.w	r8, r8, #1
 800714a:	e7ec      	b.n	8007126 <_printf_float+0x34e>
 800714c:	4613      	mov	r3, r2
 800714e:	4631      	mov	r1, r6
 8007150:	4642      	mov	r2, r8
 8007152:	4628      	mov	r0, r5
 8007154:	47b8      	blx	r7
 8007156:	3001      	adds	r0, #1
 8007158:	d1c0      	bne.n	80070dc <_printf_float+0x304>
 800715a:	e69e      	b.n	8006e9a <_printf_float+0xc2>
 800715c:	2301      	movs	r3, #1
 800715e:	4631      	mov	r1, r6
 8007160:	4628      	mov	r0, r5
 8007162:	9205      	str	r2, [sp, #20]
 8007164:	47b8      	blx	r7
 8007166:	3001      	adds	r0, #1
 8007168:	f43f ae97 	beq.w	8006e9a <_printf_float+0xc2>
 800716c:	9a05      	ldr	r2, [sp, #20]
 800716e:	f10b 0b01 	add.w	fp, fp, #1
 8007172:	e7b9      	b.n	80070e8 <_printf_float+0x310>
 8007174:	ee18 3a10 	vmov	r3, s16
 8007178:	4652      	mov	r2, sl
 800717a:	4631      	mov	r1, r6
 800717c:	4628      	mov	r0, r5
 800717e:	47b8      	blx	r7
 8007180:	3001      	adds	r0, #1
 8007182:	d1be      	bne.n	8007102 <_printf_float+0x32a>
 8007184:	e689      	b.n	8006e9a <_printf_float+0xc2>
 8007186:	9a05      	ldr	r2, [sp, #20]
 8007188:	464b      	mov	r3, r9
 800718a:	4442      	add	r2, r8
 800718c:	4631      	mov	r1, r6
 800718e:	4628      	mov	r0, r5
 8007190:	47b8      	blx	r7
 8007192:	3001      	adds	r0, #1
 8007194:	d1c1      	bne.n	800711a <_printf_float+0x342>
 8007196:	e680      	b.n	8006e9a <_printf_float+0xc2>
 8007198:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800719a:	2a01      	cmp	r2, #1
 800719c:	dc01      	bgt.n	80071a2 <_printf_float+0x3ca>
 800719e:	07db      	lsls	r3, r3, #31
 80071a0:	d538      	bpl.n	8007214 <_printf_float+0x43c>
 80071a2:	2301      	movs	r3, #1
 80071a4:	4642      	mov	r2, r8
 80071a6:	4631      	mov	r1, r6
 80071a8:	4628      	mov	r0, r5
 80071aa:	47b8      	blx	r7
 80071ac:	3001      	adds	r0, #1
 80071ae:	f43f ae74 	beq.w	8006e9a <_printf_float+0xc2>
 80071b2:	ee18 3a10 	vmov	r3, s16
 80071b6:	4652      	mov	r2, sl
 80071b8:	4631      	mov	r1, r6
 80071ba:	4628      	mov	r0, r5
 80071bc:	47b8      	blx	r7
 80071be:	3001      	adds	r0, #1
 80071c0:	f43f ae6b 	beq.w	8006e9a <_printf_float+0xc2>
 80071c4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80071c8:	2200      	movs	r2, #0
 80071ca:	2300      	movs	r3, #0
 80071cc:	f7f9 fc7c 	bl	8000ac8 <__aeabi_dcmpeq>
 80071d0:	b9d8      	cbnz	r0, 800720a <_printf_float+0x432>
 80071d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071d4:	f108 0201 	add.w	r2, r8, #1
 80071d8:	3b01      	subs	r3, #1
 80071da:	4631      	mov	r1, r6
 80071dc:	4628      	mov	r0, r5
 80071de:	47b8      	blx	r7
 80071e0:	3001      	adds	r0, #1
 80071e2:	d10e      	bne.n	8007202 <_printf_float+0x42a>
 80071e4:	e659      	b.n	8006e9a <_printf_float+0xc2>
 80071e6:	2301      	movs	r3, #1
 80071e8:	4652      	mov	r2, sl
 80071ea:	4631      	mov	r1, r6
 80071ec:	4628      	mov	r0, r5
 80071ee:	47b8      	blx	r7
 80071f0:	3001      	adds	r0, #1
 80071f2:	f43f ae52 	beq.w	8006e9a <_printf_float+0xc2>
 80071f6:	f108 0801 	add.w	r8, r8, #1
 80071fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071fc:	3b01      	subs	r3, #1
 80071fe:	4543      	cmp	r3, r8
 8007200:	dcf1      	bgt.n	80071e6 <_printf_float+0x40e>
 8007202:	464b      	mov	r3, r9
 8007204:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007208:	e6dc      	b.n	8006fc4 <_printf_float+0x1ec>
 800720a:	f04f 0800 	mov.w	r8, #0
 800720e:	f104 0a1a 	add.w	sl, r4, #26
 8007212:	e7f2      	b.n	80071fa <_printf_float+0x422>
 8007214:	2301      	movs	r3, #1
 8007216:	4642      	mov	r2, r8
 8007218:	e7df      	b.n	80071da <_printf_float+0x402>
 800721a:	2301      	movs	r3, #1
 800721c:	464a      	mov	r2, r9
 800721e:	4631      	mov	r1, r6
 8007220:	4628      	mov	r0, r5
 8007222:	47b8      	blx	r7
 8007224:	3001      	adds	r0, #1
 8007226:	f43f ae38 	beq.w	8006e9a <_printf_float+0xc2>
 800722a:	f108 0801 	add.w	r8, r8, #1
 800722e:	68e3      	ldr	r3, [r4, #12]
 8007230:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007232:	1a5b      	subs	r3, r3, r1
 8007234:	4543      	cmp	r3, r8
 8007236:	dcf0      	bgt.n	800721a <_printf_float+0x442>
 8007238:	e6fa      	b.n	8007030 <_printf_float+0x258>
 800723a:	f04f 0800 	mov.w	r8, #0
 800723e:	f104 0919 	add.w	r9, r4, #25
 8007242:	e7f4      	b.n	800722e <_printf_float+0x456>

08007244 <_printf_common>:
 8007244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007248:	4616      	mov	r6, r2
 800724a:	4699      	mov	r9, r3
 800724c:	688a      	ldr	r2, [r1, #8]
 800724e:	690b      	ldr	r3, [r1, #16]
 8007250:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007254:	4293      	cmp	r3, r2
 8007256:	bfb8      	it	lt
 8007258:	4613      	movlt	r3, r2
 800725a:	6033      	str	r3, [r6, #0]
 800725c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007260:	4607      	mov	r7, r0
 8007262:	460c      	mov	r4, r1
 8007264:	b10a      	cbz	r2, 800726a <_printf_common+0x26>
 8007266:	3301      	adds	r3, #1
 8007268:	6033      	str	r3, [r6, #0]
 800726a:	6823      	ldr	r3, [r4, #0]
 800726c:	0699      	lsls	r1, r3, #26
 800726e:	bf42      	ittt	mi
 8007270:	6833      	ldrmi	r3, [r6, #0]
 8007272:	3302      	addmi	r3, #2
 8007274:	6033      	strmi	r3, [r6, #0]
 8007276:	6825      	ldr	r5, [r4, #0]
 8007278:	f015 0506 	ands.w	r5, r5, #6
 800727c:	d106      	bne.n	800728c <_printf_common+0x48>
 800727e:	f104 0a19 	add.w	sl, r4, #25
 8007282:	68e3      	ldr	r3, [r4, #12]
 8007284:	6832      	ldr	r2, [r6, #0]
 8007286:	1a9b      	subs	r3, r3, r2
 8007288:	42ab      	cmp	r3, r5
 800728a:	dc26      	bgt.n	80072da <_printf_common+0x96>
 800728c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007290:	1e13      	subs	r3, r2, #0
 8007292:	6822      	ldr	r2, [r4, #0]
 8007294:	bf18      	it	ne
 8007296:	2301      	movne	r3, #1
 8007298:	0692      	lsls	r2, r2, #26
 800729a:	d42b      	bmi.n	80072f4 <_printf_common+0xb0>
 800729c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80072a0:	4649      	mov	r1, r9
 80072a2:	4638      	mov	r0, r7
 80072a4:	47c0      	blx	r8
 80072a6:	3001      	adds	r0, #1
 80072a8:	d01e      	beq.n	80072e8 <_printf_common+0xa4>
 80072aa:	6823      	ldr	r3, [r4, #0]
 80072ac:	68e5      	ldr	r5, [r4, #12]
 80072ae:	6832      	ldr	r2, [r6, #0]
 80072b0:	f003 0306 	and.w	r3, r3, #6
 80072b4:	2b04      	cmp	r3, #4
 80072b6:	bf08      	it	eq
 80072b8:	1aad      	subeq	r5, r5, r2
 80072ba:	68a3      	ldr	r3, [r4, #8]
 80072bc:	6922      	ldr	r2, [r4, #16]
 80072be:	bf0c      	ite	eq
 80072c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80072c4:	2500      	movne	r5, #0
 80072c6:	4293      	cmp	r3, r2
 80072c8:	bfc4      	itt	gt
 80072ca:	1a9b      	subgt	r3, r3, r2
 80072cc:	18ed      	addgt	r5, r5, r3
 80072ce:	2600      	movs	r6, #0
 80072d0:	341a      	adds	r4, #26
 80072d2:	42b5      	cmp	r5, r6
 80072d4:	d11a      	bne.n	800730c <_printf_common+0xc8>
 80072d6:	2000      	movs	r0, #0
 80072d8:	e008      	b.n	80072ec <_printf_common+0xa8>
 80072da:	2301      	movs	r3, #1
 80072dc:	4652      	mov	r2, sl
 80072de:	4649      	mov	r1, r9
 80072e0:	4638      	mov	r0, r7
 80072e2:	47c0      	blx	r8
 80072e4:	3001      	adds	r0, #1
 80072e6:	d103      	bne.n	80072f0 <_printf_common+0xac>
 80072e8:	f04f 30ff 	mov.w	r0, #4294967295
 80072ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072f0:	3501      	adds	r5, #1
 80072f2:	e7c6      	b.n	8007282 <_printf_common+0x3e>
 80072f4:	18e1      	adds	r1, r4, r3
 80072f6:	1c5a      	adds	r2, r3, #1
 80072f8:	2030      	movs	r0, #48	; 0x30
 80072fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80072fe:	4422      	add	r2, r4
 8007300:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007304:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007308:	3302      	adds	r3, #2
 800730a:	e7c7      	b.n	800729c <_printf_common+0x58>
 800730c:	2301      	movs	r3, #1
 800730e:	4622      	mov	r2, r4
 8007310:	4649      	mov	r1, r9
 8007312:	4638      	mov	r0, r7
 8007314:	47c0      	blx	r8
 8007316:	3001      	adds	r0, #1
 8007318:	d0e6      	beq.n	80072e8 <_printf_common+0xa4>
 800731a:	3601      	adds	r6, #1
 800731c:	e7d9      	b.n	80072d2 <_printf_common+0x8e>
	...

08007320 <_printf_i>:
 8007320:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007324:	7e0f      	ldrb	r7, [r1, #24]
 8007326:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007328:	2f78      	cmp	r7, #120	; 0x78
 800732a:	4691      	mov	r9, r2
 800732c:	4680      	mov	r8, r0
 800732e:	460c      	mov	r4, r1
 8007330:	469a      	mov	sl, r3
 8007332:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007336:	d807      	bhi.n	8007348 <_printf_i+0x28>
 8007338:	2f62      	cmp	r7, #98	; 0x62
 800733a:	d80a      	bhi.n	8007352 <_printf_i+0x32>
 800733c:	2f00      	cmp	r7, #0
 800733e:	f000 80d8 	beq.w	80074f2 <_printf_i+0x1d2>
 8007342:	2f58      	cmp	r7, #88	; 0x58
 8007344:	f000 80a3 	beq.w	800748e <_printf_i+0x16e>
 8007348:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800734c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007350:	e03a      	b.n	80073c8 <_printf_i+0xa8>
 8007352:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007356:	2b15      	cmp	r3, #21
 8007358:	d8f6      	bhi.n	8007348 <_printf_i+0x28>
 800735a:	a101      	add	r1, pc, #4	; (adr r1, 8007360 <_printf_i+0x40>)
 800735c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007360:	080073b9 	.word	0x080073b9
 8007364:	080073cd 	.word	0x080073cd
 8007368:	08007349 	.word	0x08007349
 800736c:	08007349 	.word	0x08007349
 8007370:	08007349 	.word	0x08007349
 8007374:	08007349 	.word	0x08007349
 8007378:	080073cd 	.word	0x080073cd
 800737c:	08007349 	.word	0x08007349
 8007380:	08007349 	.word	0x08007349
 8007384:	08007349 	.word	0x08007349
 8007388:	08007349 	.word	0x08007349
 800738c:	080074d9 	.word	0x080074d9
 8007390:	080073fd 	.word	0x080073fd
 8007394:	080074bb 	.word	0x080074bb
 8007398:	08007349 	.word	0x08007349
 800739c:	08007349 	.word	0x08007349
 80073a0:	080074fb 	.word	0x080074fb
 80073a4:	08007349 	.word	0x08007349
 80073a8:	080073fd 	.word	0x080073fd
 80073ac:	08007349 	.word	0x08007349
 80073b0:	08007349 	.word	0x08007349
 80073b4:	080074c3 	.word	0x080074c3
 80073b8:	682b      	ldr	r3, [r5, #0]
 80073ba:	1d1a      	adds	r2, r3, #4
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	602a      	str	r2, [r5, #0]
 80073c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80073c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80073c8:	2301      	movs	r3, #1
 80073ca:	e0a3      	b.n	8007514 <_printf_i+0x1f4>
 80073cc:	6820      	ldr	r0, [r4, #0]
 80073ce:	6829      	ldr	r1, [r5, #0]
 80073d0:	0606      	lsls	r6, r0, #24
 80073d2:	f101 0304 	add.w	r3, r1, #4
 80073d6:	d50a      	bpl.n	80073ee <_printf_i+0xce>
 80073d8:	680e      	ldr	r6, [r1, #0]
 80073da:	602b      	str	r3, [r5, #0]
 80073dc:	2e00      	cmp	r6, #0
 80073de:	da03      	bge.n	80073e8 <_printf_i+0xc8>
 80073e0:	232d      	movs	r3, #45	; 0x2d
 80073e2:	4276      	negs	r6, r6
 80073e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80073e8:	485e      	ldr	r0, [pc, #376]	; (8007564 <_printf_i+0x244>)
 80073ea:	230a      	movs	r3, #10
 80073ec:	e019      	b.n	8007422 <_printf_i+0x102>
 80073ee:	680e      	ldr	r6, [r1, #0]
 80073f0:	602b      	str	r3, [r5, #0]
 80073f2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80073f6:	bf18      	it	ne
 80073f8:	b236      	sxthne	r6, r6
 80073fa:	e7ef      	b.n	80073dc <_printf_i+0xbc>
 80073fc:	682b      	ldr	r3, [r5, #0]
 80073fe:	6820      	ldr	r0, [r4, #0]
 8007400:	1d19      	adds	r1, r3, #4
 8007402:	6029      	str	r1, [r5, #0]
 8007404:	0601      	lsls	r1, r0, #24
 8007406:	d501      	bpl.n	800740c <_printf_i+0xec>
 8007408:	681e      	ldr	r6, [r3, #0]
 800740a:	e002      	b.n	8007412 <_printf_i+0xf2>
 800740c:	0646      	lsls	r6, r0, #25
 800740e:	d5fb      	bpl.n	8007408 <_printf_i+0xe8>
 8007410:	881e      	ldrh	r6, [r3, #0]
 8007412:	4854      	ldr	r0, [pc, #336]	; (8007564 <_printf_i+0x244>)
 8007414:	2f6f      	cmp	r7, #111	; 0x6f
 8007416:	bf0c      	ite	eq
 8007418:	2308      	moveq	r3, #8
 800741a:	230a      	movne	r3, #10
 800741c:	2100      	movs	r1, #0
 800741e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007422:	6865      	ldr	r5, [r4, #4]
 8007424:	60a5      	str	r5, [r4, #8]
 8007426:	2d00      	cmp	r5, #0
 8007428:	bfa2      	ittt	ge
 800742a:	6821      	ldrge	r1, [r4, #0]
 800742c:	f021 0104 	bicge.w	r1, r1, #4
 8007430:	6021      	strge	r1, [r4, #0]
 8007432:	b90e      	cbnz	r6, 8007438 <_printf_i+0x118>
 8007434:	2d00      	cmp	r5, #0
 8007436:	d04d      	beq.n	80074d4 <_printf_i+0x1b4>
 8007438:	4615      	mov	r5, r2
 800743a:	fbb6 f1f3 	udiv	r1, r6, r3
 800743e:	fb03 6711 	mls	r7, r3, r1, r6
 8007442:	5dc7      	ldrb	r7, [r0, r7]
 8007444:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007448:	4637      	mov	r7, r6
 800744a:	42bb      	cmp	r3, r7
 800744c:	460e      	mov	r6, r1
 800744e:	d9f4      	bls.n	800743a <_printf_i+0x11a>
 8007450:	2b08      	cmp	r3, #8
 8007452:	d10b      	bne.n	800746c <_printf_i+0x14c>
 8007454:	6823      	ldr	r3, [r4, #0]
 8007456:	07de      	lsls	r6, r3, #31
 8007458:	d508      	bpl.n	800746c <_printf_i+0x14c>
 800745a:	6923      	ldr	r3, [r4, #16]
 800745c:	6861      	ldr	r1, [r4, #4]
 800745e:	4299      	cmp	r1, r3
 8007460:	bfde      	ittt	le
 8007462:	2330      	movle	r3, #48	; 0x30
 8007464:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007468:	f105 35ff 	addle.w	r5, r5, #4294967295
 800746c:	1b52      	subs	r2, r2, r5
 800746e:	6122      	str	r2, [r4, #16]
 8007470:	f8cd a000 	str.w	sl, [sp]
 8007474:	464b      	mov	r3, r9
 8007476:	aa03      	add	r2, sp, #12
 8007478:	4621      	mov	r1, r4
 800747a:	4640      	mov	r0, r8
 800747c:	f7ff fee2 	bl	8007244 <_printf_common>
 8007480:	3001      	adds	r0, #1
 8007482:	d14c      	bne.n	800751e <_printf_i+0x1fe>
 8007484:	f04f 30ff 	mov.w	r0, #4294967295
 8007488:	b004      	add	sp, #16
 800748a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800748e:	4835      	ldr	r0, [pc, #212]	; (8007564 <_printf_i+0x244>)
 8007490:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007494:	6829      	ldr	r1, [r5, #0]
 8007496:	6823      	ldr	r3, [r4, #0]
 8007498:	f851 6b04 	ldr.w	r6, [r1], #4
 800749c:	6029      	str	r1, [r5, #0]
 800749e:	061d      	lsls	r5, r3, #24
 80074a0:	d514      	bpl.n	80074cc <_printf_i+0x1ac>
 80074a2:	07df      	lsls	r7, r3, #31
 80074a4:	bf44      	itt	mi
 80074a6:	f043 0320 	orrmi.w	r3, r3, #32
 80074aa:	6023      	strmi	r3, [r4, #0]
 80074ac:	b91e      	cbnz	r6, 80074b6 <_printf_i+0x196>
 80074ae:	6823      	ldr	r3, [r4, #0]
 80074b0:	f023 0320 	bic.w	r3, r3, #32
 80074b4:	6023      	str	r3, [r4, #0]
 80074b6:	2310      	movs	r3, #16
 80074b8:	e7b0      	b.n	800741c <_printf_i+0xfc>
 80074ba:	6823      	ldr	r3, [r4, #0]
 80074bc:	f043 0320 	orr.w	r3, r3, #32
 80074c0:	6023      	str	r3, [r4, #0]
 80074c2:	2378      	movs	r3, #120	; 0x78
 80074c4:	4828      	ldr	r0, [pc, #160]	; (8007568 <_printf_i+0x248>)
 80074c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80074ca:	e7e3      	b.n	8007494 <_printf_i+0x174>
 80074cc:	0659      	lsls	r1, r3, #25
 80074ce:	bf48      	it	mi
 80074d0:	b2b6      	uxthmi	r6, r6
 80074d2:	e7e6      	b.n	80074a2 <_printf_i+0x182>
 80074d4:	4615      	mov	r5, r2
 80074d6:	e7bb      	b.n	8007450 <_printf_i+0x130>
 80074d8:	682b      	ldr	r3, [r5, #0]
 80074da:	6826      	ldr	r6, [r4, #0]
 80074dc:	6961      	ldr	r1, [r4, #20]
 80074de:	1d18      	adds	r0, r3, #4
 80074e0:	6028      	str	r0, [r5, #0]
 80074e2:	0635      	lsls	r5, r6, #24
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	d501      	bpl.n	80074ec <_printf_i+0x1cc>
 80074e8:	6019      	str	r1, [r3, #0]
 80074ea:	e002      	b.n	80074f2 <_printf_i+0x1d2>
 80074ec:	0670      	lsls	r0, r6, #25
 80074ee:	d5fb      	bpl.n	80074e8 <_printf_i+0x1c8>
 80074f0:	8019      	strh	r1, [r3, #0]
 80074f2:	2300      	movs	r3, #0
 80074f4:	6123      	str	r3, [r4, #16]
 80074f6:	4615      	mov	r5, r2
 80074f8:	e7ba      	b.n	8007470 <_printf_i+0x150>
 80074fa:	682b      	ldr	r3, [r5, #0]
 80074fc:	1d1a      	adds	r2, r3, #4
 80074fe:	602a      	str	r2, [r5, #0]
 8007500:	681d      	ldr	r5, [r3, #0]
 8007502:	6862      	ldr	r2, [r4, #4]
 8007504:	2100      	movs	r1, #0
 8007506:	4628      	mov	r0, r5
 8007508:	f7f8 fe6a 	bl	80001e0 <memchr>
 800750c:	b108      	cbz	r0, 8007512 <_printf_i+0x1f2>
 800750e:	1b40      	subs	r0, r0, r5
 8007510:	6060      	str	r0, [r4, #4]
 8007512:	6863      	ldr	r3, [r4, #4]
 8007514:	6123      	str	r3, [r4, #16]
 8007516:	2300      	movs	r3, #0
 8007518:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800751c:	e7a8      	b.n	8007470 <_printf_i+0x150>
 800751e:	6923      	ldr	r3, [r4, #16]
 8007520:	462a      	mov	r2, r5
 8007522:	4649      	mov	r1, r9
 8007524:	4640      	mov	r0, r8
 8007526:	47d0      	blx	sl
 8007528:	3001      	adds	r0, #1
 800752a:	d0ab      	beq.n	8007484 <_printf_i+0x164>
 800752c:	6823      	ldr	r3, [r4, #0]
 800752e:	079b      	lsls	r3, r3, #30
 8007530:	d413      	bmi.n	800755a <_printf_i+0x23a>
 8007532:	68e0      	ldr	r0, [r4, #12]
 8007534:	9b03      	ldr	r3, [sp, #12]
 8007536:	4298      	cmp	r0, r3
 8007538:	bfb8      	it	lt
 800753a:	4618      	movlt	r0, r3
 800753c:	e7a4      	b.n	8007488 <_printf_i+0x168>
 800753e:	2301      	movs	r3, #1
 8007540:	4632      	mov	r2, r6
 8007542:	4649      	mov	r1, r9
 8007544:	4640      	mov	r0, r8
 8007546:	47d0      	blx	sl
 8007548:	3001      	adds	r0, #1
 800754a:	d09b      	beq.n	8007484 <_printf_i+0x164>
 800754c:	3501      	adds	r5, #1
 800754e:	68e3      	ldr	r3, [r4, #12]
 8007550:	9903      	ldr	r1, [sp, #12]
 8007552:	1a5b      	subs	r3, r3, r1
 8007554:	42ab      	cmp	r3, r5
 8007556:	dcf2      	bgt.n	800753e <_printf_i+0x21e>
 8007558:	e7eb      	b.n	8007532 <_printf_i+0x212>
 800755a:	2500      	movs	r5, #0
 800755c:	f104 0619 	add.w	r6, r4, #25
 8007560:	e7f5      	b.n	800754e <_printf_i+0x22e>
 8007562:	bf00      	nop
 8007564:	08009f8a 	.word	0x08009f8a
 8007568:	08009f9b 	.word	0x08009f9b

0800756c <iprintf>:
 800756c:	b40f      	push	{r0, r1, r2, r3}
 800756e:	4b0a      	ldr	r3, [pc, #40]	; (8007598 <iprintf+0x2c>)
 8007570:	b513      	push	{r0, r1, r4, lr}
 8007572:	681c      	ldr	r4, [r3, #0]
 8007574:	b124      	cbz	r4, 8007580 <iprintf+0x14>
 8007576:	69a3      	ldr	r3, [r4, #24]
 8007578:	b913      	cbnz	r3, 8007580 <iprintf+0x14>
 800757a:	4620      	mov	r0, r4
 800757c:	f000 fee2 	bl	8008344 <__sinit>
 8007580:	ab05      	add	r3, sp, #20
 8007582:	9a04      	ldr	r2, [sp, #16]
 8007584:	68a1      	ldr	r1, [r4, #8]
 8007586:	9301      	str	r3, [sp, #4]
 8007588:	4620      	mov	r0, r4
 800758a:	f001 fc3b 	bl	8008e04 <_vfiprintf_r>
 800758e:	b002      	add	sp, #8
 8007590:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007594:	b004      	add	sp, #16
 8007596:	4770      	bx	lr
 8007598:	2000040c 	.word	0x2000040c

0800759c <quorem>:
 800759c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075a0:	6903      	ldr	r3, [r0, #16]
 80075a2:	690c      	ldr	r4, [r1, #16]
 80075a4:	42a3      	cmp	r3, r4
 80075a6:	4607      	mov	r7, r0
 80075a8:	f2c0 8081 	blt.w	80076ae <quorem+0x112>
 80075ac:	3c01      	subs	r4, #1
 80075ae:	f101 0814 	add.w	r8, r1, #20
 80075b2:	f100 0514 	add.w	r5, r0, #20
 80075b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80075ba:	9301      	str	r3, [sp, #4]
 80075bc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80075c0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80075c4:	3301      	adds	r3, #1
 80075c6:	429a      	cmp	r2, r3
 80075c8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80075cc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80075d0:	fbb2 f6f3 	udiv	r6, r2, r3
 80075d4:	d331      	bcc.n	800763a <quorem+0x9e>
 80075d6:	f04f 0e00 	mov.w	lr, #0
 80075da:	4640      	mov	r0, r8
 80075dc:	46ac      	mov	ip, r5
 80075de:	46f2      	mov	sl, lr
 80075e0:	f850 2b04 	ldr.w	r2, [r0], #4
 80075e4:	b293      	uxth	r3, r2
 80075e6:	fb06 e303 	mla	r3, r6, r3, lr
 80075ea:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80075ee:	b29b      	uxth	r3, r3
 80075f0:	ebaa 0303 	sub.w	r3, sl, r3
 80075f4:	f8dc a000 	ldr.w	sl, [ip]
 80075f8:	0c12      	lsrs	r2, r2, #16
 80075fa:	fa13 f38a 	uxtah	r3, r3, sl
 80075fe:	fb06 e202 	mla	r2, r6, r2, lr
 8007602:	9300      	str	r3, [sp, #0]
 8007604:	9b00      	ldr	r3, [sp, #0]
 8007606:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800760a:	b292      	uxth	r2, r2
 800760c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007610:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007614:	f8bd 3000 	ldrh.w	r3, [sp]
 8007618:	4581      	cmp	r9, r0
 800761a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800761e:	f84c 3b04 	str.w	r3, [ip], #4
 8007622:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007626:	d2db      	bcs.n	80075e0 <quorem+0x44>
 8007628:	f855 300b 	ldr.w	r3, [r5, fp]
 800762c:	b92b      	cbnz	r3, 800763a <quorem+0x9e>
 800762e:	9b01      	ldr	r3, [sp, #4]
 8007630:	3b04      	subs	r3, #4
 8007632:	429d      	cmp	r5, r3
 8007634:	461a      	mov	r2, r3
 8007636:	d32e      	bcc.n	8007696 <quorem+0xfa>
 8007638:	613c      	str	r4, [r7, #16]
 800763a:	4638      	mov	r0, r7
 800763c:	f001 f9c0 	bl	80089c0 <__mcmp>
 8007640:	2800      	cmp	r0, #0
 8007642:	db24      	blt.n	800768e <quorem+0xf2>
 8007644:	3601      	adds	r6, #1
 8007646:	4628      	mov	r0, r5
 8007648:	f04f 0c00 	mov.w	ip, #0
 800764c:	f858 2b04 	ldr.w	r2, [r8], #4
 8007650:	f8d0 e000 	ldr.w	lr, [r0]
 8007654:	b293      	uxth	r3, r2
 8007656:	ebac 0303 	sub.w	r3, ip, r3
 800765a:	0c12      	lsrs	r2, r2, #16
 800765c:	fa13 f38e 	uxtah	r3, r3, lr
 8007660:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007664:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007668:	b29b      	uxth	r3, r3
 800766a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800766e:	45c1      	cmp	r9, r8
 8007670:	f840 3b04 	str.w	r3, [r0], #4
 8007674:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007678:	d2e8      	bcs.n	800764c <quorem+0xb0>
 800767a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800767e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007682:	b922      	cbnz	r2, 800768e <quorem+0xf2>
 8007684:	3b04      	subs	r3, #4
 8007686:	429d      	cmp	r5, r3
 8007688:	461a      	mov	r2, r3
 800768a:	d30a      	bcc.n	80076a2 <quorem+0x106>
 800768c:	613c      	str	r4, [r7, #16]
 800768e:	4630      	mov	r0, r6
 8007690:	b003      	add	sp, #12
 8007692:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007696:	6812      	ldr	r2, [r2, #0]
 8007698:	3b04      	subs	r3, #4
 800769a:	2a00      	cmp	r2, #0
 800769c:	d1cc      	bne.n	8007638 <quorem+0x9c>
 800769e:	3c01      	subs	r4, #1
 80076a0:	e7c7      	b.n	8007632 <quorem+0x96>
 80076a2:	6812      	ldr	r2, [r2, #0]
 80076a4:	3b04      	subs	r3, #4
 80076a6:	2a00      	cmp	r2, #0
 80076a8:	d1f0      	bne.n	800768c <quorem+0xf0>
 80076aa:	3c01      	subs	r4, #1
 80076ac:	e7eb      	b.n	8007686 <quorem+0xea>
 80076ae:	2000      	movs	r0, #0
 80076b0:	e7ee      	b.n	8007690 <quorem+0xf4>
 80076b2:	0000      	movs	r0, r0
 80076b4:	0000      	movs	r0, r0
	...

080076b8 <_dtoa_r>:
 80076b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076bc:	ed2d 8b04 	vpush	{d8-d9}
 80076c0:	ec57 6b10 	vmov	r6, r7, d0
 80076c4:	b093      	sub	sp, #76	; 0x4c
 80076c6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80076c8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80076cc:	9106      	str	r1, [sp, #24]
 80076ce:	ee10 aa10 	vmov	sl, s0
 80076d2:	4604      	mov	r4, r0
 80076d4:	9209      	str	r2, [sp, #36]	; 0x24
 80076d6:	930c      	str	r3, [sp, #48]	; 0x30
 80076d8:	46bb      	mov	fp, r7
 80076da:	b975      	cbnz	r5, 80076fa <_dtoa_r+0x42>
 80076dc:	2010      	movs	r0, #16
 80076de:	f000 fed7 	bl	8008490 <malloc>
 80076e2:	4602      	mov	r2, r0
 80076e4:	6260      	str	r0, [r4, #36]	; 0x24
 80076e6:	b920      	cbnz	r0, 80076f2 <_dtoa_r+0x3a>
 80076e8:	4ba7      	ldr	r3, [pc, #668]	; (8007988 <_dtoa_r+0x2d0>)
 80076ea:	21ea      	movs	r1, #234	; 0xea
 80076ec:	48a7      	ldr	r0, [pc, #668]	; (800798c <_dtoa_r+0x2d4>)
 80076ee:	f001 fddf 	bl	80092b0 <__assert_func>
 80076f2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80076f6:	6005      	str	r5, [r0, #0]
 80076f8:	60c5      	str	r5, [r0, #12]
 80076fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80076fc:	6819      	ldr	r1, [r3, #0]
 80076fe:	b151      	cbz	r1, 8007716 <_dtoa_r+0x5e>
 8007700:	685a      	ldr	r2, [r3, #4]
 8007702:	604a      	str	r2, [r1, #4]
 8007704:	2301      	movs	r3, #1
 8007706:	4093      	lsls	r3, r2
 8007708:	608b      	str	r3, [r1, #8]
 800770a:	4620      	mov	r0, r4
 800770c:	f000 ff16 	bl	800853c <_Bfree>
 8007710:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007712:	2200      	movs	r2, #0
 8007714:	601a      	str	r2, [r3, #0]
 8007716:	1e3b      	subs	r3, r7, #0
 8007718:	bfaa      	itet	ge
 800771a:	2300      	movge	r3, #0
 800771c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007720:	f8c8 3000 	strge.w	r3, [r8]
 8007724:	4b9a      	ldr	r3, [pc, #616]	; (8007990 <_dtoa_r+0x2d8>)
 8007726:	bfbc      	itt	lt
 8007728:	2201      	movlt	r2, #1
 800772a:	f8c8 2000 	strlt.w	r2, [r8]
 800772e:	ea33 030b 	bics.w	r3, r3, fp
 8007732:	d11b      	bne.n	800776c <_dtoa_r+0xb4>
 8007734:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007736:	f242 730f 	movw	r3, #9999	; 0x270f
 800773a:	6013      	str	r3, [r2, #0]
 800773c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007740:	4333      	orrs	r3, r6
 8007742:	f000 8592 	beq.w	800826a <_dtoa_r+0xbb2>
 8007746:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007748:	b963      	cbnz	r3, 8007764 <_dtoa_r+0xac>
 800774a:	4b92      	ldr	r3, [pc, #584]	; (8007994 <_dtoa_r+0x2dc>)
 800774c:	e022      	b.n	8007794 <_dtoa_r+0xdc>
 800774e:	4b92      	ldr	r3, [pc, #584]	; (8007998 <_dtoa_r+0x2e0>)
 8007750:	9301      	str	r3, [sp, #4]
 8007752:	3308      	adds	r3, #8
 8007754:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007756:	6013      	str	r3, [r2, #0]
 8007758:	9801      	ldr	r0, [sp, #4]
 800775a:	b013      	add	sp, #76	; 0x4c
 800775c:	ecbd 8b04 	vpop	{d8-d9}
 8007760:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007764:	4b8b      	ldr	r3, [pc, #556]	; (8007994 <_dtoa_r+0x2dc>)
 8007766:	9301      	str	r3, [sp, #4]
 8007768:	3303      	adds	r3, #3
 800776a:	e7f3      	b.n	8007754 <_dtoa_r+0x9c>
 800776c:	2200      	movs	r2, #0
 800776e:	2300      	movs	r3, #0
 8007770:	4650      	mov	r0, sl
 8007772:	4659      	mov	r1, fp
 8007774:	f7f9 f9a8 	bl	8000ac8 <__aeabi_dcmpeq>
 8007778:	ec4b ab19 	vmov	d9, sl, fp
 800777c:	4680      	mov	r8, r0
 800777e:	b158      	cbz	r0, 8007798 <_dtoa_r+0xe0>
 8007780:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007782:	2301      	movs	r3, #1
 8007784:	6013      	str	r3, [r2, #0]
 8007786:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007788:	2b00      	cmp	r3, #0
 800778a:	f000 856b 	beq.w	8008264 <_dtoa_r+0xbac>
 800778e:	4883      	ldr	r0, [pc, #524]	; (800799c <_dtoa_r+0x2e4>)
 8007790:	6018      	str	r0, [r3, #0]
 8007792:	1e43      	subs	r3, r0, #1
 8007794:	9301      	str	r3, [sp, #4]
 8007796:	e7df      	b.n	8007758 <_dtoa_r+0xa0>
 8007798:	ec4b ab10 	vmov	d0, sl, fp
 800779c:	aa10      	add	r2, sp, #64	; 0x40
 800779e:	a911      	add	r1, sp, #68	; 0x44
 80077a0:	4620      	mov	r0, r4
 80077a2:	f001 f9b3 	bl	8008b0c <__d2b>
 80077a6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80077aa:	ee08 0a10 	vmov	s16, r0
 80077ae:	2d00      	cmp	r5, #0
 80077b0:	f000 8084 	beq.w	80078bc <_dtoa_r+0x204>
 80077b4:	ee19 3a90 	vmov	r3, s19
 80077b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80077bc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80077c0:	4656      	mov	r6, sl
 80077c2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80077c6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80077ca:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80077ce:	4b74      	ldr	r3, [pc, #464]	; (80079a0 <_dtoa_r+0x2e8>)
 80077d0:	2200      	movs	r2, #0
 80077d2:	4630      	mov	r0, r6
 80077d4:	4639      	mov	r1, r7
 80077d6:	f7f8 fd57 	bl	8000288 <__aeabi_dsub>
 80077da:	a365      	add	r3, pc, #404	; (adr r3, 8007970 <_dtoa_r+0x2b8>)
 80077dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077e0:	f7f8 ff0a 	bl	80005f8 <__aeabi_dmul>
 80077e4:	a364      	add	r3, pc, #400	; (adr r3, 8007978 <_dtoa_r+0x2c0>)
 80077e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ea:	f7f8 fd4f 	bl	800028c <__adddf3>
 80077ee:	4606      	mov	r6, r0
 80077f0:	4628      	mov	r0, r5
 80077f2:	460f      	mov	r7, r1
 80077f4:	f7f8 fe96 	bl	8000524 <__aeabi_i2d>
 80077f8:	a361      	add	r3, pc, #388	; (adr r3, 8007980 <_dtoa_r+0x2c8>)
 80077fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077fe:	f7f8 fefb 	bl	80005f8 <__aeabi_dmul>
 8007802:	4602      	mov	r2, r0
 8007804:	460b      	mov	r3, r1
 8007806:	4630      	mov	r0, r6
 8007808:	4639      	mov	r1, r7
 800780a:	f7f8 fd3f 	bl	800028c <__adddf3>
 800780e:	4606      	mov	r6, r0
 8007810:	460f      	mov	r7, r1
 8007812:	f7f9 f9a1 	bl	8000b58 <__aeabi_d2iz>
 8007816:	2200      	movs	r2, #0
 8007818:	9000      	str	r0, [sp, #0]
 800781a:	2300      	movs	r3, #0
 800781c:	4630      	mov	r0, r6
 800781e:	4639      	mov	r1, r7
 8007820:	f7f9 f95c 	bl	8000adc <__aeabi_dcmplt>
 8007824:	b150      	cbz	r0, 800783c <_dtoa_r+0x184>
 8007826:	9800      	ldr	r0, [sp, #0]
 8007828:	f7f8 fe7c 	bl	8000524 <__aeabi_i2d>
 800782c:	4632      	mov	r2, r6
 800782e:	463b      	mov	r3, r7
 8007830:	f7f9 f94a 	bl	8000ac8 <__aeabi_dcmpeq>
 8007834:	b910      	cbnz	r0, 800783c <_dtoa_r+0x184>
 8007836:	9b00      	ldr	r3, [sp, #0]
 8007838:	3b01      	subs	r3, #1
 800783a:	9300      	str	r3, [sp, #0]
 800783c:	9b00      	ldr	r3, [sp, #0]
 800783e:	2b16      	cmp	r3, #22
 8007840:	d85a      	bhi.n	80078f8 <_dtoa_r+0x240>
 8007842:	9a00      	ldr	r2, [sp, #0]
 8007844:	4b57      	ldr	r3, [pc, #348]	; (80079a4 <_dtoa_r+0x2ec>)
 8007846:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800784a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800784e:	ec51 0b19 	vmov	r0, r1, d9
 8007852:	f7f9 f943 	bl	8000adc <__aeabi_dcmplt>
 8007856:	2800      	cmp	r0, #0
 8007858:	d050      	beq.n	80078fc <_dtoa_r+0x244>
 800785a:	9b00      	ldr	r3, [sp, #0]
 800785c:	3b01      	subs	r3, #1
 800785e:	9300      	str	r3, [sp, #0]
 8007860:	2300      	movs	r3, #0
 8007862:	930b      	str	r3, [sp, #44]	; 0x2c
 8007864:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007866:	1b5d      	subs	r5, r3, r5
 8007868:	1e6b      	subs	r3, r5, #1
 800786a:	9305      	str	r3, [sp, #20]
 800786c:	bf45      	ittet	mi
 800786e:	f1c5 0301 	rsbmi	r3, r5, #1
 8007872:	9304      	strmi	r3, [sp, #16]
 8007874:	2300      	movpl	r3, #0
 8007876:	2300      	movmi	r3, #0
 8007878:	bf4c      	ite	mi
 800787a:	9305      	strmi	r3, [sp, #20]
 800787c:	9304      	strpl	r3, [sp, #16]
 800787e:	9b00      	ldr	r3, [sp, #0]
 8007880:	2b00      	cmp	r3, #0
 8007882:	db3d      	blt.n	8007900 <_dtoa_r+0x248>
 8007884:	9b05      	ldr	r3, [sp, #20]
 8007886:	9a00      	ldr	r2, [sp, #0]
 8007888:	920a      	str	r2, [sp, #40]	; 0x28
 800788a:	4413      	add	r3, r2
 800788c:	9305      	str	r3, [sp, #20]
 800788e:	2300      	movs	r3, #0
 8007890:	9307      	str	r3, [sp, #28]
 8007892:	9b06      	ldr	r3, [sp, #24]
 8007894:	2b09      	cmp	r3, #9
 8007896:	f200 8089 	bhi.w	80079ac <_dtoa_r+0x2f4>
 800789a:	2b05      	cmp	r3, #5
 800789c:	bfc4      	itt	gt
 800789e:	3b04      	subgt	r3, #4
 80078a0:	9306      	strgt	r3, [sp, #24]
 80078a2:	9b06      	ldr	r3, [sp, #24]
 80078a4:	f1a3 0302 	sub.w	r3, r3, #2
 80078a8:	bfcc      	ite	gt
 80078aa:	2500      	movgt	r5, #0
 80078ac:	2501      	movle	r5, #1
 80078ae:	2b03      	cmp	r3, #3
 80078b0:	f200 8087 	bhi.w	80079c2 <_dtoa_r+0x30a>
 80078b4:	e8df f003 	tbb	[pc, r3]
 80078b8:	59383a2d 	.word	0x59383a2d
 80078bc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80078c0:	441d      	add	r5, r3
 80078c2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80078c6:	2b20      	cmp	r3, #32
 80078c8:	bfc1      	itttt	gt
 80078ca:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80078ce:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80078d2:	fa0b f303 	lslgt.w	r3, fp, r3
 80078d6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80078da:	bfda      	itte	le
 80078dc:	f1c3 0320 	rsble	r3, r3, #32
 80078e0:	fa06 f003 	lslle.w	r0, r6, r3
 80078e4:	4318      	orrgt	r0, r3
 80078e6:	f7f8 fe0d 	bl	8000504 <__aeabi_ui2d>
 80078ea:	2301      	movs	r3, #1
 80078ec:	4606      	mov	r6, r0
 80078ee:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80078f2:	3d01      	subs	r5, #1
 80078f4:	930e      	str	r3, [sp, #56]	; 0x38
 80078f6:	e76a      	b.n	80077ce <_dtoa_r+0x116>
 80078f8:	2301      	movs	r3, #1
 80078fa:	e7b2      	b.n	8007862 <_dtoa_r+0x1aa>
 80078fc:	900b      	str	r0, [sp, #44]	; 0x2c
 80078fe:	e7b1      	b.n	8007864 <_dtoa_r+0x1ac>
 8007900:	9b04      	ldr	r3, [sp, #16]
 8007902:	9a00      	ldr	r2, [sp, #0]
 8007904:	1a9b      	subs	r3, r3, r2
 8007906:	9304      	str	r3, [sp, #16]
 8007908:	4253      	negs	r3, r2
 800790a:	9307      	str	r3, [sp, #28]
 800790c:	2300      	movs	r3, #0
 800790e:	930a      	str	r3, [sp, #40]	; 0x28
 8007910:	e7bf      	b.n	8007892 <_dtoa_r+0x1da>
 8007912:	2300      	movs	r3, #0
 8007914:	9308      	str	r3, [sp, #32]
 8007916:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007918:	2b00      	cmp	r3, #0
 800791a:	dc55      	bgt.n	80079c8 <_dtoa_r+0x310>
 800791c:	2301      	movs	r3, #1
 800791e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007922:	461a      	mov	r2, r3
 8007924:	9209      	str	r2, [sp, #36]	; 0x24
 8007926:	e00c      	b.n	8007942 <_dtoa_r+0x28a>
 8007928:	2301      	movs	r3, #1
 800792a:	e7f3      	b.n	8007914 <_dtoa_r+0x25c>
 800792c:	2300      	movs	r3, #0
 800792e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007930:	9308      	str	r3, [sp, #32]
 8007932:	9b00      	ldr	r3, [sp, #0]
 8007934:	4413      	add	r3, r2
 8007936:	9302      	str	r3, [sp, #8]
 8007938:	3301      	adds	r3, #1
 800793a:	2b01      	cmp	r3, #1
 800793c:	9303      	str	r3, [sp, #12]
 800793e:	bfb8      	it	lt
 8007940:	2301      	movlt	r3, #1
 8007942:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007944:	2200      	movs	r2, #0
 8007946:	6042      	str	r2, [r0, #4]
 8007948:	2204      	movs	r2, #4
 800794a:	f102 0614 	add.w	r6, r2, #20
 800794e:	429e      	cmp	r6, r3
 8007950:	6841      	ldr	r1, [r0, #4]
 8007952:	d93d      	bls.n	80079d0 <_dtoa_r+0x318>
 8007954:	4620      	mov	r0, r4
 8007956:	f000 fdb1 	bl	80084bc <_Balloc>
 800795a:	9001      	str	r0, [sp, #4]
 800795c:	2800      	cmp	r0, #0
 800795e:	d13b      	bne.n	80079d8 <_dtoa_r+0x320>
 8007960:	4b11      	ldr	r3, [pc, #68]	; (80079a8 <_dtoa_r+0x2f0>)
 8007962:	4602      	mov	r2, r0
 8007964:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007968:	e6c0      	b.n	80076ec <_dtoa_r+0x34>
 800796a:	2301      	movs	r3, #1
 800796c:	e7df      	b.n	800792e <_dtoa_r+0x276>
 800796e:	bf00      	nop
 8007970:	636f4361 	.word	0x636f4361
 8007974:	3fd287a7 	.word	0x3fd287a7
 8007978:	8b60c8b3 	.word	0x8b60c8b3
 800797c:	3fc68a28 	.word	0x3fc68a28
 8007980:	509f79fb 	.word	0x509f79fb
 8007984:	3fd34413 	.word	0x3fd34413
 8007988:	08009fb9 	.word	0x08009fb9
 800798c:	08009fd0 	.word	0x08009fd0
 8007990:	7ff00000 	.word	0x7ff00000
 8007994:	08009fb5 	.word	0x08009fb5
 8007998:	08009fac 	.word	0x08009fac
 800799c:	08009f89 	.word	0x08009f89
 80079a0:	3ff80000 	.word	0x3ff80000
 80079a4:	0800a120 	.word	0x0800a120
 80079a8:	0800a02b 	.word	0x0800a02b
 80079ac:	2501      	movs	r5, #1
 80079ae:	2300      	movs	r3, #0
 80079b0:	9306      	str	r3, [sp, #24]
 80079b2:	9508      	str	r5, [sp, #32]
 80079b4:	f04f 33ff 	mov.w	r3, #4294967295
 80079b8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80079bc:	2200      	movs	r2, #0
 80079be:	2312      	movs	r3, #18
 80079c0:	e7b0      	b.n	8007924 <_dtoa_r+0x26c>
 80079c2:	2301      	movs	r3, #1
 80079c4:	9308      	str	r3, [sp, #32]
 80079c6:	e7f5      	b.n	80079b4 <_dtoa_r+0x2fc>
 80079c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079ca:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80079ce:	e7b8      	b.n	8007942 <_dtoa_r+0x28a>
 80079d0:	3101      	adds	r1, #1
 80079d2:	6041      	str	r1, [r0, #4]
 80079d4:	0052      	lsls	r2, r2, #1
 80079d6:	e7b8      	b.n	800794a <_dtoa_r+0x292>
 80079d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80079da:	9a01      	ldr	r2, [sp, #4]
 80079dc:	601a      	str	r2, [r3, #0]
 80079de:	9b03      	ldr	r3, [sp, #12]
 80079e0:	2b0e      	cmp	r3, #14
 80079e2:	f200 809d 	bhi.w	8007b20 <_dtoa_r+0x468>
 80079e6:	2d00      	cmp	r5, #0
 80079e8:	f000 809a 	beq.w	8007b20 <_dtoa_r+0x468>
 80079ec:	9b00      	ldr	r3, [sp, #0]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	dd32      	ble.n	8007a58 <_dtoa_r+0x3a0>
 80079f2:	4ab7      	ldr	r2, [pc, #732]	; (8007cd0 <_dtoa_r+0x618>)
 80079f4:	f003 030f 	and.w	r3, r3, #15
 80079f8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80079fc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007a00:	9b00      	ldr	r3, [sp, #0]
 8007a02:	05d8      	lsls	r0, r3, #23
 8007a04:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007a08:	d516      	bpl.n	8007a38 <_dtoa_r+0x380>
 8007a0a:	4bb2      	ldr	r3, [pc, #712]	; (8007cd4 <_dtoa_r+0x61c>)
 8007a0c:	ec51 0b19 	vmov	r0, r1, d9
 8007a10:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007a14:	f7f8 ff1a 	bl	800084c <__aeabi_ddiv>
 8007a18:	f007 070f 	and.w	r7, r7, #15
 8007a1c:	4682      	mov	sl, r0
 8007a1e:	468b      	mov	fp, r1
 8007a20:	2503      	movs	r5, #3
 8007a22:	4eac      	ldr	r6, [pc, #688]	; (8007cd4 <_dtoa_r+0x61c>)
 8007a24:	b957      	cbnz	r7, 8007a3c <_dtoa_r+0x384>
 8007a26:	4642      	mov	r2, r8
 8007a28:	464b      	mov	r3, r9
 8007a2a:	4650      	mov	r0, sl
 8007a2c:	4659      	mov	r1, fp
 8007a2e:	f7f8 ff0d 	bl	800084c <__aeabi_ddiv>
 8007a32:	4682      	mov	sl, r0
 8007a34:	468b      	mov	fp, r1
 8007a36:	e028      	b.n	8007a8a <_dtoa_r+0x3d2>
 8007a38:	2502      	movs	r5, #2
 8007a3a:	e7f2      	b.n	8007a22 <_dtoa_r+0x36a>
 8007a3c:	07f9      	lsls	r1, r7, #31
 8007a3e:	d508      	bpl.n	8007a52 <_dtoa_r+0x39a>
 8007a40:	4640      	mov	r0, r8
 8007a42:	4649      	mov	r1, r9
 8007a44:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007a48:	f7f8 fdd6 	bl	80005f8 <__aeabi_dmul>
 8007a4c:	3501      	adds	r5, #1
 8007a4e:	4680      	mov	r8, r0
 8007a50:	4689      	mov	r9, r1
 8007a52:	107f      	asrs	r7, r7, #1
 8007a54:	3608      	adds	r6, #8
 8007a56:	e7e5      	b.n	8007a24 <_dtoa_r+0x36c>
 8007a58:	f000 809b 	beq.w	8007b92 <_dtoa_r+0x4da>
 8007a5c:	9b00      	ldr	r3, [sp, #0]
 8007a5e:	4f9d      	ldr	r7, [pc, #628]	; (8007cd4 <_dtoa_r+0x61c>)
 8007a60:	425e      	negs	r6, r3
 8007a62:	4b9b      	ldr	r3, [pc, #620]	; (8007cd0 <_dtoa_r+0x618>)
 8007a64:	f006 020f 	and.w	r2, r6, #15
 8007a68:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a70:	ec51 0b19 	vmov	r0, r1, d9
 8007a74:	f7f8 fdc0 	bl	80005f8 <__aeabi_dmul>
 8007a78:	1136      	asrs	r6, r6, #4
 8007a7a:	4682      	mov	sl, r0
 8007a7c:	468b      	mov	fp, r1
 8007a7e:	2300      	movs	r3, #0
 8007a80:	2502      	movs	r5, #2
 8007a82:	2e00      	cmp	r6, #0
 8007a84:	d17a      	bne.n	8007b7c <_dtoa_r+0x4c4>
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d1d3      	bne.n	8007a32 <_dtoa_r+0x37a>
 8007a8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	f000 8082 	beq.w	8007b96 <_dtoa_r+0x4de>
 8007a92:	4b91      	ldr	r3, [pc, #580]	; (8007cd8 <_dtoa_r+0x620>)
 8007a94:	2200      	movs	r2, #0
 8007a96:	4650      	mov	r0, sl
 8007a98:	4659      	mov	r1, fp
 8007a9a:	f7f9 f81f 	bl	8000adc <__aeabi_dcmplt>
 8007a9e:	2800      	cmp	r0, #0
 8007aa0:	d079      	beq.n	8007b96 <_dtoa_r+0x4de>
 8007aa2:	9b03      	ldr	r3, [sp, #12]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d076      	beq.n	8007b96 <_dtoa_r+0x4de>
 8007aa8:	9b02      	ldr	r3, [sp, #8]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	dd36      	ble.n	8007b1c <_dtoa_r+0x464>
 8007aae:	9b00      	ldr	r3, [sp, #0]
 8007ab0:	4650      	mov	r0, sl
 8007ab2:	4659      	mov	r1, fp
 8007ab4:	1e5f      	subs	r7, r3, #1
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	4b88      	ldr	r3, [pc, #544]	; (8007cdc <_dtoa_r+0x624>)
 8007aba:	f7f8 fd9d 	bl	80005f8 <__aeabi_dmul>
 8007abe:	9e02      	ldr	r6, [sp, #8]
 8007ac0:	4682      	mov	sl, r0
 8007ac2:	468b      	mov	fp, r1
 8007ac4:	3501      	adds	r5, #1
 8007ac6:	4628      	mov	r0, r5
 8007ac8:	f7f8 fd2c 	bl	8000524 <__aeabi_i2d>
 8007acc:	4652      	mov	r2, sl
 8007ace:	465b      	mov	r3, fp
 8007ad0:	f7f8 fd92 	bl	80005f8 <__aeabi_dmul>
 8007ad4:	4b82      	ldr	r3, [pc, #520]	; (8007ce0 <_dtoa_r+0x628>)
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	f7f8 fbd8 	bl	800028c <__adddf3>
 8007adc:	46d0      	mov	r8, sl
 8007ade:	46d9      	mov	r9, fp
 8007ae0:	4682      	mov	sl, r0
 8007ae2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8007ae6:	2e00      	cmp	r6, #0
 8007ae8:	d158      	bne.n	8007b9c <_dtoa_r+0x4e4>
 8007aea:	4b7e      	ldr	r3, [pc, #504]	; (8007ce4 <_dtoa_r+0x62c>)
 8007aec:	2200      	movs	r2, #0
 8007aee:	4640      	mov	r0, r8
 8007af0:	4649      	mov	r1, r9
 8007af2:	f7f8 fbc9 	bl	8000288 <__aeabi_dsub>
 8007af6:	4652      	mov	r2, sl
 8007af8:	465b      	mov	r3, fp
 8007afa:	4680      	mov	r8, r0
 8007afc:	4689      	mov	r9, r1
 8007afe:	f7f9 f80b 	bl	8000b18 <__aeabi_dcmpgt>
 8007b02:	2800      	cmp	r0, #0
 8007b04:	f040 8295 	bne.w	8008032 <_dtoa_r+0x97a>
 8007b08:	4652      	mov	r2, sl
 8007b0a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007b0e:	4640      	mov	r0, r8
 8007b10:	4649      	mov	r1, r9
 8007b12:	f7f8 ffe3 	bl	8000adc <__aeabi_dcmplt>
 8007b16:	2800      	cmp	r0, #0
 8007b18:	f040 8289 	bne.w	800802e <_dtoa_r+0x976>
 8007b1c:	ec5b ab19 	vmov	sl, fp, d9
 8007b20:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	f2c0 8148 	blt.w	8007db8 <_dtoa_r+0x700>
 8007b28:	9a00      	ldr	r2, [sp, #0]
 8007b2a:	2a0e      	cmp	r2, #14
 8007b2c:	f300 8144 	bgt.w	8007db8 <_dtoa_r+0x700>
 8007b30:	4b67      	ldr	r3, [pc, #412]	; (8007cd0 <_dtoa_r+0x618>)
 8007b32:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007b36:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007b3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	f280 80d5 	bge.w	8007cec <_dtoa_r+0x634>
 8007b42:	9b03      	ldr	r3, [sp, #12]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	f300 80d1 	bgt.w	8007cec <_dtoa_r+0x634>
 8007b4a:	f040 826f 	bne.w	800802c <_dtoa_r+0x974>
 8007b4e:	4b65      	ldr	r3, [pc, #404]	; (8007ce4 <_dtoa_r+0x62c>)
 8007b50:	2200      	movs	r2, #0
 8007b52:	4640      	mov	r0, r8
 8007b54:	4649      	mov	r1, r9
 8007b56:	f7f8 fd4f 	bl	80005f8 <__aeabi_dmul>
 8007b5a:	4652      	mov	r2, sl
 8007b5c:	465b      	mov	r3, fp
 8007b5e:	f7f8 ffd1 	bl	8000b04 <__aeabi_dcmpge>
 8007b62:	9e03      	ldr	r6, [sp, #12]
 8007b64:	4637      	mov	r7, r6
 8007b66:	2800      	cmp	r0, #0
 8007b68:	f040 8245 	bne.w	8007ff6 <_dtoa_r+0x93e>
 8007b6c:	9d01      	ldr	r5, [sp, #4]
 8007b6e:	2331      	movs	r3, #49	; 0x31
 8007b70:	f805 3b01 	strb.w	r3, [r5], #1
 8007b74:	9b00      	ldr	r3, [sp, #0]
 8007b76:	3301      	adds	r3, #1
 8007b78:	9300      	str	r3, [sp, #0]
 8007b7a:	e240      	b.n	8007ffe <_dtoa_r+0x946>
 8007b7c:	07f2      	lsls	r2, r6, #31
 8007b7e:	d505      	bpl.n	8007b8c <_dtoa_r+0x4d4>
 8007b80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b84:	f7f8 fd38 	bl	80005f8 <__aeabi_dmul>
 8007b88:	3501      	adds	r5, #1
 8007b8a:	2301      	movs	r3, #1
 8007b8c:	1076      	asrs	r6, r6, #1
 8007b8e:	3708      	adds	r7, #8
 8007b90:	e777      	b.n	8007a82 <_dtoa_r+0x3ca>
 8007b92:	2502      	movs	r5, #2
 8007b94:	e779      	b.n	8007a8a <_dtoa_r+0x3d2>
 8007b96:	9f00      	ldr	r7, [sp, #0]
 8007b98:	9e03      	ldr	r6, [sp, #12]
 8007b9a:	e794      	b.n	8007ac6 <_dtoa_r+0x40e>
 8007b9c:	9901      	ldr	r1, [sp, #4]
 8007b9e:	4b4c      	ldr	r3, [pc, #304]	; (8007cd0 <_dtoa_r+0x618>)
 8007ba0:	4431      	add	r1, r6
 8007ba2:	910d      	str	r1, [sp, #52]	; 0x34
 8007ba4:	9908      	ldr	r1, [sp, #32]
 8007ba6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007baa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007bae:	2900      	cmp	r1, #0
 8007bb0:	d043      	beq.n	8007c3a <_dtoa_r+0x582>
 8007bb2:	494d      	ldr	r1, [pc, #308]	; (8007ce8 <_dtoa_r+0x630>)
 8007bb4:	2000      	movs	r0, #0
 8007bb6:	f7f8 fe49 	bl	800084c <__aeabi_ddiv>
 8007bba:	4652      	mov	r2, sl
 8007bbc:	465b      	mov	r3, fp
 8007bbe:	f7f8 fb63 	bl	8000288 <__aeabi_dsub>
 8007bc2:	9d01      	ldr	r5, [sp, #4]
 8007bc4:	4682      	mov	sl, r0
 8007bc6:	468b      	mov	fp, r1
 8007bc8:	4649      	mov	r1, r9
 8007bca:	4640      	mov	r0, r8
 8007bcc:	f7f8 ffc4 	bl	8000b58 <__aeabi_d2iz>
 8007bd0:	4606      	mov	r6, r0
 8007bd2:	f7f8 fca7 	bl	8000524 <__aeabi_i2d>
 8007bd6:	4602      	mov	r2, r0
 8007bd8:	460b      	mov	r3, r1
 8007bda:	4640      	mov	r0, r8
 8007bdc:	4649      	mov	r1, r9
 8007bde:	f7f8 fb53 	bl	8000288 <__aeabi_dsub>
 8007be2:	3630      	adds	r6, #48	; 0x30
 8007be4:	f805 6b01 	strb.w	r6, [r5], #1
 8007be8:	4652      	mov	r2, sl
 8007bea:	465b      	mov	r3, fp
 8007bec:	4680      	mov	r8, r0
 8007bee:	4689      	mov	r9, r1
 8007bf0:	f7f8 ff74 	bl	8000adc <__aeabi_dcmplt>
 8007bf4:	2800      	cmp	r0, #0
 8007bf6:	d163      	bne.n	8007cc0 <_dtoa_r+0x608>
 8007bf8:	4642      	mov	r2, r8
 8007bfa:	464b      	mov	r3, r9
 8007bfc:	4936      	ldr	r1, [pc, #216]	; (8007cd8 <_dtoa_r+0x620>)
 8007bfe:	2000      	movs	r0, #0
 8007c00:	f7f8 fb42 	bl	8000288 <__aeabi_dsub>
 8007c04:	4652      	mov	r2, sl
 8007c06:	465b      	mov	r3, fp
 8007c08:	f7f8 ff68 	bl	8000adc <__aeabi_dcmplt>
 8007c0c:	2800      	cmp	r0, #0
 8007c0e:	f040 80b5 	bne.w	8007d7c <_dtoa_r+0x6c4>
 8007c12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c14:	429d      	cmp	r5, r3
 8007c16:	d081      	beq.n	8007b1c <_dtoa_r+0x464>
 8007c18:	4b30      	ldr	r3, [pc, #192]	; (8007cdc <_dtoa_r+0x624>)
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	4650      	mov	r0, sl
 8007c1e:	4659      	mov	r1, fp
 8007c20:	f7f8 fcea 	bl	80005f8 <__aeabi_dmul>
 8007c24:	4b2d      	ldr	r3, [pc, #180]	; (8007cdc <_dtoa_r+0x624>)
 8007c26:	4682      	mov	sl, r0
 8007c28:	468b      	mov	fp, r1
 8007c2a:	4640      	mov	r0, r8
 8007c2c:	4649      	mov	r1, r9
 8007c2e:	2200      	movs	r2, #0
 8007c30:	f7f8 fce2 	bl	80005f8 <__aeabi_dmul>
 8007c34:	4680      	mov	r8, r0
 8007c36:	4689      	mov	r9, r1
 8007c38:	e7c6      	b.n	8007bc8 <_dtoa_r+0x510>
 8007c3a:	4650      	mov	r0, sl
 8007c3c:	4659      	mov	r1, fp
 8007c3e:	f7f8 fcdb 	bl	80005f8 <__aeabi_dmul>
 8007c42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c44:	9d01      	ldr	r5, [sp, #4]
 8007c46:	930f      	str	r3, [sp, #60]	; 0x3c
 8007c48:	4682      	mov	sl, r0
 8007c4a:	468b      	mov	fp, r1
 8007c4c:	4649      	mov	r1, r9
 8007c4e:	4640      	mov	r0, r8
 8007c50:	f7f8 ff82 	bl	8000b58 <__aeabi_d2iz>
 8007c54:	4606      	mov	r6, r0
 8007c56:	f7f8 fc65 	bl	8000524 <__aeabi_i2d>
 8007c5a:	3630      	adds	r6, #48	; 0x30
 8007c5c:	4602      	mov	r2, r0
 8007c5e:	460b      	mov	r3, r1
 8007c60:	4640      	mov	r0, r8
 8007c62:	4649      	mov	r1, r9
 8007c64:	f7f8 fb10 	bl	8000288 <__aeabi_dsub>
 8007c68:	f805 6b01 	strb.w	r6, [r5], #1
 8007c6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c6e:	429d      	cmp	r5, r3
 8007c70:	4680      	mov	r8, r0
 8007c72:	4689      	mov	r9, r1
 8007c74:	f04f 0200 	mov.w	r2, #0
 8007c78:	d124      	bne.n	8007cc4 <_dtoa_r+0x60c>
 8007c7a:	4b1b      	ldr	r3, [pc, #108]	; (8007ce8 <_dtoa_r+0x630>)
 8007c7c:	4650      	mov	r0, sl
 8007c7e:	4659      	mov	r1, fp
 8007c80:	f7f8 fb04 	bl	800028c <__adddf3>
 8007c84:	4602      	mov	r2, r0
 8007c86:	460b      	mov	r3, r1
 8007c88:	4640      	mov	r0, r8
 8007c8a:	4649      	mov	r1, r9
 8007c8c:	f7f8 ff44 	bl	8000b18 <__aeabi_dcmpgt>
 8007c90:	2800      	cmp	r0, #0
 8007c92:	d173      	bne.n	8007d7c <_dtoa_r+0x6c4>
 8007c94:	4652      	mov	r2, sl
 8007c96:	465b      	mov	r3, fp
 8007c98:	4913      	ldr	r1, [pc, #76]	; (8007ce8 <_dtoa_r+0x630>)
 8007c9a:	2000      	movs	r0, #0
 8007c9c:	f7f8 faf4 	bl	8000288 <__aeabi_dsub>
 8007ca0:	4602      	mov	r2, r0
 8007ca2:	460b      	mov	r3, r1
 8007ca4:	4640      	mov	r0, r8
 8007ca6:	4649      	mov	r1, r9
 8007ca8:	f7f8 ff18 	bl	8000adc <__aeabi_dcmplt>
 8007cac:	2800      	cmp	r0, #0
 8007cae:	f43f af35 	beq.w	8007b1c <_dtoa_r+0x464>
 8007cb2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007cb4:	1e6b      	subs	r3, r5, #1
 8007cb6:	930f      	str	r3, [sp, #60]	; 0x3c
 8007cb8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007cbc:	2b30      	cmp	r3, #48	; 0x30
 8007cbe:	d0f8      	beq.n	8007cb2 <_dtoa_r+0x5fa>
 8007cc0:	9700      	str	r7, [sp, #0]
 8007cc2:	e049      	b.n	8007d58 <_dtoa_r+0x6a0>
 8007cc4:	4b05      	ldr	r3, [pc, #20]	; (8007cdc <_dtoa_r+0x624>)
 8007cc6:	f7f8 fc97 	bl	80005f8 <__aeabi_dmul>
 8007cca:	4680      	mov	r8, r0
 8007ccc:	4689      	mov	r9, r1
 8007cce:	e7bd      	b.n	8007c4c <_dtoa_r+0x594>
 8007cd0:	0800a120 	.word	0x0800a120
 8007cd4:	0800a0f8 	.word	0x0800a0f8
 8007cd8:	3ff00000 	.word	0x3ff00000
 8007cdc:	40240000 	.word	0x40240000
 8007ce0:	401c0000 	.word	0x401c0000
 8007ce4:	40140000 	.word	0x40140000
 8007ce8:	3fe00000 	.word	0x3fe00000
 8007cec:	9d01      	ldr	r5, [sp, #4]
 8007cee:	4656      	mov	r6, sl
 8007cf0:	465f      	mov	r7, fp
 8007cf2:	4642      	mov	r2, r8
 8007cf4:	464b      	mov	r3, r9
 8007cf6:	4630      	mov	r0, r6
 8007cf8:	4639      	mov	r1, r7
 8007cfa:	f7f8 fda7 	bl	800084c <__aeabi_ddiv>
 8007cfe:	f7f8 ff2b 	bl	8000b58 <__aeabi_d2iz>
 8007d02:	4682      	mov	sl, r0
 8007d04:	f7f8 fc0e 	bl	8000524 <__aeabi_i2d>
 8007d08:	4642      	mov	r2, r8
 8007d0a:	464b      	mov	r3, r9
 8007d0c:	f7f8 fc74 	bl	80005f8 <__aeabi_dmul>
 8007d10:	4602      	mov	r2, r0
 8007d12:	460b      	mov	r3, r1
 8007d14:	4630      	mov	r0, r6
 8007d16:	4639      	mov	r1, r7
 8007d18:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8007d1c:	f7f8 fab4 	bl	8000288 <__aeabi_dsub>
 8007d20:	f805 6b01 	strb.w	r6, [r5], #1
 8007d24:	9e01      	ldr	r6, [sp, #4]
 8007d26:	9f03      	ldr	r7, [sp, #12]
 8007d28:	1bae      	subs	r6, r5, r6
 8007d2a:	42b7      	cmp	r7, r6
 8007d2c:	4602      	mov	r2, r0
 8007d2e:	460b      	mov	r3, r1
 8007d30:	d135      	bne.n	8007d9e <_dtoa_r+0x6e6>
 8007d32:	f7f8 faab 	bl	800028c <__adddf3>
 8007d36:	4642      	mov	r2, r8
 8007d38:	464b      	mov	r3, r9
 8007d3a:	4606      	mov	r6, r0
 8007d3c:	460f      	mov	r7, r1
 8007d3e:	f7f8 feeb 	bl	8000b18 <__aeabi_dcmpgt>
 8007d42:	b9d0      	cbnz	r0, 8007d7a <_dtoa_r+0x6c2>
 8007d44:	4642      	mov	r2, r8
 8007d46:	464b      	mov	r3, r9
 8007d48:	4630      	mov	r0, r6
 8007d4a:	4639      	mov	r1, r7
 8007d4c:	f7f8 febc 	bl	8000ac8 <__aeabi_dcmpeq>
 8007d50:	b110      	cbz	r0, 8007d58 <_dtoa_r+0x6a0>
 8007d52:	f01a 0f01 	tst.w	sl, #1
 8007d56:	d110      	bne.n	8007d7a <_dtoa_r+0x6c2>
 8007d58:	4620      	mov	r0, r4
 8007d5a:	ee18 1a10 	vmov	r1, s16
 8007d5e:	f000 fbed 	bl	800853c <_Bfree>
 8007d62:	2300      	movs	r3, #0
 8007d64:	9800      	ldr	r0, [sp, #0]
 8007d66:	702b      	strb	r3, [r5, #0]
 8007d68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007d6a:	3001      	adds	r0, #1
 8007d6c:	6018      	str	r0, [r3, #0]
 8007d6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	f43f acf1 	beq.w	8007758 <_dtoa_r+0xa0>
 8007d76:	601d      	str	r5, [r3, #0]
 8007d78:	e4ee      	b.n	8007758 <_dtoa_r+0xa0>
 8007d7a:	9f00      	ldr	r7, [sp, #0]
 8007d7c:	462b      	mov	r3, r5
 8007d7e:	461d      	mov	r5, r3
 8007d80:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007d84:	2a39      	cmp	r2, #57	; 0x39
 8007d86:	d106      	bne.n	8007d96 <_dtoa_r+0x6de>
 8007d88:	9a01      	ldr	r2, [sp, #4]
 8007d8a:	429a      	cmp	r2, r3
 8007d8c:	d1f7      	bne.n	8007d7e <_dtoa_r+0x6c6>
 8007d8e:	9901      	ldr	r1, [sp, #4]
 8007d90:	2230      	movs	r2, #48	; 0x30
 8007d92:	3701      	adds	r7, #1
 8007d94:	700a      	strb	r2, [r1, #0]
 8007d96:	781a      	ldrb	r2, [r3, #0]
 8007d98:	3201      	adds	r2, #1
 8007d9a:	701a      	strb	r2, [r3, #0]
 8007d9c:	e790      	b.n	8007cc0 <_dtoa_r+0x608>
 8007d9e:	4ba6      	ldr	r3, [pc, #664]	; (8008038 <_dtoa_r+0x980>)
 8007da0:	2200      	movs	r2, #0
 8007da2:	f7f8 fc29 	bl	80005f8 <__aeabi_dmul>
 8007da6:	2200      	movs	r2, #0
 8007da8:	2300      	movs	r3, #0
 8007daa:	4606      	mov	r6, r0
 8007dac:	460f      	mov	r7, r1
 8007dae:	f7f8 fe8b 	bl	8000ac8 <__aeabi_dcmpeq>
 8007db2:	2800      	cmp	r0, #0
 8007db4:	d09d      	beq.n	8007cf2 <_dtoa_r+0x63a>
 8007db6:	e7cf      	b.n	8007d58 <_dtoa_r+0x6a0>
 8007db8:	9a08      	ldr	r2, [sp, #32]
 8007dba:	2a00      	cmp	r2, #0
 8007dbc:	f000 80d7 	beq.w	8007f6e <_dtoa_r+0x8b6>
 8007dc0:	9a06      	ldr	r2, [sp, #24]
 8007dc2:	2a01      	cmp	r2, #1
 8007dc4:	f300 80ba 	bgt.w	8007f3c <_dtoa_r+0x884>
 8007dc8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007dca:	2a00      	cmp	r2, #0
 8007dcc:	f000 80b2 	beq.w	8007f34 <_dtoa_r+0x87c>
 8007dd0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007dd4:	9e07      	ldr	r6, [sp, #28]
 8007dd6:	9d04      	ldr	r5, [sp, #16]
 8007dd8:	9a04      	ldr	r2, [sp, #16]
 8007dda:	441a      	add	r2, r3
 8007ddc:	9204      	str	r2, [sp, #16]
 8007dde:	9a05      	ldr	r2, [sp, #20]
 8007de0:	2101      	movs	r1, #1
 8007de2:	441a      	add	r2, r3
 8007de4:	4620      	mov	r0, r4
 8007de6:	9205      	str	r2, [sp, #20]
 8007de8:	f000 fc60 	bl	80086ac <__i2b>
 8007dec:	4607      	mov	r7, r0
 8007dee:	2d00      	cmp	r5, #0
 8007df0:	dd0c      	ble.n	8007e0c <_dtoa_r+0x754>
 8007df2:	9b05      	ldr	r3, [sp, #20]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	dd09      	ble.n	8007e0c <_dtoa_r+0x754>
 8007df8:	42ab      	cmp	r3, r5
 8007dfa:	9a04      	ldr	r2, [sp, #16]
 8007dfc:	bfa8      	it	ge
 8007dfe:	462b      	movge	r3, r5
 8007e00:	1ad2      	subs	r2, r2, r3
 8007e02:	9204      	str	r2, [sp, #16]
 8007e04:	9a05      	ldr	r2, [sp, #20]
 8007e06:	1aed      	subs	r5, r5, r3
 8007e08:	1ad3      	subs	r3, r2, r3
 8007e0a:	9305      	str	r3, [sp, #20]
 8007e0c:	9b07      	ldr	r3, [sp, #28]
 8007e0e:	b31b      	cbz	r3, 8007e58 <_dtoa_r+0x7a0>
 8007e10:	9b08      	ldr	r3, [sp, #32]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	f000 80af 	beq.w	8007f76 <_dtoa_r+0x8be>
 8007e18:	2e00      	cmp	r6, #0
 8007e1a:	dd13      	ble.n	8007e44 <_dtoa_r+0x78c>
 8007e1c:	4639      	mov	r1, r7
 8007e1e:	4632      	mov	r2, r6
 8007e20:	4620      	mov	r0, r4
 8007e22:	f000 fd03 	bl	800882c <__pow5mult>
 8007e26:	ee18 2a10 	vmov	r2, s16
 8007e2a:	4601      	mov	r1, r0
 8007e2c:	4607      	mov	r7, r0
 8007e2e:	4620      	mov	r0, r4
 8007e30:	f000 fc52 	bl	80086d8 <__multiply>
 8007e34:	ee18 1a10 	vmov	r1, s16
 8007e38:	4680      	mov	r8, r0
 8007e3a:	4620      	mov	r0, r4
 8007e3c:	f000 fb7e 	bl	800853c <_Bfree>
 8007e40:	ee08 8a10 	vmov	s16, r8
 8007e44:	9b07      	ldr	r3, [sp, #28]
 8007e46:	1b9a      	subs	r2, r3, r6
 8007e48:	d006      	beq.n	8007e58 <_dtoa_r+0x7a0>
 8007e4a:	ee18 1a10 	vmov	r1, s16
 8007e4e:	4620      	mov	r0, r4
 8007e50:	f000 fcec 	bl	800882c <__pow5mult>
 8007e54:	ee08 0a10 	vmov	s16, r0
 8007e58:	2101      	movs	r1, #1
 8007e5a:	4620      	mov	r0, r4
 8007e5c:	f000 fc26 	bl	80086ac <__i2b>
 8007e60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	4606      	mov	r6, r0
 8007e66:	f340 8088 	ble.w	8007f7a <_dtoa_r+0x8c2>
 8007e6a:	461a      	mov	r2, r3
 8007e6c:	4601      	mov	r1, r0
 8007e6e:	4620      	mov	r0, r4
 8007e70:	f000 fcdc 	bl	800882c <__pow5mult>
 8007e74:	9b06      	ldr	r3, [sp, #24]
 8007e76:	2b01      	cmp	r3, #1
 8007e78:	4606      	mov	r6, r0
 8007e7a:	f340 8081 	ble.w	8007f80 <_dtoa_r+0x8c8>
 8007e7e:	f04f 0800 	mov.w	r8, #0
 8007e82:	6933      	ldr	r3, [r6, #16]
 8007e84:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007e88:	6918      	ldr	r0, [r3, #16]
 8007e8a:	f000 fbbf 	bl	800860c <__hi0bits>
 8007e8e:	f1c0 0020 	rsb	r0, r0, #32
 8007e92:	9b05      	ldr	r3, [sp, #20]
 8007e94:	4418      	add	r0, r3
 8007e96:	f010 001f 	ands.w	r0, r0, #31
 8007e9a:	f000 8092 	beq.w	8007fc2 <_dtoa_r+0x90a>
 8007e9e:	f1c0 0320 	rsb	r3, r0, #32
 8007ea2:	2b04      	cmp	r3, #4
 8007ea4:	f340 808a 	ble.w	8007fbc <_dtoa_r+0x904>
 8007ea8:	f1c0 001c 	rsb	r0, r0, #28
 8007eac:	9b04      	ldr	r3, [sp, #16]
 8007eae:	4403      	add	r3, r0
 8007eb0:	9304      	str	r3, [sp, #16]
 8007eb2:	9b05      	ldr	r3, [sp, #20]
 8007eb4:	4403      	add	r3, r0
 8007eb6:	4405      	add	r5, r0
 8007eb8:	9305      	str	r3, [sp, #20]
 8007eba:	9b04      	ldr	r3, [sp, #16]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	dd07      	ble.n	8007ed0 <_dtoa_r+0x818>
 8007ec0:	ee18 1a10 	vmov	r1, s16
 8007ec4:	461a      	mov	r2, r3
 8007ec6:	4620      	mov	r0, r4
 8007ec8:	f000 fd0a 	bl	80088e0 <__lshift>
 8007ecc:	ee08 0a10 	vmov	s16, r0
 8007ed0:	9b05      	ldr	r3, [sp, #20]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	dd05      	ble.n	8007ee2 <_dtoa_r+0x82a>
 8007ed6:	4631      	mov	r1, r6
 8007ed8:	461a      	mov	r2, r3
 8007eda:	4620      	mov	r0, r4
 8007edc:	f000 fd00 	bl	80088e0 <__lshift>
 8007ee0:	4606      	mov	r6, r0
 8007ee2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d06e      	beq.n	8007fc6 <_dtoa_r+0x90e>
 8007ee8:	ee18 0a10 	vmov	r0, s16
 8007eec:	4631      	mov	r1, r6
 8007eee:	f000 fd67 	bl	80089c0 <__mcmp>
 8007ef2:	2800      	cmp	r0, #0
 8007ef4:	da67      	bge.n	8007fc6 <_dtoa_r+0x90e>
 8007ef6:	9b00      	ldr	r3, [sp, #0]
 8007ef8:	3b01      	subs	r3, #1
 8007efa:	ee18 1a10 	vmov	r1, s16
 8007efe:	9300      	str	r3, [sp, #0]
 8007f00:	220a      	movs	r2, #10
 8007f02:	2300      	movs	r3, #0
 8007f04:	4620      	mov	r0, r4
 8007f06:	f000 fb3b 	bl	8008580 <__multadd>
 8007f0a:	9b08      	ldr	r3, [sp, #32]
 8007f0c:	ee08 0a10 	vmov	s16, r0
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	f000 81b1 	beq.w	8008278 <_dtoa_r+0xbc0>
 8007f16:	2300      	movs	r3, #0
 8007f18:	4639      	mov	r1, r7
 8007f1a:	220a      	movs	r2, #10
 8007f1c:	4620      	mov	r0, r4
 8007f1e:	f000 fb2f 	bl	8008580 <__multadd>
 8007f22:	9b02      	ldr	r3, [sp, #8]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	4607      	mov	r7, r0
 8007f28:	f300 808e 	bgt.w	8008048 <_dtoa_r+0x990>
 8007f2c:	9b06      	ldr	r3, [sp, #24]
 8007f2e:	2b02      	cmp	r3, #2
 8007f30:	dc51      	bgt.n	8007fd6 <_dtoa_r+0x91e>
 8007f32:	e089      	b.n	8008048 <_dtoa_r+0x990>
 8007f34:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007f36:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007f3a:	e74b      	b.n	8007dd4 <_dtoa_r+0x71c>
 8007f3c:	9b03      	ldr	r3, [sp, #12]
 8007f3e:	1e5e      	subs	r6, r3, #1
 8007f40:	9b07      	ldr	r3, [sp, #28]
 8007f42:	42b3      	cmp	r3, r6
 8007f44:	bfbf      	itttt	lt
 8007f46:	9b07      	ldrlt	r3, [sp, #28]
 8007f48:	9607      	strlt	r6, [sp, #28]
 8007f4a:	1af2      	sublt	r2, r6, r3
 8007f4c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007f4e:	bfb6      	itet	lt
 8007f50:	189b      	addlt	r3, r3, r2
 8007f52:	1b9e      	subge	r6, r3, r6
 8007f54:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007f56:	9b03      	ldr	r3, [sp, #12]
 8007f58:	bfb8      	it	lt
 8007f5a:	2600      	movlt	r6, #0
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	bfb7      	itett	lt
 8007f60:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8007f64:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007f68:	1a9d      	sublt	r5, r3, r2
 8007f6a:	2300      	movlt	r3, #0
 8007f6c:	e734      	b.n	8007dd8 <_dtoa_r+0x720>
 8007f6e:	9e07      	ldr	r6, [sp, #28]
 8007f70:	9d04      	ldr	r5, [sp, #16]
 8007f72:	9f08      	ldr	r7, [sp, #32]
 8007f74:	e73b      	b.n	8007dee <_dtoa_r+0x736>
 8007f76:	9a07      	ldr	r2, [sp, #28]
 8007f78:	e767      	b.n	8007e4a <_dtoa_r+0x792>
 8007f7a:	9b06      	ldr	r3, [sp, #24]
 8007f7c:	2b01      	cmp	r3, #1
 8007f7e:	dc18      	bgt.n	8007fb2 <_dtoa_r+0x8fa>
 8007f80:	f1ba 0f00 	cmp.w	sl, #0
 8007f84:	d115      	bne.n	8007fb2 <_dtoa_r+0x8fa>
 8007f86:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007f8a:	b993      	cbnz	r3, 8007fb2 <_dtoa_r+0x8fa>
 8007f8c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007f90:	0d1b      	lsrs	r3, r3, #20
 8007f92:	051b      	lsls	r3, r3, #20
 8007f94:	b183      	cbz	r3, 8007fb8 <_dtoa_r+0x900>
 8007f96:	9b04      	ldr	r3, [sp, #16]
 8007f98:	3301      	adds	r3, #1
 8007f9a:	9304      	str	r3, [sp, #16]
 8007f9c:	9b05      	ldr	r3, [sp, #20]
 8007f9e:	3301      	adds	r3, #1
 8007fa0:	9305      	str	r3, [sp, #20]
 8007fa2:	f04f 0801 	mov.w	r8, #1
 8007fa6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	f47f af6a 	bne.w	8007e82 <_dtoa_r+0x7ca>
 8007fae:	2001      	movs	r0, #1
 8007fb0:	e76f      	b.n	8007e92 <_dtoa_r+0x7da>
 8007fb2:	f04f 0800 	mov.w	r8, #0
 8007fb6:	e7f6      	b.n	8007fa6 <_dtoa_r+0x8ee>
 8007fb8:	4698      	mov	r8, r3
 8007fba:	e7f4      	b.n	8007fa6 <_dtoa_r+0x8ee>
 8007fbc:	f43f af7d 	beq.w	8007eba <_dtoa_r+0x802>
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	301c      	adds	r0, #28
 8007fc4:	e772      	b.n	8007eac <_dtoa_r+0x7f4>
 8007fc6:	9b03      	ldr	r3, [sp, #12]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	dc37      	bgt.n	800803c <_dtoa_r+0x984>
 8007fcc:	9b06      	ldr	r3, [sp, #24]
 8007fce:	2b02      	cmp	r3, #2
 8007fd0:	dd34      	ble.n	800803c <_dtoa_r+0x984>
 8007fd2:	9b03      	ldr	r3, [sp, #12]
 8007fd4:	9302      	str	r3, [sp, #8]
 8007fd6:	9b02      	ldr	r3, [sp, #8]
 8007fd8:	b96b      	cbnz	r3, 8007ff6 <_dtoa_r+0x93e>
 8007fda:	4631      	mov	r1, r6
 8007fdc:	2205      	movs	r2, #5
 8007fde:	4620      	mov	r0, r4
 8007fe0:	f000 face 	bl	8008580 <__multadd>
 8007fe4:	4601      	mov	r1, r0
 8007fe6:	4606      	mov	r6, r0
 8007fe8:	ee18 0a10 	vmov	r0, s16
 8007fec:	f000 fce8 	bl	80089c0 <__mcmp>
 8007ff0:	2800      	cmp	r0, #0
 8007ff2:	f73f adbb 	bgt.w	8007b6c <_dtoa_r+0x4b4>
 8007ff6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ff8:	9d01      	ldr	r5, [sp, #4]
 8007ffa:	43db      	mvns	r3, r3
 8007ffc:	9300      	str	r3, [sp, #0]
 8007ffe:	f04f 0800 	mov.w	r8, #0
 8008002:	4631      	mov	r1, r6
 8008004:	4620      	mov	r0, r4
 8008006:	f000 fa99 	bl	800853c <_Bfree>
 800800a:	2f00      	cmp	r7, #0
 800800c:	f43f aea4 	beq.w	8007d58 <_dtoa_r+0x6a0>
 8008010:	f1b8 0f00 	cmp.w	r8, #0
 8008014:	d005      	beq.n	8008022 <_dtoa_r+0x96a>
 8008016:	45b8      	cmp	r8, r7
 8008018:	d003      	beq.n	8008022 <_dtoa_r+0x96a>
 800801a:	4641      	mov	r1, r8
 800801c:	4620      	mov	r0, r4
 800801e:	f000 fa8d 	bl	800853c <_Bfree>
 8008022:	4639      	mov	r1, r7
 8008024:	4620      	mov	r0, r4
 8008026:	f000 fa89 	bl	800853c <_Bfree>
 800802a:	e695      	b.n	8007d58 <_dtoa_r+0x6a0>
 800802c:	2600      	movs	r6, #0
 800802e:	4637      	mov	r7, r6
 8008030:	e7e1      	b.n	8007ff6 <_dtoa_r+0x93e>
 8008032:	9700      	str	r7, [sp, #0]
 8008034:	4637      	mov	r7, r6
 8008036:	e599      	b.n	8007b6c <_dtoa_r+0x4b4>
 8008038:	40240000 	.word	0x40240000
 800803c:	9b08      	ldr	r3, [sp, #32]
 800803e:	2b00      	cmp	r3, #0
 8008040:	f000 80ca 	beq.w	80081d8 <_dtoa_r+0xb20>
 8008044:	9b03      	ldr	r3, [sp, #12]
 8008046:	9302      	str	r3, [sp, #8]
 8008048:	2d00      	cmp	r5, #0
 800804a:	dd05      	ble.n	8008058 <_dtoa_r+0x9a0>
 800804c:	4639      	mov	r1, r7
 800804e:	462a      	mov	r2, r5
 8008050:	4620      	mov	r0, r4
 8008052:	f000 fc45 	bl	80088e0 <__lshift>
 8008056:	4607      	mov	r7, r0
 8008058:	f1b8 0f00 	cmp.w	r8, #0
 800805c:	d05b      	beq.n	8008116 <_dtoa_r+0xa5e>
 800805e:	6879      	ldr	r1, [r7, #4]
 8008060:	4620      	mov	r0, r4
 8008062:	f000 fa2b 	bl	80084bc <_Balloc>
 8008066:	4605      	mov	r5, r0
 8008068:	b928      	cbnz	r0, 8008076 <_dtoa_r+0x9be>
 800806a:	4b87      	ldr	r3, [pc, #540]	; (8008288 <_dtoa_r+0xbd0>)
 800806c:	4602      	mov	r2, r0
 800806e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008072:	f7ff bb3b 	b.w	80076ec <_dtoa_r+0x34>
 8008076:	693a      	ldr	r2, [r7, #16]
 8008078:	3202      	adds	r2, #2
 800807a:	0092      	lsls	r2, r2, #2
 800807c:	f107 010c 	add.w	r1, r7, #12
 8008080:	300c      	adds	r0, #12
 8008082:	f000 fa0d 	bl	80084a0 <memcpy>
 8008086:	2201      	movs	r2, #1
 8008088:	4629      	mov	r1, r5
 800808a:	4620      	mov	r0, r4
 800808c:	f000 fc28 	bl	80088e0 <__lshift>
 8008090:	9b01      	ldr	r3, [sp, #4]
 8008092:	f103 0901 	add.w	r9, r3, #1
 8008096:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800809a:	4413      	add	r3, r2
 800809c:	9305      	str	r3, [sp, #20]
 800809e:	f00a 0301 	and.w	r3, sl, #1
 80080a2:	46b8      	mov	r8, r7
 80080a4:	9304      	str	r3, [sp, #16]
 80080a6:	4607      	mov	r7, r0
 80080a8:	4631      	mov	r1, r6
 80080aa:	ee18 0a10 	vmov	r0, s16
 80080ae:	f7ff fa75 	bl	800759c <quorem>
 80080b2:	4641      	mov	r1, r8
 80080b4:	9002      	str	r0, [sp, #8]
 80080b6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80080ba:	ee18 0a10 	vmov	r0, s16
 80080be:	f000 fc7f 	bl	80089c0 <__mcmp>
 80080c2:	463a      	mov	r2, r7
 80080c4:	9003      	str	r0, [sp, #12]
 80080c6:	4631      	mov	r1, r6
 80080c8:	4620      	mov	r0, r4
 80080ca:	f000 fc95 	bl	80089f8 <__mdiff>
 80080ce:	68c2      	ldr	r2, [r0, #12]
 80080d0:	f109 3bff 	add.w	fp, r9, #4294967295
 80080d4:	4605      	mov	r5, r0
 80080d6:	bb02      	cbnz	r2, 800811a <_dtoa_r+0xa62>
 80080d8:	4601      	mov	r1, r0
 80080da:	ee18 0a10 	vmov	r0, s16
 80080de:	f000 fc6f 	bl	80089c0 <__mcmp>
 80080e2:	4602      	mov	r2, r0
 80080e4:	4629      	mov	r1, r5
 80080e6:	4620      	mov	r0, r4
 80080e8:	9207      	str	r2, [sp, #28]
 80080ea:	f000 fa27 	bl	800853c <_Bfree>
 80080ee:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80080f2:	ea43 0102 	orr.w	r1, r3, r2
 80080f6:	9b04      	ldr	r3, [sp, #16]
 80080f8:	430b      	orrs	r3, r1
 80080fa:	464d      	mov	r5, r9
 80080fc:	d10f      	bne.n	800811e <_dtoa_r+0xa66>
 80080fe:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008102:	d02a      	beq.n	800815a <_dtoa_r+0xaa2>
 8008104:	9b03      	ldr	r3, [sp, #12]
 8008106:	2b00      	cmp	r3, #0
 8008108:	dd02      	ble.n	8008110 <_dtoa_r+0xa58>
 800810a:	9b02      	ldr	r3, [sp, #8]
 800810c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008110:	f88b a000 	strb.w	sl, [fp]
 8008114:	e775      	b.n	8008002 <_dtoa_r+0x94a>
 8008116:	4638      	mov	r0, r7
 8008118:	e7ba      	b.n	8008090 <_dtoa_r+0x9d8>
 800811a:	2201      	movs	r2, #1
 800811c:	e7e2      	b.n	80080e4 <_dtoa_r+0xa2c>
 800811e:	9b03      	ldr	r3, [sp, #12]
 8008120:	2b00      	cmp	r3, #0
 8008122:	db04      	blt.n	800812e <_dtoa_r+0xa76>
 8008124:	9906      	ldr	r1, [sp, #24]
 8008126:	430b      	orrs	r3, r1
 8008128:	9904      	ldr	r1, [sp, #16]
 800812a:	430b      	orrs	r3, r1
 800812c:	d122      	bne.n	8008174 <_dtoa_r+0xabc>
 800812e:	2a00      	cmp	r2, #0
 8008130:	ddee      	ble.n	8008110 <_dtoa_r+0xa58>
 8008132:	ee18 1a10 	vmov	r1, s16
 8008136:	2201      	movs	r2, #1
 8008138:	4620      	mov	r0, r4
 800813a:	f000 fbd1 	bl	80088e0 <__lshift>
 800813e:	4631      	mov	r1, r6
 8008140:	ee08 0a10 	vmov	s16, r0
 8008144:	f000 fc3c 	bl	80089c0 <__mcmp>
 8008148:	2800      	cmp	r0, #0
 800814a:	dc03      	bgt.n	8008154 <_dtoa_r+0xa9c>
 800814c:	d1e0      	bne.n	8008110 <_dtoa_r+0xa58>
 800814e:	f01a 0f01 	tst.w	sl, #1
 8008152:	d0dd      	beq.n	8008110 <_dtoa_r+0xa58>
 8008154:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008158:	d1d7      	bne.n	800810a <_dtoa_r+0xa52>
 800815a:	2339      	movs	r3, #57	; 0x39
 800815c:	f88b 3000 	strb.w	r3, [fp]
 8008160:	462b      	mov	r3, r5
 8008162:	461d      	mov	r5, r3
 8008164:	3b01      	subs	r3, #1
 8008166:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800816a:	2a39      	cmp	r2, #57	; 0x39
 800816c:	d071      	beq.n	8008252 <_dtoa_r+0xb9a>
 800816e:	3201      	adds	r2, #1
 8008170:	701a      	strb	r2, [r3, #0]
 8008172:	e746      	b.n	8008002 <_dtoa_r+0x94a>
 8008174:	2a00      	cmp	r2, #0
 8008176:	dd07      	ble.n	8008188 <_dtoa_r+0xad0>
 8008178:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800817c:	d0ed      	beq.n	800815a <_dtoa_r+0xaa2>
 800817e:	f10a 0301 	add.w	r3, sl, #1
 8008182:	f88b 3000 	strb.w	r3, [fp]
 8008186:	e73c      	b.n	8008002 <_dtoa_r+0x94a>
 8008188:	9b05      	ldr	r3, [sp, #20]
 800818a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800818e:	4599      	cmp	r9, r3
 8008190:	d047      	beq.n	8008222 <_dtoa_r+0xb6a>
 8008192:	ee18 1a10 	vmov	r1, s16
 8008196:	2300      	movs	r3, #0
 8008198:	220a      	movs	r2, #10
 800819a:	4620      	mov	r0, r4
 800819c:	f000 f9f0 	bl	8008580 <__multadd>
 80081a0:	45b8      	cmp	r8, r7
 80081a2:	ee08 0a10 	vmov	s16, r0
 80081a6:	f04f 0300 	mov.w	r3, #0
 80081aa:	f04f 020a 	mov.w	r2, #10
 80081ae:	4641      	mov	r1, r8
 80081b0:	4620      	mov	r0, r4
 80081b2:	d106      	bne.n	80081c2 <_dtoa_r+0xb0a>
 80081b4:	f000 f9e4 	bl	8008580 <__multadd>
 80081b8:	4680      	mov	r8, r0
 80081ba:	4607      	mov	r7, r0
 80081bc:	f109 0901 	add.w	r9, r9, #1
 80081c0:	e772      	b.n	80080a8 <_dtoa_r+0x9f0>
 80081c2:	f000 f9dd 	bl	8008580 <__multadd>
 80081c6:	4639      	mov	r1, r7
 80081c8:	4680      	mov	r8, r0
 80081ca:	2300      	movs	r3, #0
 80081cc:	220a      	movs	r2, #10
 80081ce:	4620      	mov	r0, r4
 80081d0:	f000 f9d6 	bl	8008580 <__multadd>
 80081d4:	4607      	mov	r7, r0
 80081d6:	e7f1      	b.n	80081bc <_dtoa_r+0xb04>
 80081d8:	9b03      	ldr	r3, [sp, #12]
 80081da:	9302      	str	r3, [sp, #8]
 80081dc:	9d01      	ldr	r5, [sp, #4]
 80081de:	ee18 0a10 	vmov	r0, s16
 80081e2:	4631      	mov	r1, r6
 80081e4:	f7ff f9da 	bl	800759c <quorem>
 80081e8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80081ec:	9b01      	ldr	r3, [sp, #4]
 80081ee:	f805 ab01 	strb.w	sl, [r5], #1
 80081f2:	1aea      	subs	r2, r5, r3
 80081f4:	9b02      	ldr	r3, [sp, #8]
 80081f6:	4293      	cmp	r3, r2
 80081f8:	dd09      	ble.n	800820e <_dtoa_r+0xb56>
 80081fa:	ee18 1a10 	vmov	r1, s16
 80081fe:	2300      	movs	r3, #0
 8008200:	220a      	movs	r2, #10
 8008202:	4620      	mov	r0, r4
 8008204:	f000 f9bc 	bl	8008580 <__multadd>
 8008208:	ee08 0a10 	vmov	s16, r0
 800820c:	e7e7      	b.n	80081de <_dtoa_r+0xb26>
 800820e:	9b02      	ldr	r3, [sp, #8]
 8008210:	2b00      	cmp	r3, #0
 8008212:	bfc8      	it	gt
 8008214:	461d      	movgt	r5, r3
 8008216:	9b01      	ldr	r3, [sp, #4]
 8008218:	bfd8      	it	le
 800821a:	2501      	movle	r5, #1
 800821c:	441d      	add	r5, r3
 800821e:	f04f 0800 	mov.w	r8, #0
 8008222:	ee18 1a10 	vmov	r1, s16
 8008226:	2201      	movs	r2, #1
 8008228:	4620      	mov	r0, r4
 800822a:	f000 fb59 	bl	80088e0 <__lshift>
 800822e:	4631      	mov	r1, r6
 8008230:	ee08 0a10 	vmov	s16, r0
 8008234:	f000 fbc4 	bl	80089c0 <__mcmp>
 8008238:	2800      	cmp	r0, #0
 800823a:	dc91      	bgt.n	8008160 <_dtoa_r+0xaa8>
 800823c:	d102      	bne.n	8008244 <_dtoa_r+0xb8c>
 800823e:	f01a 0f01 	tst.w	sl, #1
 8008242:	d18d      	bne.n	8008160 <_dtoa_r+0xaa8>
 8008244:	462b      	mov	r3, r5
 8008246:	461d      	mov	r5, r3
 8008248:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800824c:	2a30      	cmp	r2, #48	; 0x30
 800824e:	d0fa      	beq.n	8008246 <_dtoa_r+0xb8e>
 8008250:	e6d7      	b.n	8008002 <_dtoa_r+0x94a>
 8008252:	9a01      	ldr	r2, [sp, #4]
 8008254:	429a      	cmp	r2, r3
 8008256:	d184      	bne.n	8008162 <_dtoa_r+0xaaa>
 8008258:	9b00      	ldr	r3, [sp, #0]
 800825a:	3301      	adds	r3, #1
 800825c:	9300      	str	r3, [sp, #0]
 800825e:	2331      	movs	r3, #49	; 0x31
 8008260:	7013      	strb	r3, [r2, #0]
 8008262:	e6ce      	b.n	8008002 <_dtoa_r+0x94a>
 8008264:	4b09      	ldr	r3, [pc, #36]	; (800828c <_dtoa_r+0xbd4>)
 8008266:	f7ff ba95 	b.w	8007794 <_dtoa_r+0xdc>
 800826a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800826c:	2b00      	cmp	r3, #0
 800826e:	f47f aa6e 	bne.w	800774e <_dtoa_r+0x96>
 8008272:	4b07      	ldr	r3, [pc, #28]	; (8008290 <_dtoa_r+0xbd8>)
 8008274:	f7ff ba8e 	b.w	8007794 <_dtoa_r+0xdc>
 8008278:	9b02      	ldr	r3, [sp, #8]
 800827a:	2b00      	cmp	r3, #0
 800827c:	dcae      	bgt.n	80081dc <_dtoa_r+0xb24>
 800827e:	9b06      	ldr	r3, [sp, #24]
 8008280:	2b02      	cmp	r3, #2
 8008282:	f73f aea8 	bgt.w	8007fd6 <_dtoa_r+0x91e>
 8008286:	e7a9      	b.n	80081dc <_dtoa_r+0xb24>
 8008288:	0800a02b 	.word	0x0800a02b
 800828c:	08009f88 	.word	0x08009f88
 8008290:	08009fac 	.word	0x08009fac

08008294 <std>:
 8008294:	2300      	movs	r3, #0
 8008296:	b510      	push	{r4, lr}
 8008298:	4604      	mov	r4, r0
 800829a:	e9c0 3300 	strd	r3, r3, [r0]
 800829e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80082a2:	6083      	str	r3, [r0, #8]
 80082a4:	8181      	strh	r1, [r0, #12]
 80082a6:	6643      	str	r3, [r0, #100]	; 0x64
 80082a8:	81c2      	strh	r2, [r0, #14]
 80082aa:	6183      	str	r3, [r0, #24]
 80082ac:	4619      	mov	r1, r3
 80082ae:	2208      	movs	r2, #8
 80082b0:	305c      	adds	r0, #92	; 0x5c
 80082b2:	f7fe fce9 	bl	8006c88 <memset>
 80082b6:	4b05      	ldr	r3, [pc, #20]	; (80082cc <std+0x38>)
 80082b8:	6263      	str	r3, [r4, #36]	; 0x24
 80082ba:	4b05      	ldr	r3, [pc, #20]	; (80082d0 <std+0x3c>)
 80082bc:	62a3      	str	r3, [r4, #40]	; 0x28
 80082be:	4b05      	ldr	r3, [pc, #20]	; (80082d4 <std+0x40>)
 80082c0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80082c2:	4b05      	ldr	r3, [pc, #20]	; (80082d8 <std+0x44>)
 80082c4:	6224      	str	r4, [r4, #32]
 80082c6:	6323      	str	r3, [r4, #48]	; 0x30
 80082c8:	bd10      	pop	{r4, pc}
 80082ca:	bf00      	nop
 80082cc:	08009085 	.word	0x08009085
 80082d0:	080090a7 	.word	0x080090a7
 80082d4:	080090df 	.word	0x080090df
 80082d8:	08009103 	.word	0x08009103

080082dc <_cleanup_r>:
 80082dc:	4901      	ldr	r1, [pc, #4]	; (80082e4 <_cleanup_r+0x8>)
 80082de:	f000 b8af 	b.w	8008440 <_fwalk_reent>
 80082e2:	bf00      	nop
 80082e4:	08009419 	.word	0x08009419

080082e8 <__sfmoreglue>:
 80082e8:	b570      	push	{r4, r5, r6, lr}
 80082ea:	2268      	movs	r2, #104	; 0x68
 80082ec:	1e4d      	subs	r5, r1, #1
 80082ee:	4355      	muls	r5, r2
 80082f0:	460e      	mov	r6, r1
 80082f2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80082f6:	f000 fce7 	bl	8008cc8 <_malloc_r>
 80082fa:	4604      	mov	r4, r0
 80082fc:	b140      	cbz	r0, 8008310 <__sfmoreglue+0x28>
 80082fe:	2100      	movs	r1, #0
 8008300:	e9c0 1600 	strd	r1, r6, [r0]
 8008304:	300c      	adds	r0, #12
 8008306:	60a0      	str	r0, [r4, #8]
 8008308:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800830c:	f7fe fcbc 	bl	8006c88 <memset>
 8008310:	4620      	mov	r0, r4
 8008312:	bd70      	pop	{r4, r5, r6, pc}

08008314 <__sfp_lock_acquire>:
 8008314:	4801      	ldr	r0, [pc, #4]	; (800831c <__sfp_lock_acquire+0x8>)
 8008316:	f000 b8b8 	b.w	800848a <__retarget_lock_acquire_recursive>
 800831a:	bf00      	nop
 800831c:	20000a75 	.word	0x20000a75

08008320 <__sfp_lock_release>:
 8008320:	4801      	ldr	r0, [pc, #4]	; (8008328 <__sfp_lock_release+0x8>)
 8008322:	f000 b8b3 	b.w	800848c <__retarget_lock_release_recursive>
 8008326:	bf00      	nop
 8008328:	20000a75 	.word	0x20000a75

0800832c <__sinit_lock_acquire>:
 800832c:	4801      	ldr	r0, [pc, #4]	; (8008334 <__sinit_lock_acquire+0x8>)
 800832e:	f000 b8ac 	b.w	800848a <__retarget_lock_acquire_recursive>
 8008332:	bf00      	nop
 8008334:	20000a76 	.word	0x20000a76

08008338 <__sinit_lock_release>:
 8008338:	4801      	ldr	r0, [pc, #4]	; (8008340 <__sinit_lock_release+0x8>)
 800833a:	f000 b8a7 	b.w	800848c <__retarget_lock_release_recursive>
 800833e:	bf00      	nop
 8008340:	20000a76 	.word	0x20000a76

08008344 <__sinit>:
 8008344:	b510      	push	{r4, lr}
 8008346:	4604      	mov	r4, r0
 8008348:	f7ff fff0 	bl	800832c <__sinit_lock_acquire>
 800834c:	69a3      	ldr	r3, [r4, #24]
 800834e:	b11b      	cbz	r3, 8008358 <__sinit+0x14>
 8008350:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008354:	f7ff bff0 	b.w	8008338 <__sinit_lock_release>
 8008358:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800835c:	6523      	str	r3, [r4, #80]	; 0x50
 800835e:	4b13      	ldr	r3, [pc, #76]	; (80083ac <__sinit+0x68>)
 8008360:	4a13      	ldr	r2, [pc, #76]	; (80083b0 <__sinit+0x6c>)
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	62a2      	str	r2, [r4, #40]	; 0x28
 8008366:	42a3      	cmp	r3, r4
 8008368:	bf04      	itt	eq
 800836a:	2301      	moveq	r3, #1
 800836c:	61a3      	streq	r3, [r4, #24]
 800836e:	4620      	mov	r0, r4
 8008370:	f000 f820 	bl	80083b4 <__sfp>
 8008374:	6060      	str	r0, [r4, #4]
 8008376:	4620      	mov	r0, r4
 8008378:	f000 f81c 	bl	80083b4 <__sfp>
 800837c:	60a0      	str	r0, [r4, #8]
 800837e:	4620      	mov	r0, r4
 8008380:	f000 f818 	bl	80083b4 <__sfp>
 8008384:	2200      	movs	r2, #0
 8008386:	60e0      	str	r0, [r4, #12]
 8008388:	2104      	movs	r1, #4
 800838a:	6860      	ldr	r0, [r4, #4]
 800838c:	f7ff ff82 	bl	8008294 <std>
 8008390:	68a0      	ldr	r0, [r4, #8]
 8008392:	2201      	movs	r2, #1
 8008394:	2109      	movs	r1, #9
 8008396:	f7ff ff7d 	bl	8008294 <std>
 800839a:	68e0      	ldr	r0, [r4, #12]
 800839c:	2202      	movs	r2, #2
 800839e:	2112      	movs	r1, #18
 80083a0:	f7ff ff78 	bl	8008294 <std>
 80083a4:	2301      	movs	r3, #1
 80083a6:	61a3      	str	r3, [r4, #24]
 80083a8:	e7d2      	b.n	8008350 <__sinit+0xc>
 80083aa:	bf00      	nop
 80083ac:	08009f74 	.word	0x08009f74
 80083b0:	080082dd 	.word	0x080082dd

080083b4 <__sfp>:
 80083b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083b6:	4607      	mov	r7, r0
 80083b8:	f7ff ffac 	bl	8008314 <__sfp_lock_acquire>
 80083bc:	4b1e      	ldr	r3, [pc, #120]	; (8008438 <__sfp+0x84>)
 80083be:	681e      	ldr	r6, [r3, #0]
 80083c0:	69b3      	ldr	r3, [r6, #24]
 80083c2:	b913      	cbnz	r3, 80083ca <__sfp+0x16>
 80083c4:	4630      	mov	r0, r6
 80083c6:	f7ff ffbd 	bl	8008344 <__sinit>
 80083ca:	3648      	adds	r6, #72	; 0x48
 80083cc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80083d0:	3b01      	subs	r3, #1
 80083d2:	d503      	bpl.n	80083dc <__sfp+0x28>
 80083d4:	6833      	ldr	r3, [r6, #0]
 80083d6:	b30b      	cbz	r3, 800841c <__sfp+0x68>
 80083d8:	6836      	ldr	r6, [r6, #0]
 80083da:	e7f7      	b.n	80083cc <__sfp+0x18>
 80083dc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80083e0:	b9d5      	cbnz	r5, 8008418 <__sfp+0x64>
 80083e2:	4b16      	ldr	r3, [pc, #88]	; (800843c <__sfp+0x88>)
 80083e4:	60e3      	str	r3, [r4, #12]
 80083e6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80083ea:	6665      	str	r5, [r4, #100]	; 0x64
 80083ec:	f000 f84c 	bl	8008488 <__retarget_lock_init_recursive>
 80083f0:	f7ff ff96 	bl	8008320 <__sfp_lock_release>
 80083f4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80083f8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80083fc:	6025      	str	r5, [r4, #0]
 80083fe:	61a5      	str	r5, [r4, #24]
 8008400:	2208      	movs	r2, #8
 8008402:	4629      	mov	r1, r5
 8008404:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008408:	f7fe fc3e 	bl	8006c88 <memset>
 800840c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008410:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008414:	4620      	mov	r0, r4
 8008416:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008418:	3468      	adds	r4, #104	; 0x68
 800841a:	e7d9      	b.n	80083d0 <__sfp+0x1c>
 800841c:	2104      	movs	r1, #4
 800841e:	4638      	mov	r0, r7
 8008420:	f7ff ff62 	bl	80082e8 <__sfmoreglue>
 8008424:	4604      	mov	r4, r0
 8008426:	6030      	str	r0, [r6, #0]
 8008428:	2800      	cmp	r0, #0
 800842a:	d1d5      	bne.n	80083d8 <__sfp+0x24>
 800842c:	f7ff ff78 	bl	8008320 <__sfp_lock_release>
 8008430:	230c      	movs	r3, #12
 8008432:	603b      	str	r3, [r7, #0]
 8008434:	e7ee      	b.n	8008414 <__sfp+0x60>
 8008436:	bf00      	nop
 8008438:	08009f74 	.word	0x08009f74
 800843c:	ffff0001 	.word	0xffff0001

08008440 <_fwalk_reent>:
 8008440:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008444:	4606      	mov	r6, r0
 8008446:	4688      	mov	r8, r1
 8008448:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800844c:	2700      	movs	r7, #0
 800844e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008452:	f1b9 0901 	subs.w	r9, r9, #1
 8008456:	d505      	bpl.n	8008464 <_fwalk_reent+0x24>
 8008458:	6824      	ldr	r4, [r4, #0]
 800845a:	2c00      	cmp	r4, #0
 800845c:	d1f7      	bne.n	800844e <_fwalk_reent+0xe>
 800845e:	4638      	mov	r0, r7
 8008460:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008464:	89ab      	ldrh	r3, [r5, #12]
 8008466:	2b01      	cmp	r3, #1
 8008468:	d907      	bls.n	800847a <_fwalk_reent+0x3a>
 800846a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800846e:	3301      	adds	r3, #1
 8008470:	d003      	beq.n	800847a <_fwalk_reent+0x3a>
 8008472:	4629      	mov	r1, r5
 8008474:	4630      	mov	r0, r6
 8008476:	47c0      	blx	r8
 8008478:	4307      	orrs	r7, r0
 800847a:	3568      	adds	r5, #104	; 0x68
 800847c:	e7e9      	b.n	8008452 <_fwalk_reent+0x12>
	...

08008480 <_localeconv_r>:
 8008480:	4800      	ldr	r0, [pc, #0]	; (8008484 <_localeconv_r+0x4>)
 8008482:	4770      	bx	lr
 8008484:	20000560 	.word	0x20000560

08008488 <__retarget_lock_init_recursive>:
 8008488:	4770      	bx	lr

0800848a <__retarget_lock_acquire_recursive>:
 800848a:	4770      	bx	lr

0800848c <__retarget_lock_release_recursive>:
 800848c:	4770      	bx	lr
	...

08008490 <malloc>:
 8008490:	4b02      	ldr	r3, [pc, #8]	; (800849c <malloc+0xc>)
 8008492:	4601      	mov	r1, r0
 8008494:	6818      	ldr	r0, [r3, #0]
 8008496:	f000 bc17 	b.w	8008cc8 <_malloc_r>
 800849a:	bf00      	nop
 800849c:	2000040c 	.word	0x2000040c

080084a0 <memcpy>:
 80084a0:	440a      	add	r2, r1
 80084a2:	4291      	cmp	r1, r2
 80084a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80084a8:	d100      	bne.n	80084ac <memcpy+0xc>
 80084aa:	4770      	bx	lr
 80084ac:	b510      	push	{r4, lr}
 80084ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80084b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80084b6:	4291      	cmp	r1, r2
 80084b8:	d1f9      	bne.n	80084ae <memcpy+0xe>
 80084ba:	bd10      	pop	{r4, pc}

080084bc <_Balloc>:
 80084bc:	b570      	push	{r4, r5, r6, lr}
 80084be:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80084c0:	4604      	mov	r4, r0
 80084c2:	460d      	mov	r5, r1
 80084c4:	b976      	cbnz	r6, 80084e4 <_Balloc+0x28>
 80084c6:	2010      	movs	r0, #16
 80084c8:	f7ff ffe2 	bl	8008490 <malloc>
 80084cc:	4602      	mov	r2, r0
 80084ce:	6260      	str	r0, [r4, #36]	; 0x24
 80084d0:	b920      	cbnz	r0, 80084dc <_Balloc+0x20>
 80084d2:	4b18      	ldr	r3, [pc, #96]	; (8008534 <_Balloc+0x78>)
 80084d4:	4818      	ldr	r0, [pc, #96]	; (8008538 <_Balloc+0x7c>)
 80084d6:	2166      	movs	r1, #102	; 0x66
 80084d8:	f000 feea 	bl	80092b0 <__assert_func>
 80084dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80084e0:	6006      	str	r6, [r0, #0]
 80084e2:	60c6      	str	r6, [r0, #12]
 80084e4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80084e6:	68f3      	ldr	r3, [r6, #12]
 80084e8:	b183      	cbz	r3, 800850c <_Balloc+0x50>
 80084ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80084ec:	68db      	ldr	r3, [r3, #12]
 80084ee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80084f2:	b9b8      	cbnz	r0, 8008524 <_Balloc+0x68>
 80084f4:	2101      	movs	r1, #1
 80084f6:	fa01 f605 	lsl.w	r6, r1, r5
 80084fa:	1d72      	adds	r2, r6, #5
 80084fc:	0092      	lsls	r2, r2, #2
 80084fe:	4620      	mov	r0, r4
 8008500:	f000 fb60 	bl	8008bc4 <_calloc_r>
 8008504:	b160      	cbz	r0, 8008520 <_Balloc+0x64>
 8008506:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800850a:	e00e      	b.n	800852a <_Balloc+0x6e>
 800850c:	2221      	movs	r2, #33	; 0x21
 800850e:	2104      	movs	r1, #4
 8008510:	4620      	mov	r0, r4
 8008512:	f000 fb57 	bl	8008bc4 <_calloc_r>
 8008516:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008518:	60f0      	str	r0, [r6, #12]
 800851a:	68db      	ldr	r3, [r3, #12]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d1e4      	bne.n	80084ea <_Balloc+0x2e>
 8008520:	2000      	movs	r0, #0
 8008522:	bd70      	pop	{r4, r5, r6, pc}
 8008524:	6802      	ldr	r2, [r0, #0]
 8008526:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800852a:	2300      	movs	r3, #0
 800852c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008530:	e7f7      	b.n	8008522 <_Balloc+0x66>
 8008532:	bf00      	nop
 8008534:	08009fb9 	.word	0x08009fb9
 8008538:	0800a09c 	.word	0x0800a09c

0800853c <_Bfree>:
 800853c:	b570      	push	{r4, r5, r6, lr}
 800853e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008540:	4605      	mov	r5, r0
 8008542:	460c      	mov	r4, r1
 8008544:	b976      	cbnz	r6, 8008564 <_Bfree+0x28>
 8008546:	2010      	movs	r0, #16
 8008548:	f7ff ffa2 	bl	8008490 <malloc>
 800854c:	4602      	mov	r2, r0
 800854e:	6268      	str	r0, [r5, #36]	; 0x24
 8008550:	b920      	cbnz	r0, 800855c <_Bfree+0x20>
 8008552:	4b09      	ldr	r3, [pc, #36]	; (8008578 <_Bfree+0x3c>)
 8008554:	4809      	ldr	r0, [pc, #36]	; (800857c <_Bfree+0x40>)
 8008556:	218a      	movs	r1, #138	; 0x8a
 8008558:	f000 feaa 	bl	80092b0 <__assert_func>
 800855c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008560:	6006      	str	r6, [r0, #0]
 8008562:	60c6      	str	r6, [r0, #12]
 8008564:	b13c      	cbz	r4, 8008576 <_Bfree+0x3a>
 8008566:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008568:	6862      	ldr	r2, [r4, #4]
 800856a:	68db      	ldr	r3, [r3, #12]
 800856c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008570:	6021      	str	r1, [r4, #0]
 8008572:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008576:	bd70      	pop	{r4, r5, r6, pc}
 8008578:	08009fb9 	.word	0x08009fb9
 800857c:	0800a09c 	.word	0x0800a09c

08008580 <__multadd>:
 8008580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008584:	690d      	ldr	r5, [r1, #16]
 8008586:	4607      	mov	r7, r0
 8008588:	460c      	mov	r4, r1
 800858a:	461e      	mov	r6, r3
 800858c:	f101 0c14 	add.w	ip, r1, #20
 8008590:	2000      	movs	r0, #0
 8008592:	f8dc 3000 	ldr.w	r3, [ip]
 8008596:	b299      	uxth	r1, r3
 8008598:	fb02 6101 	mla	r1, r2, r1, r6
 800859c:	0c1e      	lsrs	r6, r3, #16
 800859e:	0c0b      	lsrs	r3, r1, #16
 80085a0:	fb02 3306 	mla	r3, r2, r6, r3
 80085a4:	b289      	uxth	r1, r1
 80085a6:	3001      	adds	r0, #1
 80085a8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80085ac:	4285      	cmp	r5, r0
 80085ae:	f84c 1b04 	str.w	r1, [ip], #4
 80085b2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80085b6:	dcec      	bgt.n	8008592 <__multadd+0x12>
 80085b8:	b30e      	cbz	r6, 80085fe <__multadd+0x7e>
 80085ba:	68a3      	ldr	r3, [r4, #8]
 80085bc:	42ab      	cmp	r3, r5
 80085be:	dc19      	bgt.n	80085f4 <__multadd+0x74>
 80085c0:	6861      	ldr	r1, [r4, #4]
 80085c2:	4638      	mov	r0, r7
 80085c4:	3101      	adds	r1, #1
 80085c6:	f7ff ff79 	bl	80084bc <_Balloc>
 80085ca:	4680      	mov	r8, r0
 80085cc:	b928      	cbnz	r0, 80085da <__multadd+0x5a>
 80085ce:	4602      	mov	r2, r0
 80085d0:	4b0c      	ldr	r3, [pc, #48]	; (8008604 <__multadd+0x84>)
 80085d2:	480d      	ldr	r0, [pc, #52]	; (8008608 <__multadd+0x88>)
 80085d4:	21b5      	movs	r1, #181	; 0xb5
 80085d6:	f000 fe6b 	bl	80092b0 <__assert_func>
 80085da:	6922      	ldr	r2, [r4, #16]
 80085dc:	3202      	adds	r2, #2
 80085de:	f104 010c 	add.w	r1, r4, #12
 80085e2:	0092      	lsls	r2, r2, #2
 80085e4:	300c      	adds	r0, #12
 80085e6:	f7ff ff5b 	bl	80084a0 <memcpy>
 80085ea:	4621      	mov	r1, r4
 80085ec:	4638      	mov	r0, r7
 80085ee:	f7ff ffa5 	bl	800853c <_Bfree>
 80085f2:	4644      	mov	r4, r8
 80085f4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80085f8:	3501      	adds	r5, #1
 80085fa:	615e      	str	r6, [r3, #20]
 80085fc:	6125      	str	r5, [r4, #16]
 80085fe:	4620      	mov	r0, r4
 8008600:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008604:	0800a02b 	.word	0x0800a02b
 8008608:	0800a09c 	.word	0x0800a09c

0800860c <__hi0bits>:
 800860c:	0c03      	lsrs	r3, r0, #16
 800860e:	041b      	lsls	r3, r3, #16
 8008610:	b9d3      	cbnz	r3, 8008648 <__hi0bits+0x3c>
 8008612:	0400      	lsls	r0, r0, #16
 8008614:	2310      	movs	r3, #16
 8008616:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800861a:	bf04      	itt	eq
 800861c:	0200      	lsleq	r0, r0, #8
 800861e:	3308      	addeq	r3, #8
 8008620:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008624:	bf04      	itt	eq
 8008626:	0100      	lsleq	r0, r0, #4
 8008628:	3304      	addeq	r3, #4
 800862a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800862e:	bf04      	itt	eq
 8008630:	0080      	lsleq	r0, r0, #2
 8008632:	3302      	addeq	r3, #2
 8008634:	2800      	cmp	r0, #0
 8008636:	db05      	blt.n	8008644 <__hi0bits+0x38>
 8008638:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800863c:	f103 0301 	add.w	r3, r3, #1
 8008640:	bf08      	it	eq
 8008642:	2320      	moveq	r3, #32
 8008644:	4618      	mov	r0, r3
 8008646:	4770      	bx	lr
 8008648:	2300      	movs	r3, #0
 800864a:	e7e4      	b.n	8008616 <__hi0bits+0xa>

0800864c <__lo0bits>:
 800864c:	6803      	ldr	r3, [r0, #0]
 800864e:	f013 0207 	ands.w	r2, r3, #7
 8008652:	4601      	mov	r1, r0
 8008654:	d00b      	beq.n	800866e <__lo0bits+0x22>
 8008656:	07da      	lsls	r2, r3, #31
 8008658:	d423      	bmi.n	80086a2 <__lo0bits+0x56>
 800865a:	0798      	lsls	r0, r3, #30
 800865c:	bf49      	itett	mi
 800865e:	085b      	lsrmi	r3, r3, #1
 8008660:	089b      	lsrpl	r3, r3, #2
 8008662:	2001      	movmi	r0, #1
 8008664:	600b      	strmi	r3, [r1, #0]
 8008666:	bf5c      	itt	pl
 8008668:	600b      	strpl	r3, [r1, #0]
 800866a:	2002      	movpl	r0, #2
 800866c:	4770      	bx	lr
 800866e:	b298      	uxth	r0, r3
 8008670:	b9a8      	cbnz	r0, 800869e <__lo0bits+0x52>
 8008672:	0c1b      	lsrs	r3, r3, #16
 8008674:	2010      	movs	r0, #16
 8008676:	b2da      	uxtb	r2, r3
 8008678:	b90a      	cbnz	r2, 800867e <__lo0bits+0x32>
 800867a:	3008      	adds	r0, #8
 800867c:	0a1b      	lsrs	r3, r3, #8
 800867e:	071a      	lsls	r2, r3, #28
 8008680:	bf04      	itt	eq
 8008682:	091b      	lsreq	r3, r3, #4
 8008684:	3004      	addeq	r0, #4
 8008686:	079a      	lsls	r2, r3, #30
 8008688:	bf04      	itt	eq
 800868a:	089b      	lsreq	r3, r3, #2
 800868c:	3002      	addeq	r0, #2
 800868e:	07da      	lsls	r2, r3, #31
 8008690:	d403      	bmi.n	800869a <__lo0bits+0x4e>
 8008692:	085b      	lsrs	r3, r3, #1
 8008694:	f100 0001 	add.w	r0, r0, #1
 8008698:	d005      	beq.n	80086a6 <__lo0bits+0x5a>
 800869a:	600b      	str	r3, [r1, #0]
 800869c:	4770      	bx	lr
 800869e:	4610      	mov	r0, r2
 80086a0:	e7e9      	b.n	8008676 <__lo0bits+0x2a>
 80086a2:	2000      	movs	r0, #0
 80086a4:	4770      	bx	lr
 80086a6:	2020      	movs	r0, #32
 80086a8:	4770      	bx	lr
	...

080086ac <__i2b>:
 80086ac:	b510      	push	{r4, lr}
 80086ae:	460c      	mov	r4, r1
 80086b0:	2101      	movs	r1, #1
 80086b2:	f7ff ff03 	bl	80084bc <_Balloc>
 80086b6:	4602      	mov	r2, r0
 80086b8:	b928      	cbnz	r0, 80086c6 <__i2b+0x1a>
 80086ba:	4b05      	ldr	r3, [pc, #20]	; (80086d0 <__i2b+0x24>)
 80086bc:	4805      	ldr	r0, [pc, #20]	; (80086d4 <__i2b+0x28>)
 80086be:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80086c2:	f000 fdf5 	bl	80092b0 <__assert_func>
 80086c6:	2301      	movs	r3, #1
 80086c8:	6144      	str	r4, [r0, #20]
 80086ca:	6103      	str	r3, [r0, #16]
 80086cc:	bd10      	pop	{r4, pc}
 80086ce:	bf00      	nop
 80086d0:	0800a02b 	.word	0x0800a02b
 80086d4:	0800a09c 	.word	0x0800a09c

080086d8 <__multiply>:
 80086d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086dc:	4691      	mov	r9, r2
 80086de:	690a      	ldr	r2, [r1, #16]
 80086e0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80086e4:	429a      	cmp	r2, r3
 80086e6:	bfb8      	it	lt
 80086e8:	460b      	movlt	r3, r1
 80086ea:	460c      	mov	r4, r1
 80086ec:	bfbc      	itt	lt
 80086ee:	464c      	movlt	r4, r9
 80086f0:	4699      	movlt	r9, r3
 80086f2:	6927      	ldr	r7, [r4, #16]
 80086f4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80086f8:	68a3      	ldr	r3, [r4, #8]
 80086fa:	6861      	ldr	r1, [r4, #4]
 80086fc:	eb07 060a 	add.w	r6, r7, sl
 8008700:	42b3      	cmp	r3, r6
 8008702:	b085      	sub	sp, #20
 8008704:	bfb8      	it	lt
 8008706:	3101      	addlt	r1, #1
 8008708:	f7ff fed8 	bl	80084bc <_Balloc>
 800870c:	b930      	cbnz	r0, 800871c <__multiply+0x44>
 800870e:	4602      	mov	r2, r0
 8008710:	4b44      	ldr	r3, [pc, #272]	; (8008824 <__multiply+0x14c>)
 8008712:	4845      	ldr	r0, [pc, #276]	; (8008828 <__multiply+0x150>)
 8008714:	f240 115d 	movw	r1, #349	; 0x15d
 8008718:	f000 fdca 	bl	80092b0 <__assert_func>
 800871c:	f100 0514 	add.w	r5, r0, #20
 8008720:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008724:	462b      	mov	r3, r5
 8008726:	2200      	movs	r2, #0
 8008728:	4543      	cmp	r3, r8
 800872a:	d321      	bcc.n	8008770 <__multiply+0x98>
 800872c:	f104 0314 	add.w	r3, r4, #20
 8008730:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008734:	f109 0314 	add.w	r3, r9, #20
 8008738:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800873c:	9202      	str	r2, [sp, #8]
 800873e:	1b3a      	subs	r2, r7, r4
 8008740:	3a15      	subs	r2, #21
 8008742:	f022 0203 	bic.w	r2, r2, #3
 8008746:	3204      	adds	r2, #4
 8008748:	f104 0115 	add.w	r1, r4, #21
 800874c:	428f      	cmp	r7, r1
 800874e:	bf38      	it	cc
 8008750:	2204      	movcc	r2, #4
 8008752:	9201      	str	r2, [sp, #4]
 8008754:	9a02      	ldr	r2, [sp, #8]
 8008756:	9303      	str	r3, [sp, #12]
 8008758:	429a      	cmp	r2, r3
 800875a:	d80c      	bhi.n	8008776 <__multiply+0x9e>
 800875c:	2e00      	cmp	r6, #0
 800875e:	dd03      	ble.n	8008768 <__multiply+0x90>
 8008760:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008764:	2b00      	cmp	r3, #0
 8008766:	d05a      	beq.n	800881e <__multiply+0x146>
 8008768:	6106      	str	r6, [r0, #16]
 800876a:	b005      	add	sp, #20
 800876c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008770:	f843 2b04 	str.w	r2, [r3], #4
 8008774:	e7d8      	b.n	8008728 <__multiply+0x50>
 8008776:	f8b3 a000 	ldrh.w	sl, [r3]
 800877a:	f1ba 0f00 	cmp.w	sl, #0
 800877e:	d024      	beq.n	80087ca <__multiply+0xf2>
 8008780:	f104 0e14 	add.w	lr, r4, #20
 8008784:	46a9      	mov	r9, r5
 8008786:	f04f 0c00 	mov.w	ip, #0
 800878a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800878e:	f8d9 1000 	ldr.w	r1, [r9]
 8008792:	fa1f fb82 	uxth.w	fp, r2
 8008796:	b289      	uxth	r1, r1
 8008798:	fb0a 110b 	mla	r1, sl, fp, r1
 800879c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80087a0:	f8d9 2000 	ldr.w	r2, [r9]
 80087a4:	4461      	add	r1, ip
 80087a6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80087aa:	fb0a c20b 	mla	r2, sl, fp, ip
 80087ae:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80087b2:	b289      	uxth	r1, r1
 80087b4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80087b8:	4577      	cmp	r7, lr
 80087ba:	f849 1b04 	str.w	r1, [r9], #4
 80087be:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80087c2:	d8e2      	bhi.n	800878a <__multiply+0xb2>
 80087c4:	9a01      	ldr	r2, [sp, #4]
 80087c6:	f845 c002 	str.w	ip, [r5, r2]
 80087ca:	9a03      	ldr	r2, [sp, #12]
 80087cc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80087d0:	3304      	adds	r3, #4
 80087d2:	f1b9 0f00 	cmp.w	r9, #0
 80087d6:	d020      	beq.n	800881a <__multiply+0x142>
 80087d8:	6829      	ldr	r1, [r5, #0]
 80087da:	f104 0c14 	add.w	ip, r4, #20
 80087de:	46ae      	mov	lr, r5
 80087e0:	f04f 0a00 	mov.w	sl, #0
 80087e4:	f8bc b000 	ldrh.w	fp, [ip]
 80087e8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80087ec:	fb09 220b 	mla	r2, r9, fp, r2
 80087f0:	4492      	add	sl, r2
 80087f2:	b289      	uxth	r1, r1
 80087f4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80087f8:	f84e 1b04 	str.w	r1, [lr], #4
 80087fc:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008800:	f8be 1000 	ldrh.w	r1, [lr]
 8008804:	0c12      	lsrs	r2, r2, #16
 8008806:	fb09 1102 	mla	r1, r9, r2, r1
 800880a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800880e:	4567      	cmp	r7, ip
 8008810:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008814:	d8e6      	bhi.n	80087e4 <__multiply+0x10c>
 8008816:	9a01      	ldr	r2, [sp, #4]
 8008818:	50a9      	str	r1, [r5, r2]
 800881a:	3504      	adds	r5, #4
 800881c:	e79a      	b.n	8008754 <__multiply+0x7c>
 800881e:	3e01      	subs	r6, #1
 8008820:	e79c      	b.n	800875c <__multiply+0x84>
 8008822:	bf00      	nop
 8008824:	0800a02b 	.word	0x0800a02b
 8008828:	0800a09c 	.word	0x0800a09c

0800882c <__pow5mult>:
 800882c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008830:	4615      	mov	r5, r2
 8008832:	f012 0203 	ands.w	r2, r2, #3
 8008836:	4606      	mov	r6, r0
 8008838:	460f      	mov	r7, r1
 800883a:	d007      	beq.n	800884c <__pow5mult+0x20>
 800883c:	4c25      	ldr	r4, [pc, #148]	; (80088d4 <__pow5mult+0xa8>)
 800883e:	3a01      	subs	r2, #1
 8008840:	2300      	movs	r3, #0
 8008842:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008846:	f7ff fe9b 	bl	8008580 <__multadd>
 800884a:	4607      	mov	r7, r0
 800884c:	10ad      	asrs	r5, r5, #2
 800884e:	d03d      	beq.n	80088cc <__pow5mult+0xa0>
 8008850:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008852:	b97c      	cbnz	r4, 8008874 <__pow5mult+0x48>
 8008854:	2010      	movs	r0, #16
 8008856:	f7ff fe1b 	bl	8008490 <malloc>
 800885a:	4602      	mov	r2, r0
 800885c:	6270      	str	r0, [r6, #36]	; 0x24
 800885e:	b928      	cbnz	r0, 800886c <__pow5mult+0x40>
 8008860:	4b1d      	ldr	r3, [pc, #116]	; (80088d8 <__pow5mult+0xac>)
 8008862:	481e      	ldr	r0, [pc, #120]	; (80088dc <__pow5mult+0xb0>)
 8008864:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008868:	f000 fd22 	bl	80092b0 <__assert_func>
 800886c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008870:	6004      	str	r4, [r0, #0]
 8008872:	60c4      	str	r4, [r0, #12]
 8008874:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008878:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800887c:	b94c      	cbnz	r4, 8008892 <__pow5mult+0x66>
 800887e:	f240 2171 	movw	r1, #625	; 0x271
 8008882:	4630      	mov	r0, r6
 8008884:	f7ff ff12 	bl	80086ac <__i2b>
 8008888:	2300      	movs	r3, #0
 800888a:	f8c8 0008 	str.w	r0, [r8, #8]
 800888e:	4604      	mov	r4, r0
 8008890:	6003      	str	r3, [r0, #0]
 8008892:	f04f 0900 	mov.w	r9, #0
 8008896:	07eb      	lsls	r3, r5, #31
 8008898:	d50a      	bpl.n	80088b0 <__pow5mult+0x84>
 800889a:	4639      	mov	r1, r7
 800889c:	4622      	mov	r2, r4
 800889e:	4630      	mov	r0, r6
 80088a0:	f7ff ff1a 	bl	80086d8 <__multiply>
 80088a4:	4639      	mov	r1, r7
 80088a6:	4680      	mov	r8, r0
 80088a8:	4630      	mov	r0, r6
 80088aa:	f7ff fe47 	bl	800853c <_Bfree>
 80088ae:	4647      	mov	r7, r8
 80088b0:	106d      	asrs	r5, r5, #1
 80088b2:	d00b      	beq.n	80088cc <__pow5mult+0xa0>
 80088b4:	6820      	ldr	r0, [r4, #0]
 80088b6:	b938      	cbnz	r0, 80088c8 <__pow5mult+0x9c>
 80088b8:	4622      	mov	r2, r4
 80088ba:	4621      	mov	r1, r4
 80088bc:	4630      	mov	r0, r6
 80088be:	f7ff ff0b 	bl	80086d8 <__multiply>
 80088c2:	6020      	str	r0, [r4, #0]
 80088c4:	f8c0 9000 	str.w	r9, [r0]
 80088c8:	4604      	mov	r4, r0
 80088ca:	e7e4      	b.n	8008896 <__pow5mult+0x6a>
 80088cc:	4638      	mov	r0, r7
 80088ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088d2:	bf00      	nop
 80088d4:	0800a1e8 	.word	0x0800a1e8
 80088d8:	08009fb9 	.word	0x08009fb9
 80088dc:	0800a09c 	.word	0x0800a09c

080088e0 <__lshift>:
 80088e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088e4:	460c      	mov	r4, r1
 80088e6:	6849      	ldr	r1, [r1, #4]
 80088e8:	6923      	ldr	r3, [r4, #16]
 80088ea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80088ee:	68a3      	ldr	r3, [r4, #8]
 80088f0:	4607      	mov	r7, r0
 80088f2:	4691      	mov	r9, r2
 80088f4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80088f8:	f108 0601 	add.w	r6, r8, #1
 80088fc:	42b3      	cmp	r3, r6
 80088fe:	db0b      	blt.n	8008918 <__lshift+0x38>
 8008900:	4638      	mov	r0, r7
 8008902:	f7ff fddb 	bl	80084bc <_Balloc>
 8008906:	4605      	mov	r5, r0
 8008908:	b948      	cbnz	r0, 800891e <__lshift+0x3e>
 800890a:	4602      	mov	r2, r0
 800890c:	4b2a      	ldr	r3, [pc, #168]	; (80089b8 <__lshift+0xd8>)
 800890e:	482b      	ldr	r0, [pc, #172]	; (80089bc <__lshift+0xdc>)
 8008910:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008914:	f000 fccc 	bl	80092b0 <__assert_func>
 8008918:	3101      	adds	r1, #1
 800891a:	005b      	lsls	r3, r3, #1
 800891c:	e7ee      	b.n	80088fc <__lshift+0x1c>
 800891e:	2300      	movs	r3, #0
 8008920:	f100 0114 	add.w	r1, r0, #20
 8008924:	f100 0210 	add.w	r2, r0, #16
 8008928:	4618      	mov	r0, r3
 800892a:	4553      	cmp	r3, sl
 800892c:	db37      	blt.n	800899e <__lshift+0xbe>
 800892e:	6920      	ldr	r0, [r4, #16]
 8008930:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008934:	f104 0314 	add.w	r3, r4, #20
 8008938:	f019 091f 	ands.w	r9, r9, #31
 800893c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008940:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008944:	d02f      	beq.n	80089a6 <__lshift+0xc6>
 8008946:	f1c9 0e20 	rsb	lr, r9, #32
 800894a:	468a      	mov	sl, r1
 800894c:	f04f 0c00 	mov.w	ip, #0
 8008950:	681a      	ldr	r2, [r3, #0]
 8008952:	fa02 f209 	lsl.w	r2, r2, r9
 8008956:	ea42 020c 	orr.w	r2, r2, ip
 800895a:	f84a 2b04 	str.w	r2, [sl], #4
 800895e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008962:	4298      	cmp	r0, r3
 8008964:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008968:	d8f2      	bhi.n	8008950 <__lshift+0x70>
 800896a:	1b03      	subs	r3, r0, r4
 800896c:	3b15      	subs	r3, #21
 800896e:	f023 0303 	bic.w	r3, r3, #3
 8008972:	3304      	adds	r3, #4
 8008974:	f104 0215 	add.w	r2, r4, #21
 8008978:	4290      	cmp	r0, r2
 800897a:	bf38      	it	cc
 800897c:	2304      	movcc	r3, #4
 800897e:	f841 c003 	str.w	ip, [r1, r3]
 8008982:	f1bc 0f00 	cmp.w	ip, #0
 8008986:	d001      	beq.n	800898c <__lshift+0xac>
 8008988:	f108 0602 	add.w	r6, r8, #2
 800898c:	3e01      	subs	r6, #1
 800898e:	4638      	mov	r0, r7
 8008990:	612e      	str	r6, [r5, #16]
 8008992:	4621      	mov	r1, r4
 8008994:	f7ff fdd2 	bl	800853c <_Bfree>
 8008998:	4628      	mov	r0, r5
 800899a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800899e:	f842 0f04 	str.w	r0, [r2, #4]!
 80089a2:	3301      	adds	r3, #1
 80089a4:	e7c1      	b.n	800892a <__lshift+0x4a>
 80089a6:	3904      	subs	r1, #4
 80089a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80089ac:	f841 2f04 	str.w	r2, [r1, #4]!
 80089b0:	4298      	cmp	r0, r3
 80089b2:	d8f9      	bhi.n	80089a8 <__lshift+0xc8>
 80089b4:	e7ea      	b.n	800898c <__lshift+0xac>
 80089b6:	bf00      	nop
 80089b8:	0800a02b 	.word	0x0800a02b
 80089bc:	0800a09c 	.word	0x0800a09c

080089c0 <__mcmp>:
 80089c0:	b530      	push	{r4, r5, lr}
 80089c2:	6902      	ldr	r2, [r0, #16]
 80089c4:	690c      	ldr	r4, [r1, #16]
 80089c6:	1b12      	subs	r2, r2, r4
 80089c8:	d10e      	bne.n	80089e8 <__mcmp+0x28>
 80089ca:	f100 0314 	add.w	r3, r0, #20
 80089ce:	3114      	adds	r1, #20
 80089d0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80089d4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80089d8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80089dc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80089e0:	42a5      	cmp	r5, r4
 80089e2:	d003      	beq.n	80089ec <__mcmp+0x2c>
 80089e4:	d305      	bcc.n	80089f2 <__mcmp+0x32>
 80089e6:	2201      	movs	r2, #1
 80089e8:	4610      	mov	r0, r2
 80089ea:	bd30      	pop	{r4, r5, pc}
 80089ec:	4283      	cmp	r3, r0
 80089ee:	d3f3      	bcc.n	80089d8 <__mcmp+0x18>
 80089f0:	e7fa      	b.n	80089e8 <__mcmp+0x28>
 80089f2:	f04f 32ff 	mov.w	r2, #4294967295
 80089f6:	e7f7      	b.n	80089e8 <__mcmp+0x28>

080089f8 <__mdiff>:
 80089f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089fc:	460c      	mov	r4, r1
 80089fe:	4606      	mov	r6, r0
 8008a00:	4611      	mov	r1, r2
 8008a02:	4620      	mov	r0, r4
 8008a04:	4690      	mov	r8, r2
 8008a06:	f7ff ffdb 	bl	80089c0 <__mcmp>
 8008a0a:	1e05      	subs	r5, r0, #0
 8008a0c:	d110      	bne.n	8008a30 <__mdiff+0x38>
 8008a0e:	4629      	mov	r1, r5
 8008a10:	4630      	mov	r0, r6
 8008a12:	f7ff fd53 	bl	80084bc <_Balloc>
 8008a16:	b930      	cbnz	r0, 8008a26 <__mdiff+0x2e>
 8008a18:	4b3a      	ldr	r3, [pc, #232]	; (8008b04 <__mdiff+0x10c>)
 8008a1a:	4602      	mov	r2, r0
 8008a1c:	f240 2132 	movw	r1, #562	; 0x232
 8008a20:	4839      	ldr	r0, [pc, #228]	; (8008b08 <__mdiff+0x110>)
 8008a22:	f000 fc45 	bl	80092b0 <__assert_func>
 8008a26:	2301      	movs	r3, #1
 8008a28:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008a2c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a30:	bfa4      	itt	ge
 8008a32:	4643      	movge	r3, r8
 8008a34:	46a0      	movge	r8, r4
 8008a36:	4630      	mov	r0, r6
 8008a38:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008a3c:	bfa6      	itte	ge
 8008a3e:	461c      	movge	r4, r3
 8008a40:	2500      	movge	r5, #0
 8008a42:	2501      	movlt	r5, #1
 8008a44:	f7ff fd3a 	bl	80084bc <_Balloc>
 8008a48:	b920      	cbnz	r0, 8008a54 <__mdiff+0x5c>
 8008a4a:	4b2e      	ldr	r3, [pc, #184]	; (8008b04 <__mdiff+0x10c>)
 8008a4c:	4602      	mov	r2, r0
 8008a4e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008a52:	e7e5      	b.n	8008a20 <__mdiff+0x28>
 8008a54:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008a58:	6926      	ldr	r6, [r4, #16]
 8008a5a:	60c5      	str	r5, [r0, #12]
 8008a5c:	f104 0914 	add.w	r9, r4, #20
 8008a60:	f108 0514 	add.w	r5, r8, #20
 8008a64:	f100 0e14 	add.w	lr, r0, #20
 8008a68:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008a6c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008a70:	f108 0210 	add.w	r2, r8, #16
 8008a74:	46f2      	mov	sl, lr
 8008a76:	2100      	movs	r1, #0
 8008a78:	f859 3b04 	ldr.w	r3, [r9], #4
 8008a7c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008a80:	fa1f f883 	uxth.w	r8, r3
 8008a84:	fa11 f18b 	uxtah	r1, r1, fp
 8008a88:	0c1b      	lsrs	r3, r3, #16
 8008a8a:	eba1 0808 	sub.w	r8, r1, r8
 8008a8e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008a92:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008a96:	fa1f f888 	uxth.w	r8, r8
 8008a9a:	1419      	asrs	r1, r3, #16
 8008a9c:	454e      	cmp	r6, r9
 8008a9e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008aa2:	f84a 3b04 	str.w	r3, [sl], #4
 8008aa6:	d8e7      	bhi.n	8008a78 <__mdiff+0x80>
 8008aa8:	1b33      	subs	r3, r6, r4
 8008aaa:	3b15      	subs	r3, #21
 8008aac:	f023 0303 	bic.w	r3, r3, #3
 8008ab0:	3304      	adds	r3, #4
 8008ab2:	3415      	adds	r4, #21
 8008ab4:	42a6      	cmp	r6, r4
 8008ab6:	bf38      	it	cc
 8008ab8:	2304      	movcc	r3, #4
 8008aba:	441d      	add	r5, r3
 8008abc:	4473      	add	r3, lr
 8008abe:	469e      	mov	lr, r3
 8008ac0:	462e      	mov	r6, r5
 8008ac2:	4566      	cmp	r6, ip
 8008ac4:	d30e      	bcc.n	8008ae4 <__mdiff+0xec>
 8008ac6:	f10c 0203 	add.w	r2, ip, #3
 8008aca:	1b52      	subs	r2, r2, r5
 8008acc:	f022 0203 	bic.w	r2, r2, #3
 8008ad0:	3d03      	subs	r5, #3
 8008ad2:	45ac      	cmp	ip, r5
 8008ad4:	bf38      	it	cc
 8008ad6:	2200      	movcc	r2, #0
 8008ad8:	441a      	add	r2, r3
 8008ada:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008ade:	b17b      	cbz	r3, 8008b00 <__mdiff+0x108>
 8008ae0:	6107      	str	r7, [r0, #16]
 8008ae2:	e7a3      	b.n	8008a2c <__mdiff+0x34>
 8008ae4:	f856 8b04 	ldr.w	r8, [r6], #4
 8008ae8:	fa11 f288 	uxtah	r2, r1, r8
 8008aec:	1414      	asrs	r4, r2, #16
 8008aee:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008af2:	b292      	uxth	r2, r2
 8008af4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008af8:	f84e 2b04 	str.w	r2, [lr], #4
 8008afc:	1421      	asrs	r1, r4, #16
 8008afe:	e7e0      	b.n	8008ac2 <__mdiff+0xca>
 8008b00:	3f01      	subs	r7, #1
 8008b02:	e7ea      	b.n	8008ada <__mdiff+0xe2>
 8008b04:	0800a02b 	.word	0x0800a02b
 8008b08:	0800a09c 	.word	0x0800a09c

08008b0c <__d2b>:
 8008b0c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008b10:	4689      	mov	r9, r1
 8008b12:	2101      	movs	r1, #1
 8008b14:	ec57 6b10 	vmov	r6, r7, d0
 8008b18:	4690      	mov	r8, r2
 8008b1a:	f7ff fccf 	bl	80084bc <_Balloc>
 8008b1e:	4604      	mov	r4, r0
 8008b20:	b930      	cbnz	r0, 8008b30 <__d2b+0x24>
 8008b22:	4602      	mov	r2, r0
 8008b24:	4b25      	ldr	r3, [pc, #148]	; (8008bbc <__d2b+0xb0>)
 8008b26:	4826      	ldr	r0, [pc, #152]	; (8008bc0 <__d2b+0xb4>)
 8008b28:	f240 310a 	movw	r1, #778	; 0x30a
 8008b2c:	f000 fbc0 	bl	80092b0 <__assert_func>
 8008b30:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008b34:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008b38:	bb35      	cbnz	r5, 8008b88 <__d2b+0x7c>
 8008b3a:	2e00      	cmp	r6, #0
 8008b3c:	9301      	str	r3, [sp, #4]
 8008b3e:	d028      	beq.n	8008b92 <__d2b+0x86>
 8008b40:	4668      	mov	r0, sp
 8008b42:	9600      	str	r6, [sp, #0]
 8008b44:	f7ff fd82 	bl	800864c <__lo0bits>
 8008b48:	9900      	ldr	r1, [sp, #0]
 8008b4a:	b300      	cbz	r0, 8008b8e <__d2b+0x82>
 8008b4c:	9a01      	ldr	r2, [sp, #4]
 8008b4e:	f1c0 0320 	rsb	r3, r0, #32
 8008b52:	fa02 f303 	lsl.w	r3, r2, r3
 8008b56:	430b      	orrs	r3, r1
 8008b58:	40c2      	lsrs	r2, r0
 8008b5a:	6163      	str	r3, [r4, #20]
 8008b5c:	9201      	str	r2, [sp, #4]
 8008b5e:	9b01      	ldr	r3, [sp, #4]
 8008b60:	61a3      	str	r3, [r4, #24]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	bf14      	ite	ne
 8008b66:	2202      	movne	r2, #2
 8008b68:	2201      	moveq	r2, #1
 8008b6a:	6122      	str	r2, [r4, #16]
 8008b6c:	b1d5      	cbz	r5, 8008ba4 <__d2b+0x98>
 8008b6e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008b72:	4405      	add	r5, r0
 8008b74:	f8c9 5000 	str.w	r5, [r9]
 8008b78:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008b7c:	f8c8 0000 	str.w	r0, [r8]
 8008b80:	4620      	mov	r0, r4
 8008b82:	b003      	add	sp, #12
 8008b84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008b88:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008b8c:	e7d5      	b.n	8008b3a <__d2b+0x2e>
 8008b8e:	6161      	str	r1, [r4, #20]
 8008b90:	e7e5      	b.n	8008b5e <__d2b+0x52>
 8008b92:	a801      	add	r0, sp, #4
 8008b94:	f7ff fd5a 	bl	800864c <__lo0bits>
 8008b98:	9b01      	ldr	r3, [sp, #4]
 8008b9a:	6163      	str	r3, [r4, #20]
 8008b9c:	2201      	movs	r2, #1
 8008b9e:	6122      	str	r2, [r4, #16]
 8008ba0:	3020      	adds	r0, #32
 8008ba2:	e7e3      	b.n	8008b6c <__d2b+0x60>
 8008ba4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008ba8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008bac:	f8c9 0000 	str.w	r0, [r9]
 8008bb0:	6918      	ldr	r0, [r3, #16]
 8008bb2:	f7ff fd2b 	bl	800860c <__hi0bits>
 8008bb6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008bba:	e7df      	b.n	8008b7c <__d2b+0x70>
 8008bbc:	0800a02b 	.word	0x0800a02b
 8008bc0:	0800a09c 	.word	0x0800a09c

08008bc4 <_calloc_r>:
 8008bc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008bc6:	fba1 2402 	umull	r2, r4, r1, r2
 8008bca:	b94c      	cbnz	r4, 8008be0 <_calloc_r+0x1c>
 8008bcc:	4611      	mov	r1, r2
 8008bce:	9201      	str	r2, [sp, #4]
 8008bd0:	f000 f87a 	bl	8008cc8 <_malloc_r>
 8008bd4:	9a01      	ldr	r2, [sp, #4]
 8008bd6:	4605      	mov	r5, r0
 8008bd8:	b930      	cbnz	r0, 8008be8 <_calloc_r+0x24>
 8008bda:	4628      	mov	r0, r5
 8008bdc:	b003      	add	sp, #12
 8008bde:	bd30      	pop	{r4, r5, pc}
 8008be0:	220c      	movs	r2, #12
 8008be2:	6002      	str	r2, [r0, #0]
 8008be4:	2500      	movs	r5, #0
 8008be6:	e7f8      	b.n	8008bda <_calloc_r+0x16>
 8008be8:	4621      	mov	r1, r4
 8008bea:	f7fe f84d 	bl	8006c88 <memset>
 8008bee:	e7f4      	b.n	8008bda <_calloc_r+0x16>

08008bf0 <_free_r>:
 8008bf0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008bf2:	2900      	cmp	r1, #0
 8008bf4:	d044      	beq.n	8008c80 <_free_r+0x90>
 8008bf6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008bfa:	9001      	str	r0, [sp, #4]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	f1a1 0404 	sub.w	r4, r1, #4
 8008c02:	bfb8      	it	lt
 8008c04:	18e4      	addlt	r4, r4, r3
 8008c06:	f000 fcdf 	bl	80095c8 <__malloc_lock>
 8008c0a:	4a1e      	ldr	r2, [pc, #120]	; (8008c84 <_free_r+0x94>)
 8008c0c:	9801      	ldr	r0, [sp, #4]
 8008c0e:	6813      	ldr	r3, [r2, #0]
 8008c10:	b933      	cbnz	r3, 8008c20 <_free_r+0x30>
 8008c12:	6063      	str	r3, [r4, #4]
 8008c14:	6014      	str	r4, [r2, #0]
 8008c16:	b003      	add	sp, #12
 8008c18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008c1c:	f000 bcda 	b.w	80095d4 <__malloc_unlock>
 8008c20:	42a3      	cmp	r3, r4
 8008c22:	d908      	bls.n	8008c36 <_free_r+0x46>
 8008c24:	6825      	ldr	r5, [r4, #0]
 8008c26:	1961      	adds	r1, r4, r5
 8008c28:	428b      	cmp	r3, r1
 8008c2a:	bf01      	itttt	eq
 8008c2c:	6819      	ldreq	r1, [r3, #0]
 8008c2e:	685b      	ldreq	r3, [r3, #4]
 8008c30:	1949      	addeq	r1, r1, r5
 8008c32:	6021      	streq	r1, [r4, #0]
 8008c34:	e7ed      	b.n	8008c12 <_free_r+0x22>
 8008c36:	461a      	mov	r2, r3
 8008c38:	685b      	ldr	r3, [r3, #4]
 8008c3a:	b10b      	cbz	r3, 8008c40 <_free_r+0x50>
 8008c3c:	42a3      	cmp	r3, r4
 8008c3e:	d9fa      	bls.n	8008c36 <_free_r+0x46>
 8008c40:	6811      	ldr	r1, [r2, #0]
 8008c42:	1855      	adds	r5, r2, r1
 8008c44:	42a5      	cmp	r5, r4
 8008c46:	d10b      	bne.n	8008c60 <_free_r+0x70>
 8008c48:	6824      	ldr	r4, [r4, #0]
 8008c4a:	4421      	add	r1, r4
 8008c4c:	1854      	adds	r4, r2, r1
 8008c4e:	42a3      	cmp	r3, r4
 8008c50:	6011      	str	r1, [r2, #0]
 8008c52:	d1e0      	bne.n	8008c16 <_free_r+0x26>
 8008c54:	681c      	ldr	r4, [r3, #0]
 8008c56:	685b      	ldr	r3, [r3, #4]
 8008c58:	6053      	str	r3, [r2, #4]
 8008c5a:	4421      	add	r1, r4
 8008c5c:	6011      	str	r1, [r2, #0]
 8008c5e:	e7da      	b.n	8008c16 <_free_r+0x26>
 8008c60:	d902      	bls.n	8008c68 <_free_r+0x78>
 8008c62:	230c      	movs	r3, #12
 8008c64:	6003      	str	r3, [r0, #0]
 8008c66:	e7d6      	b.n	8008c16 <_free_r+0x26>
 8008c68:	6825      	ldr	r5, [r4, #0]
 8008c6a:	1961      	adds	r1, r4, r5
 8008c6c:	428b      	cmp	r3, r1
 8008c6e:	bf04      	itt	eq
 8008c70:	6819      	ldreq	r1, [r3, #0]
 8008c72:	685b      	ldreq	r3, [r3, #4]
 8008c74:	6063      	str	r3, [r4, #4]
 8008c76:	bf04      	itt	eq
 8008c78:	1949      	addeq	r1, r1, r5
 8008c7a:	6021      	streq	r1, [r4, #0]
 8008c7c:	6054      	str	r4, [r2, #4]
 8008c7e:	e7ca      	b.n	8008c16 <_free_r+0x26>
 8008c80:	b003      	add	sp, #12
 8008c82:	bd30      	pop	{r4, r5, pc}
 8008c84:	20000a78 	.word	0x20000a78

08008c88 <sbrk_aligned>:
 8008c88:	b570      	push	{r4, r5, r6, lr}
 8008c8a:	4e0e      	ldr	r6, [pc, #56]	; (8008cc4 <sbrk_aligned+0x3c>)
 8008c8c:	460c      	mov	r4, r1
 8008c8e:	6831      	ldr	r1, [r6, #0]
 8008c90:	4605      	mov	r5, r0
 8008c92:	b911      	cbnz	r1, 8008c9a <sbrk_aligned+0x12>
 8008c94:	f000 f9e6 	bl	8009064 <_sbrk_r>
 8008c98:	6030      	str	r0, [r6, #0]
 8008c9a:	4621      	mov	r1, r4
 8008c9c:	4628      	mov	r0, r5
 8008c9e:	f000 f9e1 	bl	8009064 <_sbrk_r>
 8008ca2:	1c43      	adds	r3, r0, #1
 8008ca4:	d00a      	beq.n	8008cbc <sbrk_aligned+0x34>
 8008ca6:	1cc4      	adds	r4, r0, #3
 8008ca8:	f024 0403 	bic.w	r4, r4, #3
 8008cac:	42a0      	cmp	r0, r4
 8008cae:	d007      	beq.n	8008cc0 <sbrk_aligned+0x38>
 8008cb0:	1a21      	subs	r1, r4, r0
 8008cb2:	4628      	mov	r0, r5
 8008cb4:	f000 f9d6 	bl	8009064 <_sbrk_r>
 8008cb8:	3001      	adds	r0, #1
 8008cba:	d101      	bne.n	8008cc0 <sbrk_aligned+0x38>
 8008cbc:	f04f 34ff 	mov.w	r4, #4294967295
 8008cc0:	4620      	mov	r0, r4
 8008cc2:	bd70      	pop	{r4, r5, r6, pc}
 8008cc4:	20000a7c 	.word	0x20000a7c

08008cc8 <_malloc_r>:
 8008cc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ccc:	1ccd      	adds	r5, r1, #3
 8008cce:	f025 0503 	bic.w	r5, r5, #3
 8008cd2:	3508      	adds	r5, #8
 8008cd4:	2d0c      	cmp	r5, #12
 8008cd6:	bf38      	it	cc
 8008cd8:	250c      	movcc	r5, #12
 8008cda:	2d00      	cmp	r5, #0
 8008cdc:	4607      	mov	r7, r0
 8008cde:	db01      	blt.n	8008ce4 <_malloc_r+0x1c>
 8008ce0:	42a9      	cmp	r1, r5
 8008ce2:	d905      	bls.n	8008cf0 <_malloc_r+0x28>
 8008ce4:	230c      	movs	r3, #12
 8008ce6:	603b      	str	r3, [r7, #0]
 8008ce8:	2600      	movs	r6, #0
 8008cea:	4630      	mov	r0, r6
 8008cec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008cf0:	4e2e      	ldr	r6, [pc, #184]	; (8008dac <_malloc_r+0xe4>)
 8008cf2:	f000 fc69 	bl	80095c8 <__malloc_lock>
 8008cf6:	6833      	ldr	r3, [r6, #0]
 8008cf8:	461c      	mov	r4, r3
 8008cfa:	bb34      	cbnz	r4, 8008d4a <_malloc_r+0x82>
 8008cfc:	4629      	mov	r1, r5
 8008cfe:	4638      	mov	r0, r7
 8008d00:	f7ff ffc2 	bl	8008c88 <sbrk_aligned>
 8008d04:	1c43      	adds	r3, r0, #1
 8008d06:	4604      	mov	r4, r0
 8008d08:	d14d      	bne.n	8008da6 <_malloc_r+0xde>
 8008d0a:	6834      	ldr	r4, [r6, #0]
 8008d0c:	4626      	mov	r6, r4
 8008d0e:	2e00      	cmp	r6, #0
 8008d10:	d140      	bne.n	8008d94 <_malloc_r+0xcc>
 8008d12:	6823      	ldr	r3, [r4, #0]
 8008d14:	4631      	mov	r1, r6
 8008d16:	4638      	mov	r0, r7
 8008d18:	eb04 0803 	add.w	r8, r4, r3
 8008d1c:	f000 f9a2 	bl	8009064 <_sbrk_r>
 8008d20:	4580      	cmp	r8, r0
 8008d22:	d13a      	bne.n	8008d9a <_malloc_r+0xd2>
 8008d24:	6821      	ldr	r1, [r4, #0]
 8008d26:	3503      	adds	r5, #3
 8008d28:	1a6d      	subs	r5, r5, r1
 8008d2a:	f025 0503 	bic.w	r5, r5, #3
 8008d2e:	3508      	adds	r5, #8
 8008d30:	2d0c      	cmp	r5, #12
 8008d32:	bf38      	it	cc
 8008d34:	250c      	movcc	r5, #12
 8008d36:	4629      	mov	r1, r5
 8008d38:	4638      	mov	r0, r7
 8008d3a:	f7ff ffa5 	bl	8008c88 <sbrk_aligned>
 8008d3e:	3001      	adds	r0, #1
 8008d40:	d02b      	beq.n	8008d9a <_malloc_r+0xd2>
 8008d42:	6823      	ldr	r3, [r4, #0]
 8008d44:	442b      	add	r3, r5
 8008d46:	6023      	str	r3, [r4, #0]
 8008d48:	e00e      	b.n	8008d68 <_malloc_r+0xa0>
 8008d4a:	6822      	ldr	r2, [r4, #0]
 8008d4c:	1b52      	subs	r2, r2, r5
 8008d4e:	d41e      	bmi.n	8008d8e <_malloc_r+0xc6>
 8008d50:	2a0b      	cmp	r2, #11
 8008d52:	d916      	bls.n	8008d82 <_malloc_r+0xba>
 8008d54:	1961      	adds	r1, r4, r5
 8008d56:	42a3      	cmp	r3, r4
 8008d58:	6025      	str	r5, [r4, #0]
 8008d5a:	bf18      	it	ne
 8008d5c:	6059      	strne	r1, [r3, #4]
 8008d5e:	6863      	ldr	r3, [r4, #4]
 8008d60:	bf08      	it	eq
 8008d62:	6031      	streq	r1, [r6, #0]
 8008d64:	5162      	str	r2, [r4, r5]
 8008d66:	604b      	str	r3, [r1, #4]
 8008d68:	4638      	mov	r0, r7
 8008d6a:	f104 060b 	add.w	r6, r4, #11
 8008d6e:	f000 fc31 	bl	80095d4 <__malloc_unlock>
 8008d72:	f026 0607 	bic.w	r6, r6, #7
 8008d76:	1d23      	adds	r3, r4, #4
 8008d78:	1af2      	subs	r2, r6, r3
 8008d7a:	d0b6      	beq.n	8008cea <_malloc_r+0x22>
 8008d7c:	1b9b      	subs	r3, r3, r6
 8008d7e:	50a3      	str	r3, [r4, r2]
 8008d80:	e7b3      	b.n	8008cea <_malloc_r+0x22>
 8008d82:	6862      	ldr	r2, [r4, #4]
 8008d84:	42a3      	cmp	r3, r4
 8008d86:	bf0c      	ite	eq
 8008d88:	6032      	streq	r2, [r6, #0]
 8008d8a:	605a      	strne	r2, [r3, #4]
 8008d8c:	e7ec      	b.n	8008d68 <_malloc_r+0xa0>
 8008d8e:	4623      	mov	r3, r4
 8008d90:	6864      	ldr	r4, [r4, #4]
 8008d92:	e7b2      	b.n	8008cfa <_malloc_r+0x32>
 8008d94:	4634      	mov	r4, r6
 8008d96:	6876      	ldr	r6, [r6, #4]
 8008d98:	e7b9      	b.n	8008d0e <_malloc_r+0x46>
 8008d9a:	230c      	movs	r3, #12
 8008d9c:	603b      	str	r3, [r7, #0]
 8008d9e:	4638      	mov	r0, r7
 8008da0:	f000 fc18 	bl	80095d4 <__malloc_unlock>
 8008da4:	e7a1      	b.n	8008cea <_malloc_r+0x22>
 8008da6:	6025      	str	r5, [r4, #0]
 8008da8:	e7de      	b.n	8008d68 <_malloc_r+0xa0>
 8008daa:	bf00      	nop
 8008dac:	20000a78 	.word	0x20000a78

08008db0 <__sfputc_r>:
 8008db0:	6893      	ldr	r3, [r2, #8]
 8008db2:	3b01      	subs	r3, #1
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	b410      	push	{r4}
 8008db8:	6093      	str	r3, [r2, #8]
 8008dba:	da08      	bge.n	8008dce <__sfputc_r+0x1e>
 8008dbc:	6994      	ldr	r4, [r2, #24]
 8008dbe:	42a3      	cmp	r3, r4
 8008dc0:	db01      	blt.n	8008dc6 <__sfputc_r+0x16>
 8008dc2:	290a      	cmp	r1, #10
 8008dc4:	d103      	bne.n	8008dce <__sfputc_r+0x1e>
 8008dc6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008dca:	f000 b99f 	b.w	800910c <__swbuf_r>
 8008dce:	6813      	ldr	r3, [r2, #0]
 8008dd0:	1c58      	adds	r0, r3, #1
 8008dd2:	6010      	str	r0, [r2, #0]
 8008dd4:	7019      	strb	r1, [r3, #0]
 8008dd6:	4608      	mov	r0, r1
 8008dd8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ddc:	4770      	bx	lr

08008dde <__sfputs_r>:
 8008dde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008de0:	4606      	mov	r6, r0
 8008de2:	460f      	mov	r7, r1
 8008de4:	4614      	mov	r4, r2
 8008de6:	18d5      	adds	r5, r2, r3
 8008de8:	42ac      	cmp	r4, r5
 8008dea:	d101      	bne.n	8008df0 <__sfputs_r+0x12>
 8008dec:	2000      	movs	r0, #0
 8008dee:	e007      	b.n	8008e00 <__sfputs_r+0x22>
 8008df0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008df4:	463a      	mov	r2, r7
 8008df6:	4630      	mov	r0, r6
 8008df8:	f7ff ffda 	bl	8008db0 <__sfputc_r>
 8008dfc:	1c43      	adds	r3, r0, #1
 8008dfe:	d1f3      	bne.n	8008de8 <__sfputs_r+0xa>
 8008e00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008e04 <_vfiprintf_r>:
 8008e04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e08:	460d      	mov	r5, r1
 8008e0a:	b09d      	sub	sp, #116	; 0x74
 8008e0c:	4614      	mov	r4, r2
 8008e0e:	4698      	mov	r8, r3
 8008e10:	4606      	mov	r6, r0
 8008e12:	b118      	cbz	r0, 8008e1c <_vfiprintf_r+0x18>
 8008e14:	6983      	ldr	r3, [r0, #24]
 8008e16:	b90b      	cbnz	r3, 8008e1c <_vfiprintf_r+0x18>
 8008e18:	f7ff fa94 	bl	8008344 <__sinit>
 8008e1c:	4b89      	ldr	r3, [pc, #548]	; (8009044 <_vfiprintf_r+0x240>)
 8008e1e:	429d      	cmp	r5, r3
 8008e20:	d11b      	bne.n	8008e5a <_vfiprintf_r+0x56>
 8008e22:	6875      	ldr	r5, [r6, #4]
 8008e24:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008e26:	07d9      	lsls	r1, r3, #31
 8008e28:	d405      	bmi.n	8008e36 <_vfiprintf_r+0x32>
 8008e2a:	89ab      	ldrh	r3, [r5, #12]
 8008e2c:	059a      	lsls	r2, r3, #22
 8008e2e:	d402      	bmi.n	8008e36 <_vfiprintf_r+0x32>
 8008e30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008e32:	f7ff fb2a 	bl	800848a <__retarget_lock_acquire_recursive>
 8008e36:	89ab      	ldrh	r3, [r5, #12]
 8008e38:	071b      	lsls	r3, r3, #28
 8008e3a:	d501      	bpl.n	8008e40 <_vfiprintf_r+0x3c>
 8008e3c:	692b      	ldr	r3, [r5, #16]
 8008e3e:	b9eb      	cbnz	r3, 8008e7c <_vfiprintf_r+0x78>
 8008e40:	4629      	mov	r1, r5
 8008e42:	4630      	mov	r0, r6
 8008e44:	f000 f9c6 	bl	80091d4 <__swsetup_r>
 8008e48:	b1c0      	cbz	r0, 8008e7c <_vfiprintf_r+0x78>
 8008e4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008e4c:	07dc      	lsls	r4, r3, #31
 8008e4e:	d50e      	bpl.n	8008e6e <_vfiprintf_r+0x6a>
 8008e50:	f04f 30ff 	mov.w	r0, #4294967295
 8008e54:	b01d      	add	sp, #116	; 0x74
 8008e56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e5a:	4b7b      	ldr	r3, [pc, #492]	; (8009048 <_vfiprintf_r+0x244>)
 8008e5c:	429d      	cmp	r5, r3
 8008e5e:	d101      	bne.n	8008e64 <_vfiprintf_r+0x60>
 8008e60:	68b5      	ldr	r5, [r6, #8]
 8008e62:	e7df      	b.n	8008e24 <_vfiprintf_r+0x20>
 8008e64:	4b79      	ldr	r3, [pc, #484]	; (800904c <_vfiprintf_r+0x248>)
 8008e66:	429d      	cmp	r5, r3
 8008e68:	bf08      	it	eq
 8008e6a:	68f5      	ldreq	r5, [r6, #12]
 8008e6c:	e7da      	b.n	8008e24 <_vfiprintf_r+0x20>
 8008e6e:	89ab      	ldrh	r3, [r5, #12]
 8008e70:	0598      	lsls	r0, r3, #22
 8008e72:	d4ed      	bmi.n	8008e50 <_vfiprintf_r+0x4c>
 8008e74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008e76:	f7ff fb09 	bl	800848c <__retarget_lock_release_recursive>
 8008e7a:	e7e9      	b.n	8008e50 <_vfiprintf_r+0x4c>
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	9309      	str	r3, [sp, #36]	; 0x24
 8008e80:	2320      	movs	r3, #32
 8008e82:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008e86:	f8cd 800c 	str.w	r8, [sp, #12]
 8008e8a:	2330      	movs	r3, #48	; 0x30
 8008e8c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009050 <_vfiprintf_r+0x24c>
 8008e90:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008e94:	f04f 0901 	mov.w	r9, #1
 8008e98:	4623      	mov	r3, r4
 8008e9a:	469a      	mov	sl, r3
 8008e9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ea0:	b10a      	cbz	r2, 8008ea6 <_vfiprintf_r+0xa2>
 8008ea2:	2a25      	cmp	r2, #37	; 0x25
 8008ea4:	d1f9      	bne.n	8008e9a <_vfiprintf_r+0x96>
 8008ea6:	ebba 0b04 	subs.w	fp, sl, r4
 8008eaa:	d00b      	beq.n	8008ec4 <_vfiprintf_r+0xc0>
 8008eac:	465b      	mov	r3, fp
 8008eae:	4622      	mov	r2, r4
 8008eb0:	4629      	mov	r1, r5
 8008eb2:	4630      	mov	r0, r6
 8008eb4:	f7ff ff93 	bl	8008dde <__sfputs_r>
 8008eb8:	3001      	adds	r0, #1
 8008eba:	f000 80aa 	beq.w	8009012 <_vfiprintf_r+0x20e>
 8008ebe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008ec0:	445a      	add	r2, fp
 8008ec2:	9209      	str	r2, [sp, #36]	; 0x24
 8008ec4:	f89a 3000 	ldrb.w	r3, [sl]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	f000 80a2 	beq.w	8009012 <_vfiprintf_r+0x20e>
 8008ece:	2300      	movs	r3, #0
 8008ed0:	f04f 32ff 	mov.w	r2, #4294967295
 8008ed4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008ed8:	f10a 0a01 	add.w	sl, sl, #1
 8008edc:	9304      	str	r3, [sp, #16]
 8008ede:	9307      	str	r3, [sp, #28]
 8008ee0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008ee4:	931a      	str	r3, [sp, #104]	; 0x68
 8008ee6:	4654      	mov	r4, sl
 8008ee8:	2205      	movs	r2, #5
 8008eea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008eee:	4858      	ldr	r0, [pc, #352]	; (8009050 <_vfiprintf_r+0x24c>)
 8008ef0:	f7f7 f976 	bl	80001e0 <memchr>
 8008ef4:	9a04      	ldr	r2, [sp, #16]
 8008ef6:	b9d8      	cbnz	r0, 8008f30 <_vfiprintf_r+0x12c>
 8008ef8:	06d1      	lsls	r1, r2, #27
 8008efa:	bf44      	itt	mi
 8008efc:	2320      	movmi	r3, #32
 8008efe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f02:	0713      	lsls	r3, r2, #28
 8008f04:	bf44      	itt	mi
 8008f06:	232b      	movmi	r3, #43	; 0x2b
 8008f08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f0c:	f89a 3000 	ldrb.w	r3, [sl]
 8008f10:	2b2a      	cmp	r3, #42	; 0x2a
 8008f12:	d015      	beq.n	8008f40 <_vfiprintf_r+0x13c>
 8008f14:	9a07      	ldr	r2, [sp, #28]
 8008f16:	4654      	mov	r4, sl
 8008f18:	2000      	movs	r0, #0
 8008f1a:	f04f 0c0a 	mov.w	ip, #10
 8008f1e:	4621      	mov	r1, r4
 8008f20:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008f24:	3b30      	subs	r3, #48	; 0x30
 8008f26:	2b09      	cmp	r3, #9
 8008f28:	d94e      	bls.n	8008fc8 <_vfiprintf_r+0x1c4>
 8008f2a:	b1b0      	cbz	r0, 8008f5a <_vfiprintf_r+0x156>
 8008f2c:	9207      	str	r2, [sp, #28]
 8008f2e:	e014      	b.n	8008f5a <_vfiprintf_r+0x156>
 8008f30:	eba0 0308 	sub.w	r3, r0, r8
 8008f34:	fa09 f303 	lsl.w	r3, r9, r3
 8008f38:	4313      	orrs	r3, r2
 8008f3a:	9304      	str	r3, [sp, #16]
 8008f3c:	46a2      	mov	sl, r4
 8008f3e:	e7d2      	b.n	8008ee6 <_vfiprintf_r+0xe2>
 8008f40:	9b03      	ldr	r3, [sp, #12]
 8008f42:	1d19      	adds	r1, r3, #4
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	9103      	str	r1, [sp, #12]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	bfbb      	ittet	lt
 8008f4c:	425b      	neglt	r3, r3
 8008f4e:	f042 0202 	orrlt.w	r2, r2, #2
 8008f52:	9307      	strge	r3, [sp, #28]
 8008f54:	9307      	strlt	r3, [sp, #28]
 8008f56:	bfb8      	it	lt
 8008f58:	9204      	strlt	r2, [sp, #16]
 8008f5a:	7823      	ldrb	r3, [r4, #0]
 8008f5c:	2b2e      	cmp	r3, #46	; 0x2e
 8008f5e:	d10c      	bne.n	8008f7a <_vfiprintf_r+0x176>
 8008f60:	7863      	ldrb	r3, [r4, #1]
 8008f62:	2b2a      	cmp	r3, #42	; 0x2a
 8008f64:	d135      	bne.n	8008fd2 <_vfiprintf_r+0x1ce>
 8008f66:	9b03      	ldr	r3, [sp, #12]
 8008f68:	1d1a      	adds	r2, r3, #4
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	9203      	str	r2, [sp, #12]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	bfb8      	it	lt
 8008f72:	f04f 33ff 	movlt.w	r3, #4294967295
 8008f76:	3402      	adds	r4, #2
 8008f78:	9305      	str	r3, [sp, #20]
 8008f7a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009060 <_vfiprintf_r+0x25c>
 8008f7e:	7821      	ldrb	r1, [r4, #0]
 8008f80:	2203      	movs	r2, #3
 8008f82:	4650      	mov	r0, sl
 8008f84:	f7f7 f92c 	bl	80001e0 <memchr>
 8008f88:	b140      	cbz	r0, 8008f9c <_vfiprintf_r+0x198>
 8008f8a:	2340      	movs	r3, #64	; 0x40
 8008f8c:	eba0 000a 	sub.w	r0, r0, sl
 8008f90:	fa03 f000 	lsl.w	r0, r3, r0
 8008f94:	9b04      	ldr	r3, [sp, #16]
 8008f96:	4303      	orrs	r3, r0
 8008f98:	3401      	adds	r4, #1
 8008f9a:	9304      	str	r3, [sp, #16]
 8008f9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fa0:	482c      	ldr	r0, [pc, #176]	; (8009054 <_vfiprintf_r+0x250>)
 8008fa2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008fa6:	2206      	movs	r2, #6
 8008fa8:	f7f7 f91a 	bl	80001e0 <memchr>
 8008fac:	2800      	cmp	r0, #0
 8008fae:	d03f      	beq.n	8009030 <_vfiprintf_r+0x22c>
 8008fb0:	4b29      	ldr	r3, [pc, #164]	; (8009058 <_vfiprintf_r+0x254>)
 8008fb2:	bb1b      	cbnz	r3, 8008ffc <_vfiprintf_r+0x1f8>
 8008fb4:	9b03      	ldr	r3, [sp, #12]
 8008fb6:	3307      	adds	r3, #7
 8008fb8:	f023 0307 	bic.w	r3, r3, #7
 8008fbc:	3308      	adds	r3, #8
 8008fbe:	9303      	str	r3, [sp, #12]
 8008fc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fc2:	443b      	add	r3, r7
 8008fc4:	9309      	str	r3, [sp, #36]	; 0x24
 8008fc6:	e767      	b.n	8008e98 <_vfiprintf_r+0x94>
 8008fc8:	fb0c 3202 	mla	r2, ip, r2, r3
 8008fcc:	460c      	mov	r4, r1
 8008fce:	2001      	movs	r0, #1
 8008fd0:	e7a5      	b.n	8008f1e <_vfiprintf_r+0x11a>
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	3401      	adds	r4, #1
 8008fd6:	9305      	str	r3, [sp, #20]
 8008fd8:	4619      	mov	r1, r3
 8008fda:	f04f 0c0a 	mov.w	ip, #10
 8008fde:	4620      	mov	r0, r4
 8008fe0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008fe4:	3a30      	subs	r2, #48	; 0x30
 8008fe6:	2a09      	cmp	r2, #9
 8008fe8:	d903      	bls.n	8008ff2 <_vfiprintf_r+0x1ee>
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d0c5      	beq.n	8008f7a <_vfiprintf_r+0x176>
 8008fee:	9105      	str	r1, [sp, #20]
 8008ff0:	e7c3      	b.n	8008f7a <_vfiprintf_r+0x176>
 8008ff2:	fb0c 2101 	mla	r1, ip, r1, r2
 8008ff6:	4604      	mov	r4, r0
 8008ff8:	2301      	movs	r3, #1
 8008ffa:	e7f0      	b.n	8008fde <_vfiprintf_r+0x1da>
 8008ffc:	ab03      	add	r3, sp, #12
 8008ffe:	9300      	str	r3, [sp, #0]
 8009000:	462a      	mov	r2, r5
 8009002:	4b16      	ldr	r3, [pc, #88]	; (800905c <_vfiprintf_r+0x258>)
 8009004:	a904      	add	r1, sp, #16
 8009006:	4630      	mov	r0, r6
 8009008:	f7fd fee6 	bl	8006dd8 <_printf_float>
 800900c:	4607      	mov	r7, r0
 800900e:	1c78      	adds	r0, r7, #1
 8009010:	d1d6      	bne.n	8008fc0 <_vfiprintf_r+0x1bc>
 8009012:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009014:	07d9      	lsls	r1, r3, #31
 8009016:	d405      	bmi.n	8009024 <_vfiprintf_r+0x220>
 8009018:	89ab      	ldrh	r3, [r5, #12]
 800901a:	059a      	lsls	r2, r3, #22
 800901c:	d402      	bmi.n	8009024 <_vfiprintf_r+0x220>
 800901e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009020:	f7ff fa34 	bl	800848c <__retarget_lock_release_recursive>
 8009024:	89ab      	ldrh	r3, [r5, #12]
 8009026:	065b      	lsls	r3, r3, #25
 8009028:	f53f af12 	bmi.w	8008e50 <_vfiprintf_r+0x4c>
 800902c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800902e:	e711      	b.n	8008e54 <_vfiprintf_r+0x50>
 8009030:	ab03      	add	r3, sp, #12
 8009032:	9300      	str	r3, [sp, #0]
 8009034:	462a      	mov	r2, r5
 8009036:	4b09      	ldr	r3, [pc, #36]	; (800905c <_vfiprintf_r+0x258>)
 8009038:	a904      	add	r1, sp, #16
 800903a:	4630      	mov	r0, r6
 800903c:	f7fe f970 	bl	8007320 <_printf_i>
 8009040:	e7e4      	b.n	800900c <_vfiprintf_r+0x208>
 8009042:	bf00      	nop
 8009044:	0800a05c 	.word	0x0800a05c
 8009048:	0800a07c 	.word	0x0800a07c
 800904c:	0800a03c 	.word	0x0800a03c
 8009050:	0800a1f4 	.word	0x0800a1f4
 8009054:	0800a1fe 	.word	0x0800a1fe
 8009058:	08006dd9 	.word	0x08006dd9
 800905c:	08008ddf 	.word	0x08008ddf
 8009060:	0800a1fa 	.word	0x0800a1fa

08009064 <_sbrk_r>:
 8009064:	b538      	push	{r3, r4, r5, lr}
 8009066:	4d06      	ldr	r5, [pc, #24]	; (8009080 <_sbrk_r+0x1c>)
 8009068:	2300      	movs	r3, #0
 800906a:	4604      	mov	r4, r0
 800906c:	4608      	mov	r0, r1
 800906e:	602b      	str	r3, [r5, #0]
 8009070:	f7f8 fad2 	bl	8001618 <_sbrk>
 8009074:	1c43      	adds	r3, r0, #1
 8009076:	d102      	bne.n	800907e <_sbrk_r+0x1a>
 8009078:	682b      	ldr	r3, [r5, #0]
 800907a:	b103      	cbz	r3, 800907e <_sbrk_r+0x1a>
 800907c:	6023      	str	r3, [r4, #0]
 800907e:	bd38      	pop	{r3, r4, r5, pc}
 8009080:	20000a80 	.word	0x20000a80

08009084 <__sread>:
 8009084:	b510      	push	{r4, lr}
 8009086:	460c      	mov	r4, r1
 8009088:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800908c:	f000 faa8 	bl	80095e0 <_read_r>
 8009090:	2800      	cmp	r0, #0
 8009092:	bfab      	itete	ge
 8009094:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009096:	89a3      	ldrhlt	r3, [r4, #12]
 8009098:	181b      	addge	r3, r3, r0
 800909a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800909e:	bfac      	ite	ge
 80090a0:	6563      	strge	r3, [r4, #84]	; 0x54
 80090a2:	81a3      	strhlt	r3, [r4, #12]
 80090a4:	bd10      	pop	{r4, pc}

080090a6 <__swrite>:
 80090a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090aa:	461f      	mov	r7, r3
 80090ac:	898b      	ldrh	r3, [r1, #12]
 80090ae:	05db      	lsls	r3, r3, #23
 80090b0:	4605      	mov	r5, r0
 80090b2:	460c      	mov	r4, r1
 80090b4:	4616      	mov	r6, r2
 80090b6:	d505      	bpl.n	80090c4 <__swrite+0x1e>
 80090b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090bc:	2302      	movs	r3, #2
 80090be:	2200      	movs	r2, #0
 80090c0:	f000 f9f8 	bl	80094b4 <_lseek_r>
 80090c4:	89a3      	ldrh	r3, [r4, #12]
 80090c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80090ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80090ce:	81a3      	strh	r3, [r4, #12]
 80090d0:	4632      	mov	r2, r6
 80090d2:	463b      	mov	r3, r7
 80090d4:	4628      	mov	r0, r5
 80090d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80090da:	f000 b869 	b.w	80091b0 <_write_r>

080090de <__sseek>:
 80090de:	b510      	push	{r4, lr}
 80090e0:	460c      	mov	r4, r1
 80090e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090e6:	f000 f9e5 	bl	80094b4 <_lseek_r>
 80090ea:	1c43      	adds	r3, r0, #1
 80090ec:	89a3      	ldrh	r3, [r4, #12]
 80090ee:	bf15      	itete	ne
 80090f0:	6560      	strne	r0, [r4, #84]	; 0x54
 80090f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80090f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80090fa:	81a3      	strheq	r3, [r4, #12]
 80090fc:	bf18      	it	ne
 80090fe:	81a3      	strhne	r3, [r4, #12]
 8009100:	bd10      	pop	{r4, pc}

08009102 <__sclose>:
 8009102:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009106:	f000 b8f1 	b.w	80092ec <_close_r>
	...

0800910c <__swbuf_r>:
 800910c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800910e:	460e      	mov	r6, r1
 8009110:	4614      	mov	r4, r2
 8009112:	4605      	mov	r5, r0
 8009114:	b118      	cbz	r0, 800911e <__swbuf_r+0x12>
 8009116:	6983      	ldr	r3, [r0, #24]
 8009118:	b90b      	cbnz	r3, 800911e <__swbuf_r+0x12>
 800911a:	f7ff f913 	bl	8008344 <__sinit>
 800911e:	4b21      	ldr	r3, [pc, #132]	; (80091a4 <__swbuf_r+0x98>)
 8009120:	429c      	cmp	r4, r3
 8009122:	d12b      	bne.n	800917c <__swbuf_r+0x70>
 8009124:	686c      	ldr	r4, [r5, #4]
 8009126:	69a3      	ldr	r3, [r4, #24]
 8009128:	60a3      	str	r3, [r4, #8]
 800912a:	89a3      	ldrh	r3, [r4, #12]
 800912c:	071a      	lsls	r2, r3, #28
 800912e:	d52f      	bpl.n	8009190 <__swbuf_r+0x84>
 8009130:	6923      	ldr	r3, [r4, #16]
 8009132:	b36b      	cbz	r3, 8009190 <__swbuf_r+0x84>
 8009134:	6923      	ldr	r3, [r4, #16]
 8009136:	6820      	ldr	r0, [r4, #0]
 8009138:	1ac0      	subs	r0, r0, r3
 800913a:	6963      	ldr	r3, [r4, #20]
 800913c:	b2f6      	uxtb	r6, r6
 800913e:	4283      	cmp	r3, r0
 8009140:	4637      	mov	r7, r6
 8009142:	dc04      	bgt.n	800914e <__swbuf_r+0x42>
 8009144:	4621      	mov	r1, r4
 8009146:	4628      	mov	r0, r5
 8009148:	f000 f966 	bl	8009418 <_fflush_r>
 800914c:	bb30      	cbnz	r0, 800919c <__swbuf_r+0x90>
 800914e:	68a3      	ldr	r3, [r4, #8]
 8009150:	3b01      	subs	r3, #1
 8009152:	60a3      	str	r3, [r4, #8]
 8009154:	6823      	ldr	r3, [r4, #0]
 8009156:	1c5a      	adds	r2, r3, #1
 8009158:	6022      	str	r2, [r4, #0]
 800915a:	701e      	strb	r6, [r3, #0]
 800915c:	6963      	ldr	r3, [r4, #20]
 800915e:	3001      	adds	r0, #1
 8009160:	4283      	cmp	r3, r0
 8009162:	d004      	beq.n	800916e <__swbuf_r+0x62>
 8009164:	89a3      	ldrh	r3, [r4, #12]
 8009166:	07db      	lsls	r3, r3, #31
 8009168:	d506      	bpl.n	8009178 <__swbuf_r+0x6c>
 800916a:	2e0a      	cmp	r6, #10
 800916c:	d104      	bne.n	8009178 <__swbuf_r+0x6c>
 800916e:	4621      	mov	r1, r4
 8009170:	4628      	mov	r0, r5
 8009172:	f000 f951 	bl	8009418 <_fflush_r>
 8009176:	b988      	cbnz	r0, 800919c <__swbuf_r+0x90>
 8009178:	4638      	mov	r0, r7
 800917a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800917c:	4b0a      	ldr	r3, [pc, #40]	; (80091a8 <__swbuf_r+0x9c>)
 800917e:	429c      	cmp	r4, r3
 8009180:	d101      	bne.n	8009186 <__swbuf_r+0x7a>
 8009182:	68ac      	ldr	r4, [r5, #8]
 8009184:	e7cf      	b.n	8009126 <__swbuf_r+0x1a>
 8009186:	4b09      	ldr	r3, [pc, #36]	; (80091ac <__swbuf_r+0xa0>)
 8009188:	429c      	cmp	r4, r3
 800918a:	bf08      	it	eq
 800918c:	68ec      	ldreq	r4, [r5, #12]
 800918e:	e7ca      	b.n	8009126 <__swbuf_r+0x1a>
 8009190:	4621      	mov	r1, r4
 8009192:	4628      	mov	r0, r5
 8009194:	f000 f81e 	bl	80091d4 <__swsetup_r>
 8009198:	2800      	cmp	r0, #0
 800919a:	d0cb      	beq.n	8009134 <__swbuf_r+0x28>
 800919c:	f04f 37ff 	mov.w	r7, #4294967295
 80091a0:	e7ea      	b.n	8009178 <__swbuf_r+0x6c>
 80091a2:	bf00      	nop
 80091a4:	0800a05c 	.word	0x0800a05c
 80091a8:	0800a07c 	.word	0x0800a07c
 80091ac:	0800a03c 	.word	0x0800a03c

080091b0 <_write_r>:
 80091b0:	b538      	push	{r3, r4, r5, lr}
 80091b2:	4d07      	ldr	r5, [pc, #28]	; (80091d0 <_write_r+0x20>)
 80091b4:	4604      	mov	r4, r0
 80091b6:	4608      	mov	r0, r1
 80091b8:	4611      	mov	r1, r2
 80091ba:	2200      	movs	r2, #0
 80091bc:	602a      	str	r2, [r5, #0]
 80091be:	461a      	mov	r2, r3
 80091c0:	f7f8 f9d9 	bl	8001576 <_write>
 80091c4:	1c43      	adds	r3, r0, #1
 80091c6:	d102      	bne.n	80091ce <_write_r+0x1e>
 80091c8:	682b      	ldr	r3, [r5, #0]
 80091ca:	b103      	cbz	r3, 80091ce <_write_r+0x1e>
 80091cc:	6023      	str	r3, [r4, #0]
 80091ce:	bd38      	pop	{r3, r4, r5, pc}
 80091d0:	20000a80 	.word	0x20000a80

080091d4 <__swsetup_r>:
 80091d4:	4b32      	ldr	r3, [pc, #200]	; (80092a0 <__swsetup_r+0xcc>)
 80091d6:	b570      	push	{r4, r5, r6, lr}
 80091d8:	681d      	ldr	r5, [r3, #0]
 80091da:	4606      	mov	r6, r0
 80091dc:	460c      	mov	r4, r1
 80091de:	b125      	cbz	r5, 80091ea <__swsetup_r+0x16>
 80091e0:	69ab      	ldr	r3, [r5, #24]
 80091e2:	b913      	cbnz	r3, 80091ea <__swsetup_r+0x16>
 80091e4:	4628      	mov	r0, r5
 80091e6:	f7ff f8ad 	bl	8008344 <__sinit>
 80091ea:	4b2e      	ldr	r3, [pc, #184]	; (80092a4 <__swsetup_r+0xd0>)
 80091ec:	429c      	cmp	r4, r3
 80091ee:	d10f      	bne.n	8009210 <__swsetup_r+0x3c>
 80091f0:	686c      	ldr	r4, [r5, #4]
 80091f2:	89a3      	ldrh	r3, [r4, #12]
 80091f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80091f8:	0719      	lsls	r1, r3, #28
 80091fa:	d42c      	bmi.n	8009256 <__swsetup_r+0x82>
 80091fc:	06dd      	lsls	r5, r3, #27
 80091fe:	d411      	bmi.n	8009224 <__swsetup_r+0x50>
 8009200:	2309      	movs	r3, #9
 8009202:	6033      	str	r3, [r6, #0]
 8009204:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009208:	81a3      	strh	r3, [r4, #12]
 800920a:	f04f 30ff 	mov.w	r0, #4294967295
 800920e:	e03e      	b.n	800928e <__swsetup_r+0xba>
 8009210:	4b25      	ldr	r3, [pc, #148]	; (80092a8 <__swsetup_r+0xd4>)
 8009212:	429c      	cmp	r4, r3
 8009214:	d101      	bne.n	800921a <__swsetup_r+0x46>
 8009216:	68ac      	ldr	r4, [r5, #8]
 8009218:	e7eb      	b.n	80091f2 <__swsetup_r+0x1e>
 800921a:	4b24      	ldr	r3, [pc, #144]	; (80092ac <__swsetup_r+0xd8>)
 800921c:	429c      	cmp	r4, r3
 800921e:	bf08      	it	eq
 8009220:	68ec      	ldreq	r4, [r5, #12]
 8009222:	e7e6      	b.n	80091f2 <__swsetup_r+0x1e>
 8009224:	0758      	lsls	r0, r3, #29
 8009226:	d512      	bpl.n	800924e <__swsetup_r+0x7a>
 8009228:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800922a:	b141      	cbz	r1, 800923e <__swsetup_r+0x6a>
 800922c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009230:	4299      	cmp	r1, r3
 8009232:	d002      	beq.n	800923a <__swsetup_r+0x66>
 8009234:	4630      	mov	r0, r6
 8009236:	f7ff fcdb 	bl	8008bf0 <_free_r>
 800923a:	2300      	movs	r3, #0
 800923c:	6363      	str	r3, [r4, #52]	; 0x34
 800923e:	89a3      	ldrh	r3, [r4, #12]
 8009240:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009244:	81a3      	strh	r3, [r4, #12]
 8009246:	2300      	movs	r3, #0
 8009248:	6063      	str	r3, [r4, #4]
 800924a:	6923      	ldr	r3, [r4, #16]
 800924c:	6023      	str	r3, [r4, #0]
 800924e:	89a3      	ldrh	r3, [r4, #12]
 8009250:	f043 0308 	orr.w	r3, r3, #8
 8009254:	81a3      	strh	r3, [r4, #12]
 8009256:	6923      	ldr	r3, [r4, #16]
 8009258:	b94b      	cbnz	r3, 800926e <__swsetup_r+0x9a>
 800925a:	89a3      	ldrh	r3, [r4, #12]
 800925c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009260:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009264:	d003      	beq.n	800926e <__swsetup_r+0x9a>
 8009266:	4621      	mov	r1, r4
 8009268:	4630      	mov	r0, r6
 800926a:	f000 f95b 	bl	8009524 <__smakebuf_r>
 800926e:	89a0      	ldrh	r0, [r4, #12]
 8009270:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009274:	f010 0301 	ands.w	r3, r0, #1
 8009278:	d00a      	beq.n	8009290 <__swsetup_r+0xbc>
 800927a:	2300      	movs	r3, #0
 800927c:	60a3      	str	r3, [r4, #8]
 800927e:	6963      	ldr	r3, [r4, #20]
 8009280:	425b      	negs	r3, r3
 8009282:	61a3      	str	r3, [r4, #24]
 8009284:	6923      	ldr	r3, [r4, #16]
 8009286:	b943      	cbnz	r3, 800929a <__swsetup_r+0xc6>
 8009288:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800928c:	d1ba      	bne.n	8009204 <__swsetup_r+0x30>
 800928e:	bd70      	pop	{r4, r5, r6, pc}
 8009290:	0781      	lsls	r1, r0, #30
 8009292:	bf58      	it	pl
 8009294:	6963      	ldrpl	r3, [r4, #20]
 8009296:	60a3      	str	r3, [r4, #8]
 8009298:	e7f4      	b.n	8009284 <__swsetup_r+0xb0>
 800929a:	2000      	movs	r0, #0
 800929c:	e7f7      	b.n	800928e <__swsetup_r+0xba>
 800929e:	bf00      	nop
 80092a0:	2000040c 	.word	0x2000040c
 80092a4:	0800a05c 	.word	0x0800a05c
 80092a8:	0800a07c 	.word	0x0800a07c
 80092ac:	0800a03c 	.word	0x0800a03c

080092b0 <__assert_func>:
 80092b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80092b2:	4614      	mov	r4, r2
 80092b4:	461a      	mov	r2, r3
 80092b6:	4b09      	ldr	r3, [pc, #36]	; (80092dc <__assert_func+0x2c>)
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	4605      	mov	r5, r0
 80092bc:	68d8      	ldr	r0, [r3, #12]
 80092be:	b14c      	cbz	r4, 80092d4 <__assert_func+0x24>
 80092c0:	4b07      	ldr	r3, [pc, #28]	; (80092e0 <__assert_func+0x30>)
 80092c2:	9100      	str	r1, [sp, #0]
 80092c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80092c8:	4906      	ldr	r1, [pc, #24]	; (80092e4 <__assert_func+0x34>)
 80092ca:	462b      	mov	r3, r5
 80092cc:	f000 f8e0 	bl	8009490 <fiprintf>
 80092d0:	f000 f9a5 	bl	800961e <abort>
 80092d4:	4b04      	ldr	r3, [pc, #16]	; (80092e8 <__assert_func+0x38>)
 80092d6:	461c      	mov	r4, r3
 80092d8:	e7f3      	b.n	80092c2 <__assert_func+0x12>
 80092da:	bf00      	nop
 80092dc:	2000040c 	.word	0x2000040c
 80092e0:	0800a205 	.word	0x0800a205
 80092e4:	0800a212 	.word	0x0800a212
 80092e8:	0800a240 	.word	0x0800a240

080092ec <_close_r>:
 80092ec:	b538      	push	{r3, r4, r5, lr}
 80092ee:	4d06      	ldr	r5, [pc, #24]	; (8009308 <_close_r+0x1c>)
 80092f0:	2300      	movs	r3, #0
 80092f2:	4604      	mov	r4, r0
 80092f4:	4608      	mov	r0, r1
 80092f6:	602b      	str	r3, [r5, #0]
 80092f8:	f7f8 f959 	bl	80015ae <_close>
 80092fc:	1c43      	adds	r3, r0, #1
 80092fe:	d102      	bne.n	8009306 <_close_r+0x1a>
 8009300:	682b      	ldr	r3, [r5, #0]
 8009302:	b103      	cbz	r3, 8009306 <_close_r+0x1a>
 8009304:	6023      	str	r3, [r4, #0]
 8009306:	bd38      	pop	{r3, r4, r5, pc}
 8009308:	20000a80 	.word	0x20000a80

0800930c <__sflush_r>:
 800930c:	898a      	ldrh	r2, [r1, #12]
 800930e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009312:	4605      	mov	r5, r0
 8009314:	0710      	lsls	r0, r2, #28
 8009316:	460c      	mov	r4, r1
 8009318:	d458      	bmi.n	80093cc <__sflush_r+0xc0>
 800931a:	684b      	ldr	r3, [r1, #4]
 800931c:	2b00      	cmp	r3, #0
 800931e:	dc05      	bgt.n	800932c <__sflush_r+0x20>
 8009320:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009322:	2b00      	cmp	r3, #0
 8009324:	dc02      	bgt.n	800932c <__sflush_r+0x20>
 8009326:	2000      	movs	r0, #0
 8009328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800932c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800932e:	2e00      	cmp	r6, #0
 8009330:	d0f9      	beq.n	8009326 <__sflush_r+0x1a>
 8009332:	2300      	movs	r3, #0
 8009334:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009338:	682f      	ldr	r7, [r5, #0]
 800933a:	602b      	str	r3, [r5, #0]
 800933c:	d032      	beq.n	80093a4 <__sflush_r+0x98>
 800933e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009340:	89a3      	ldrh	r3, [r4, #12]
 8009342:	075a      	lsls	r2, r3, #29
 8009344:	d505      	bpl.n	8009352 <__sflush_r+0x46>
 8009346:	6863      	ldr	r3, [r4, #4]
 8009348:	1ac0      	subs	r0, r0, r3
 800934a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800934c:	b10b      	cbz	r3, 8009352 <__sflush_r+0x46>
 800934e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009350:	1ac0      	subs	r0, r0, r3
 8009352:	2300      	movs	r3, #0
 8009354:	4602      	mov	r2, r0
 8009356:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009358:	6a21      	ldr	r1, [r4, #32]
 800935a:	4628      	mov	r0, r5
 800935c:	47b0      	blx	r6
 800935e:	1c43      	adds	r3, r0, #1
 8009360:	89a3      	ldrh	r3, [r4, #12]
 8009362:	d106      	bne.n	8009372 <__sflush_r+0x66>
 8009364:	6829      	ldr	r1, [r5, #0]
 8009366:	291d      	cmp	r1, #29
 8009368:	d82c      	bhi.n	80093c4 <__sflush_r+0xb8>
 800936a:	4a2a      	ldr	r2, [pc, #168]	; (8009414 <__sflush_r+0x108>)
 800936c:	40ca      	lsrs	r2, r1
 800936e:	07d6      	lsls	r6, r2, #31
 8009370:	d528      	bpl.n	80093c4 <__sflush_r+0xb8>
 8009372:	2200      	movs	r2, #0
 8009374:	6062      	str	r2, [r4, #4]
 8009376:	04d9      	lsls	r1, r3, #19
 8009378:	6922      	ldr	r2, [r4, #16]
 800937a:	6022      	str	r2, [r4, #0]
 800937c:	d504      	bpl.n	8009388 <__sflush_r+0x7c>
 800937e:	1c42      	adds	r2, r0, #1
 8009380:	d101      	bne.n	8009386 <__sflush_r+0x7a>
 8009382:	682b      	ldr	r3, [r5, #0]
 8009384:	b903      	cbnz	r3, 8009388 <__sflush_r+0x7c>
 8009386:	6560      	str	r0, [r4, #84]	; 0x54
 8009388:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800938a:	602f      	str	r7, [r5, #0]
 800938c:	2900      	cmp	r1, #0
 800938e:	d0ca      	beq.n	8009326 <__sflush_r+0x1a>
 8009390:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009394:	4299      	cmp	r1, r3
 8009396:	d002      	beq.n	800939e <__sflush_r+0x92>
 8009398:	4628      	mov	r0, r5
 800939a:	f7ff fc29 	bl	8008bf0 <_free_r>
 800939e:	2000      	movs	r0, #0
 80093a0:	6360      	str	r0, [r4, #52]	; 0x34
 80093a2:	e7c1      	b.n	8009328 <__sflush_r+0x1c>
 80093a4:	6a21      	ldr	r1, [r4, #32]
 80093a6:	2301      	movs	r3, #1
 80093a8:	4628      	mov	r0, r5
 80093aa:	47b0      	blx	r6
 80093ac:	1c41      	adds	r1, r0, #1
 80093ae:	d1c7      	bne.n	8009340 <__sflush_r+0x34>
 80093b0:	682b      	ldr	r3, [r5, #0]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d0c4      	beq.n	8009340 <__sflush_r+0x34>
 80093b6:	2b1d      	cmp	r3, #29
 80093b8:	d001      	beq.n	80093be <__sflush_r+0xb2>
 80093ba:	2b16      	cmp	r3, #22
 80093bc:	d101      	bne.n	80093c2 <__sflush_r+0xb6>
 80093be:	602f      	str	r7, [r5, #0]
 80093c0:	e7b1      	b.n	8009326 <__sflush_r+0x1a>
 80093c2:	89a3      	ldrh	r3, [r4, #12]
 80093c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80093c8:	81a3      	strh	r3, [r4, #12]
 80093ca:	e7ad      	b.n	8009328 <__sflush_r+0x1c>
 80093cc:	690f      	ldr	r7, [r1, #16]
 80093ce:	2f00      	cmp	r7, #0
 80093d0:	d0a9      	beq.n	8009326 <__sflush_r+0x1a>
 80093d2:	0793      	lsls	r3, r2, #30
 80093d4:	680e      	ldr	r6, [r1, #0]
 80093d6:	bf08      	it	eq
 80093d8:	694b      	ldreq	r3, [r1, #20]
 80093da:	600f      	str	r7, [r1, #0]
 80093dc:	bf18      	it	ne
 80093de:	2300      	movne	r3, #0
 80093e0:	eba6 0807 	sub.w	r8, r6, r7
 80093e4:	608b      	str	r3, [r1, #8]
 80093e6:	f1b8 0f00 	cmp.w	r8, #0
 80093ea:	dd9c      	ble.n	8009326 <__sflush_r+0x1a>
 80093ec:	6a21      	ldr	r1, [r4, #32]
 80093ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80093f0:	4643      	mov	r3, r8
 80093f2:	463a      	mov	r2, r7
 80093f4:	4628      	mov	r0, r5
 80093f6:	47b0      	blx	r6
 80093f8:	2800      	cmp	r0, #0
 80093fa:	dc06      	bgt.n	800940a <__sflush_r+0xfe>
 80093fc:	89a3      	ldrh	r3, [r4, #12]
 80093fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009402:	81a3      	strh	r3, [r4, #12]
 8009404:	f04f 30ff 	mov.w	r0, #4294967295
 8009408:	e78e      	b.n	8009328 <__sflush_r+0x1c>
 800940a:	4407      	add	r7, r0
 800940c:	eba8 0800 	sub.w	r8, r8, r0
 8009410:	e7e9      	b.n	80093e6 <__sflush_r+0xda>
 8009412:	bf00      	nop
 8009414:	20400001 	.word	0x20400001

08009418 <_fflush_r>:
 8009418:	b538      	push	{r3, r4, r5, lr}
 800941a:	690b      	ldr	r3, [r1, #16]
 800941c:	4605      	mov	r5, r0
 800941e:	460c      	mov	r4, r1
 8009420:	b913      	cbnz	r3, 8009428 <_fflush_r+0x10>
 8009422:	2500      	movs	r5, #0
 8009424:	4628      	mov	r0, r5
 8009426:	bd38      	pop	{r3, r4, r5, pc}
 8009428:	b118      	cbz	r0, 8009432 <_fflush_r+0x1a>
 800942a:	6983      	ldr	r3, [r0, #24]
 800942c:	b90b      	cbnz	r3, 8009432 <_fflush_r+0x1a>
 800942e:	f7fe ff89 	bl	8008344 <__sinit>
 8009432:	4b14      	ldr	r3, [pc, #80]	; (8009484 <_fflush_r+0x6c>)
 8009434:	429c      	cmp	r4, r3
 8009436:	d11b      	bne.n	8009470 <_fflush_r+0x58>
 8009438:	686c      	ldr	r4, [r5, #4]
 800943a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d0ef      	beq.n	8009422 <_fflush_r+0xa>
 8009442:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009444:	07d0      	lsls	r0, r2, #31
 8009446:	d404      	bmi.n	8009452 <_fflush_r+0x3a>
 8009448:	0599      	lsls	r1, r3, #22
 800944a:	d402      	bmi.n	8009452 <_fflush_r+0x3a>
 800944c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800944e:	f7ff f81c 	bl	800848a <__retarget_lock_acquire_recursive>
 8009452:	4628      	mov	r0, r5
 8009454:	4621      	mov	r1, r4
 8009456:	f7ff ff59 	bl	800930c <__sflush_r>
 800945a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800945c:	07da      	lsls	r2, r3, #31
 800945e:	4605      	mov	r5, r0
 8009460:	d4e0      	bmi.n	8009424 <_fflush_r+0xc>
 8009462:	89a3      	ldrh	r3, [r4, #12]
 8009464:	059b      	lsls	r3, r3, #22
 8009466:	d4dd      	bmi.n	8009424 <_fflush_r+0xc>
 8009468:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800946a:	f7ff f80f 	bl	800848c <__retarget_lock_release_recursive>
 800946e:	e7d9      	b.n	8009424 <_fflush_r+0xc>
 8009470:	4b05      	ldr	r3, [pc, #20]	; (8009488 <_fflush_r+0x70>)
 8009472:	429c      	cmp	r4, r3
 8009474:	d101      	bne.n	800947a <_fflush_r+0x62>
 8009476:	68ac      	ldr	r4, [r5, #8]
 8009478:	e7df      	b.n	800943a <_fflush_r+0x22>
 800947a:	4b04      	ldr	r3, [pc, #16]	; (800948c <_fflush_r+0x74>)
 800947c:	429c      	cmp	r4, r3
 800947e:	bf08      	it	eq
 8009480:	68ec      	ldreq	r4, [r5, #12]
 8009482:	e7da      	b.n	800943a <_fflush_r+0x22>
 8009484:	0800a05c 	.word	0x0800a05c
 8009488:	0800a07c 	.word	0x0800a07c
 800948c:	0800a03c 	.word	0x0800a03c

08009490 <fiprintf>:
 8009490:	b40e      	push	{r1, r2, r3}
 8009492:	b503      	push	{r0, r1, lr}
 8009494:	4601      	mov	r1, r0
 8009496:	ab03      	add	r3, sp, #12
 8009498:	4805      	ldr	r0, [pc, #20]	; (80094b0 <fiprintf+0x20>)
 800949a:	f853 2b04 	ldr.w	r2, [r3], #4
 800949e:	6800      	ldr	r0, [r0, #0]
 80094a0:	9301      	str	r3, [sp, #4]
 80094a2:	f7ff fcaf 	bl	8008e04 <_vfiprintf_r>
 80094a6:	b002      	add	sp, #8
 80094a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80094ac:	b003      	add	sp, #12
 80094ae:	4770      	bx	lr
 80094b0:	2000040c 	.word	0x2000040c

080094b4 <_lseek_r>:
 80094b4:	b538      	push	{r3, r4, r5, lr}
 80094b6:	4d07      	ldr	r5, [pc, #28]	; (80094d4 <_lseek_r+0x20>)
 80094b8:	4604      	mov	r4, r0
 80094ba:	4608      	mov	r0, r1
 80094bc:	4611      	mov	r1, r2
 80094be:	2200      	movs	r2, #0
 80094c0:	602a      	str	r2, [r5, #0]
 80094c2:	461a      	mov	r2, r3
 80094c4:	f7f8 f89a 	bl	80015fc <_lseek>
 80094c8:	1c43      	adds	r3, r0, #1
 80094ca:	d102      	bne.n	80094d2 <_lseek_r+0x1e>
 80094cc:	682b      	ldr	r3, [r5, #0]
 80094ce:	b103      	cbz	r3, 80094d2 <_lseek_r+0x1e>
 80094d0:	6023      	str	r3, [r4, #0]
 80094d2:	bd38      	pop	{r3, r4, r5, pc}
 80094d4:	20000a80 	.word	0x20000a80

080094d8 <__swhatbuf_r>:
 80094d8:	b570      	push	{r4, r5, r6, lr}
 80094da:	460e      	mov	r6, r1
 80094dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094e0:	2900      	cmp	r1, #0
 80094e2:	b096      	sub	sp, #88	; 0x58
 80094e4:	4614      	mov	r4, r2
 80094e6:	461d      	mov	r5, r3
 80094e8:	da08      	bge.n	80094fc <__swhatbuf_r+0x24>
 80094ea:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80094ee:	2200      	movs	r2, #0
 80094f0:	602a      	str	r2, [r5, #0]
 80094f2:	061a      	lsls	r2, r3, #24
 80094f4:	d410      	bmi.n	8009518 <__swhatbuf_r+0x40>
 80094f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80094fa:	e00e      	b.n	800951a <__swhatbuf_r+0x42>
 80094fc:	466a      	mov	r2, sp
 80094fe:	f000 f895 	bl	800962c <_fstat_r>
 8009502:	2800      	cmp	r0, #0
 8009504:	dbf1      	blt.n	80094ea <__swhatbuf_r+0x12>
 8009506:	9a01      	ldr	r2, [sp, #4]
 8009508:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800950c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009510:	425a      	negs	r2, r3
 8009512:	415a      	adcs	r2, r3
 8009514:	602a      	str	r2, [r5, #0]
 8009516:	e7ee      	b.n	80094f6 <__swhatbuf_r+0x1e>
 8009518:	2340      	movs	r3, #64	; 0x40
 800951a:	2000      	movs	r0, #0
 800951c:	6023      	str	r3, [r4, #0]
 800951e:	b016      	add	sp, #88	; 0x58
 8009520:	bd70      	pop	{r4, r5, r6, pc}
	...

08009524 <__smakebuf_r>:
 8009524:	898b      	ldrh	r3, [r1, #12]
 8009526:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009528:	079d      	lsls	r5, r3, #30
 800952a:	4606      	mov	r6, r0
 800952c:	460c      	mov	r4, r1
 800952e:	d507      	bpl.n	8009540 <__smakebuf_r+0x1c>
 8009530:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009534:	6023      	str	r3, [r4, #0]
 8009536:	6123      	str	r3, [r4, #16]
 8009538:	2301      	movs	r3, #1
 800953a:	6163      	str	r3, [r4, #20]
 800953c:	b002      	add	sp, #8
 800953e:	bd70      	pop	{r4, r5, r6, pc}
 8009540:	ab01      	add	r3, sp, #4
 8009542:	466a      	mov	r2, sp
 8009544:	f7ff ffc8 	bl	80094d8 <__swhatbuf_r>
 8009548:	9900      	ldr	r1, [sp, #0]
 800954a:	4605      	mov	r5, r0
 800954c:	4630      	mov	r0, r6
 800954e:	f7ff fbbb 	bl	8008cc8 <_malloc_r>
 8009552:	b948      	cbnz	r0, 8009568 <__smakebuf_r+0x44>
 8009554:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009558:	059a      	lsls	r2, r3, #22
 800955a:	d4ef      	bmi.n	800953c <__smakebuf_r+0x18>
 800955c:	f023 0303 	bic.w	r3, r3, #3
 8009560:	f043 0302 	orr.w	r3, r3, #2
 8009564:	81a3      	strh	r3, [r4, #12]
 8009566:	e7e3      	b.n	8009530 <__smakebuf_r+0xc>
 8009568:	4b0d      	ldr	r3, [pc, #52]	; (80095a0 <__smakebuf_r+0x7c>)
 800956a:	62b3      	str	r3, [r6, #40]	; 0x28
 800956c:	89a3      	ldrh	r3, [r4, #12]
 800956e:	6020      	str	r0, [r4, #0]
 8009570:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009574:	81a3      	strh	r3, [r4, #12]
 8009576:	9b00      	ldr	r3, [sp, #0]
 8009578:	6163      	str	r3, [r4, #20]
 800957a:	9b01      	ldr	r3, [sp, #4]
 800957c:	6120      	str	r0, [r4, #16]
 800957e:	b15b      	cbz	r3, 8009598 <__smakebuf_r+0x74>
 8009580:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009584:	4630      	mov	r0, r6
 8009586:	f000 f863 	bl	8009650 <_isatty_r>
 800958a:	b128      	cbz	r0, 8009598 <__smakebuf_r+0x74>
 800958c:	89a3      	ldrh	r3, [r4, #12]
 800958e:	f023 0303 	bic.w	r3, r3, #3
 8009592:	f043 0301 	orr.w	r3, r3, #1
 8009596:	81a3      	strh	r3, [r4, #12]
 8009598:	89a0      	ldrh	r0, [r4, #12]
 800959a:	4305      	orrs	r5, r0
 800959c:	81a5      	strh	r5, [r4, #12]
 800959e:	e7cd      	b.n	800953c <__smakebuf_r+0x18>
 80095a0:	080082dd 	.word	0x080082dd

080095a4 <__ascii_mbtowc>:
 80095a4:	b082      	sub	sp, #8
 80095a6:	b901      	cbnz	r1, 80095aa <__ascii_mbtowc+0x6>
 80095a8:	a901      	add	r1, sp, #4
 80095aa:	b142      	cbz	r2, 80095be <__ascii_mbtowc+0x1a>
 80095ac:	b14b      	cbz	r3, 80095c2 <__ascii_mbtowc+0x1e>
 80095ae:	7813      	ldrb	r3, [r2, #0]
 80095b0:	600b      	str	r3, [r1, #0]
 80095b2:	7812      	ldrb	r2, [r2, #0]
 80095b4:	1e10      	subs	r0, r2, #0
 80095b6:	bf18      	it	ne
 80095b8:	2001      	movne	r0, #1
 80095ba:	b002      	add	sp, #8
 80095bc:	4770      	bx	lr
 80095be:	4610      	mov	r0, r2
 80095c0:	e7fb      	b.n	80095ba <__ascii_mbtowc+0x16>
 80095c2:	f06f 0001 	mvn.w	r0, #1
 80095c6:	e7f8      	b.n	80095ba <__ascii_mbtowc+0x16>

080095c8 <__malloc_lock>:
 80095c8:	4801      	ldr	r0, [pc, #4]	; (80095d0 <__malloc_lock+0x8>)
 80095ca:	f7fe bf5e 	b.w	800848a <__retarget_lock_acquire_recursive>
 80095ce:	bf00      	nop
 80095d0:	20000a74 	.word	0x20000a74

080095d4 <__malloc_unlock>:
 80095d4:	4801      	ldr	r0, [pc, #4]	; (80095dc <__malloc_unlock+0x8>)
 80095d6:	f7fe bf59 	b.w	800848c <__retarget_lock_release_recursive>
 80095da:	bf00      	nop
 80095dc:	20000a74 	.word	0x20000a74

080095e0 <_read_r>:
 80095e0:	b538      	push	{r3, r4, r5, lr}
 80095e2:	4d07      	ldr	r5, [pc, #28]	; (8009600 <_read_r+0x20>)
 80095e4:	4604      	mov	r4, r0
 80095e6:	4608      	mov	r0, r1
 80095e8:	4611      	mov	r1, r2
 80095ea:	2200      	movs	r2, #0
 80095ec:	602a      	str	r2, [r5, #0]
 80095ee:	461a      	mov	r2, r3
 80095f0:	f7f7 ffa4 	bl	800153c <_read>
 80095f4:	1c43      	adds	r3, r0, #1
 80095f6:	d102      	bne.n	80095fe <_read_r+0x1e>
 80095f8:	682b      	ldr	r3, [r5, #0]
 80095fa:	b103      	cbz	r3, 80095fe <_read_r+0x1e>
 80095fc:	6023      	str	r3, [r4, #0]
 80095fe:	bd38      	pop	{r3, r4, r5, pc}
 8009600:	20000a80 	.word	0x20000a80

08009604 <__ascii_wctomb>:
 8009604:	b149      	cbz	r1, 800961a <__ascii_wctomb+0x16>
 8009606:	2aff      	cmp	r2, #255	; 0xff
 8009608:	bf85      	ittet	hi
 800960a:	238a      	movhi	r3, #138	; 0x8a
 800960c:	6003      	strhi	r3, [r0, #0]
 800960e:	700a      	strbls	r2, [r1, #0]
 8009610:	f04f 30ff 	movhi.w	r0, #4294967295
 8009614:	bf98      	it	ls
 8009616:	2001      	movls	r0, #1
 8009618:	4770      	bx	lr
 800961a:	4608      	mov	r0, r1
 800961c:	4770      	bx	lr

0800961e <abort>:
 800961e:	b508      	push	{r3, lr}
 8009620:	2006      	movs	r0, #6
 8009622:	f000 f84d 	bl	80096c0 <raise>
 8009626:	2001      	movs	r0, #1
 8009628:	f7f7 ff7e 	bl	8001528 <_exit>

0800962c <_fstat_r>:
 800962c:	b538      	push	{r3, r4, r5, lr}
 800962e:	4d07      	ldr	r5, [pc, #28]	; (800964c <_fstat_r+0x20>)
 8009630:	2300      	movs	r3, #0
 8009632:	4604      	mov	r4, r0
 8009634:	4608      	mov	r0, r1
 8009636:	4611      	mov	r1, r2
 8009638:	602b      	str	r3, [r5, #0]
 800963a:	f7f7 ffc4 	bl	80015c6 <_fstat>
 800963e:	1c43      	adds	r3, r0, #1
 8009640:	d102      	bne.n	8009648 <_fstat_r+0x1c>
 8009642:	682b      	ldr	r3, [r5, #0]
 8009644:	b103      	cbz	r3, 8009648 <_fstat_r+0x1c>
 8009646:	6023      	str	r3, [r4, #0]
 8009648:	bd38      	pop	{r3, r4, r5, pc}
 800964a:	bf00      	nop
 800964c:	20000a80 	.word	0x20000a80

08009650 <_isatty_r>:
 8009650:	b538      	push	{r3, r4, r5, lr}
 8009652:	4d06      	ldr	r5, [pc, #24]	; (800966c <_isatty_r+0x1c>)
 8009654:	2300      	movs	r3, #0
 8009656:	4604      	mov	r4, r0
 8009658:	4608      	mov	r0, r1
 800965a:	602b      	str	r3, [r5, #0]
 800965c:	f7f7 ffc3 	bl	80015e6 <_isatty>
 8009660:	1c43      	adds	r3, r0, #1
 8009662:	d102      	bne.n	800966a <_isatty_r+0x1a>
 8009664:	682b      	ldr	r3, [r5, #0]
 8009666:	b103      	cbz	r3, 800966a <_isatty_r+0x1a>
 8009668:	6023      	str	r3, [r4, #0]
 800966a:	bd38      	pop	{r3, r4, r5, pc}
 800966c:	20000a80 	.word	0x20000a80

08009670 <_raise_r>:
 8009670:	291f      	cmp	r1, #31
 8009672:	b538      	push	{r3, r4, r5, lr}
 8009674:	4604      	mov	r4, r0
 8009676:	460d      	mov	r5, r1
 8009678:	d904      	bls.n	8009684 <_raise_r+0x14>
 800967a:	2316      	movs	r3, #22
 800967c:	6003      	str	r3, [r0, #0]
 800967e:	f04f 30ff 	mov.w	r0, #4294967295
 8009682:	bd38      	pop	{r3, r4, r5, pc}
 8009684:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009686:	b112      	cbz	r2, 800968e <_raise_r+0x1e>
 8009688:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800968c:	b94b      	cbnz	r3, 80096a2 <_raise_r+0x32>
 800968e:	4620      	mov	r0, r4
 8009690:	f000 f830 	bl	80096f4 <_getpid_r>
 8009694:	462a      	mov	r2, r5
 8009696:	4601      	mov	r1, r0
 8009698:	4620      	mov	r0, r4
 800969a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800969e:	f000 b817 	b.w	80096d0 <_kill_r>
 80096a2:	2b01      	cmp	r3, #1
 80096a4:	d00a      	beq.n	80096bc <_raise_r+0x4c>
 80096a6:	1c59      	adds	r1, r3, #1
 80096a8:	d103      	bne.n	80096b2 <_raise_r+0x42>
 80096aa:	2316      	movs	r3, #22
 80096ac:	6003      	str	r3, [r0, #0]
 80096ae:	2001      	movs	r0, #1
 80096b0:	e7e7      	b.n	8009682 <_raise_r+0x12>
 80096b2:	2400      	movs	r4, #0
 80096b4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80096b8:	4628      	mov	r0, r5
 80096ba:	4798      	blx	r3
 80096bc:	2000      	movs	r0, #0
 80096be:	e7e0      	b.n	8009682 <_raise_r+0x12>

080096c0 <raise>:
 80096c0:	4b02      	ldr	r3, [pc, #8]	; (80096cc <raise+0xc>)
 80096c2:	4601      	mov	r1, r0
 80096c4:	6818      	ldr	r0, [r3, #0]
 80096c6:	f7ff bfd3 	b.w	8009670 <_raise_r>
 80096ca:	bf00      	nop
 80096cc:	2000040c 	.word	0x2000040c

080096d0 <_kill_r>:
 80096d0:	b538      	push	{r3, r4, r5, lr}
 80096d2:	4d07      	ldr	r5, [pc, #28]	; (80096f0 <_kill_r+0x20>)
 80096d4:	2300      	movs	r3, #0
 80096d6:	4604      	mov	r4, r0
 80096d8:	4608      	mov	r0, r1
 80096da:	4611      	mov	r1, r2
 80096dc:	602b      	str	r3, [r5, #0]
 80096de:	f7f7 ff13 	bl	8001508 <_kill>
 80096e2:	1c43      	adds	r3, r0, #1
 80096e4:	d102      	bne.n	80096ec <_kill_r+0x1c>
 80096e6:	682b      	ldr	r3, [r5, #0]
 80096e8:	b103      	cbz	r3, 80096ec <_kill_r+0x1c>
 80096ea:	6023      	str	r3, [r4, #0]
 80096ec:	bd38      	pop	{r3, r4, r5, pc}
 80096ee:	bf00      	nop
 80096f0:	20000a80 	.word	0x20000a80

080096f4 <_getpid_r>:
 80096f4:	f7f7 bf00 	b.w	80014f8 <_getpid>

080096f8 <roundf>:
 80096f8:	ee10 0a10 	vmov	r0, s0
 80096fc:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8009700:	3a7f      	subs	r2, #127	; 0x7f
 8009702:	2a16      	cmp	r2, #22
 8009704:	dc15      	bgt.n	8009732 <roundf+0x3a>
 8009706:	2a00      	cmp	r2, #0
 8009708:	da08      	bge.n	800971c <roundf+0x24>
 800970a:	3201      	adds	r2, #1
 800970c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8009710:	d101      	bne.n	8009716 <roundf+0x1e>
 8009712:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 8009716:	ee00 3a10 	vmov	s0, r3
 800971a:	4770      	bx	lr
 800971c:	4907      	ldr	r1, [pc, #28]	; (800973c <roundf+0x44>)
 800971e:	4111      	asrs	r1, r2
 8009720:	4208      	tst	r0, r1
 8009722:	d0fa      	beq.n	800971a <roundf+0x22>
 8009724:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009728:	4113      	asrs	r3, r2
 800972a:	4403      	add	r3, r0
 800972c:	ea23 0301 	bic.w	r3, r3, r1
 8009730:	e7f1      	b.n	8009716 <roundf+0x1e>
 8009732:	2a80      	cmp	r2, #128	; 0x80
 8009734:	d1f1      	bne.n	800971a <roundf+0x22>
 8009736:	ee30 0a00 	vadd.f32	s0, s0, s0
 800973a:	4770      	bx	lr
 800973c:	007fffff 	.word	0x007fffff

08009740 <powf>:
 8009740:	b508      	push	{r3, lr}
 8009742:	ed2d 8b04 	vpush	{d8-d9}
 8009746:	eeb0 8a60 	vmov.f32	s16, s1
 800974a:	eeb0 9a40 	vmov.f32	s18, s0
 800974e:	f000 f84f 	bl	80097f0 <__ieee754_powf>
 8009752:	eeb4 8a48 	vcmp.f32	s16, s16
 8009756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800975a:	eef0 8a40 	vmov.f32	s17, s0
 800975e:	d63e      	bvs.n	80097de <powf+0x9e>
 8009760:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8009764:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009768:	d112      	bne.n	8009790 <powf+0x50>
 800976a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800976e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009772:	d039      	beq.n	80097e8 <powf+0xa8>
 8009774:	eeb0 0a48 	vmov.f32	s0, s16
 8009778:	f000 fb35 	bl	8009de6 <finitef>
 800977c:	b378      	cbz	r0, 80097de <powf+0x9e>
 800977e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8009782:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009786:	d52a      	bpl.n	80097de <powf+0x9e>
 8009788:	f7fd fa54 	bl	8006c34 <__errno>
 800978c:	2322      	movs	r3, #34	; 0x22
 800978e:	e014      	b.n	80097ba <powf+0x7a>
 8009790:	f000 fb29 	bl	8009de6 <finitef>
 8009794:	b998      	cbnz	r0, 80097be <powf+0x7e>
 8009796:	eeb0 0a49 	vmov.f32	s0, s18
 800979a:	f000 fb24 	bl	8009de6 <finitef>
 800979e:	b170      	cbz	r0, 80097be <powf+0x7e>
 80097a0:	eeb0 0a48 	vmov.f32	s0, s16
 80097a4:	f000 fb1f 	bl	8009de6 <finitef>
 80097a8:	b148      	cbz	r0, 80097be <powf+0x7e>
 80097aa:	eef4 8a68 	vcmp.f32	s17, s17
 80097ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097b2:	d7e9      	bvc.n	8009788 <powf+0x48>
 80097b4:	f7fd fa3e 	bl	8006c34 <__errno>
 80097b8:	2321      	movs	r3, #33	; 0x21
 80097ba:	6003      	str	r3, [r0, #0]
 80097bc:	e00f      	b.n	80097de <powf+0x9e>
 80097be:	eef5 8a40 	vcmp.f32	s17, #0.0
 80097c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097c6:	d10a      	bne.n	80097de <powf+0x9e>
 80097c8:	eeb0 0a49 	vmov.f32	s0, s18
 80097cc:	f000 fb0b 	bl	8009de6 <finitef>
 80097d0:	b128      	cbz	r0, 80097de <powf+0x9e>
 80097d2:	eeb0 0a48 	vmov.f32	s0, s16
 80097d6:	f000 fb06 	bl	8009de6 <finitef>
 80097da:	2800      	cmp	r0, #0
 80097dc:	d1d4      	bne.n	8009788 <powf+0x48>
 80097de:	eeb0 0a68 	vmov.f32	s0, s17
 80097e2:	ecbd 8b04 	vpop	{d8-d9}
 80097e6:	bd08      	pop	{r3, pc}
 80097e8:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 80097ec:	e7f7      	b.n	80097de <powf+0x9e>
	...

080097f0 <__ieee754_powf>:
 80097f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097f4:	ee10 4a90 	vmov	r4, s1
 80097f8:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 80097fc:	ed2d 8b02 	vpush	{d8}
 8009800:	ee10 6a10 	vmov	r6, s0
 8009804:	eeb0 8a40 	vmov.f32	s16, s0
 8009808:	eef0 8a60 	vmov.f32	s17, s1
 800980c:	d10c      	bne.n	8009828 <__ieee754_powf+0x38>
 800980e:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 8009812:	0076      	lsls	r6, r6, #1
 8009814:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 8009818:	f240 8296 	bls.w	8009d48 <__ieee754_powf+0x558>
 800981c:	ee38 0a28 	vadd.f32	s0, s16, s17
 8009820:	ecbd 8b02 	vpop	{d8}
 8009824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009828:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800982c:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8009830:	dcf4      	bgt.n	800981c <__ieee754_powf+0x2c>
 8009832:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 8009836:	dd08      	ble.n	800984a <__ieee754_powf+0x5a>
 8009838:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 800983c:	d1ee      	bne.n	800981c <__ieee754_powf+0x2c>
 800983e:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 8009842:	0064      	lsls	r4, r4, #1
 8009844:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 8009848:	e7e6      	b.n	8009818 <__ieee754_powf+0x28>
 800984a:	2e00      	cmp	r6, #0
 800984c:	da20      	bge.n	8009890 <__ieee754_powf+0xa0>
 800984e:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 8009852:	da2d      	bge.n	80098b0 <__ieee754_powf+0xc0>
 8009854:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8009858:	f2c0 827f 	blt.w	8009d5a <__ieee754_powf+0x56a>
 800985c:	ea4f 53e8 	mov.w	r3, r8, asr #23
 8009860:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8009864:	fa48 f703 	asr.w	r7, r8, r3
 8009868:	fa07 f303 	lsl.w	r3, r7, r3
 800986c:	4543      	cmp	r3, r8
 800986e:	f040 8274 	bne.w	8009d5a <__ieee754_powf+0x56a>
 8009872:	f007 0701 	and.w	r7, r7, #1
 8009876:	f1c7 0702 	rsb	r7, r7, #2
 800987a:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800987e:	d11f      	bne.n	80098c0 <__ieee754_powf+0xd0>
 8009880:	2c00      	cmp	r4, #0
 8009882:	f280 8267 	bge.w	8009d54 <__ieee754_powf+0x564>
 8009886:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800988a:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800988e:	e7c7      	b.n	8009820 <__ieee754_powf+0x30>
 8009890:	2700      	movs	r7, #0
 8009892:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 8009896:	d1f0      	bne.n	800987a <__ieee754_powf+0x8a>
 8009898:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 800989c:	f000 8254 	beq.w	8009d48 <__ieee754_powf+0x558>
 80098a0:	dd08      	ble.n	80098b4 <__ieee754_powf+0xc4>
 80098a2:	ed9f 0ac2 	vldr	s0, [pc, #776]	; 8009bac <__ieee754_powf+0x3bc>
 80098a6:	2c00      	cmp	r4, #0
 80098a8:	bfa8      	it	ge
 80098aa:	eeb0 0a68 	vmovge.f32	s0, s17
 80098ae:	e7b7      	b.n	8009820 <__ieee754_powf+0x30>
 80098b0:	2702      	movs	r7, #2
 80098b2:	e7ee      	b.n	8009892 <__ieee754_powf+0xa2>
 80098b4:	2c00      	cmp	r4, #0
 80098b6:	f280 824a 	bge.w	8009d4e <__ieee754_powf+0x55e>
 80098ba:	eeb1 0a68 	vneg.f32	s0, s17
 80098be:	e7af      	b.n	8009820 <__ieee754_powf+0x30>
 80098c0:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 80098c4:	d102      	bne.n	80098cc <__ieee754_powf+0xdc>
 80098c6:	ee28 0a08 	vmul.f32	s0, s16, s16
 80098ca:	e7a9      	b.n	8009820 <__ieee754_powf+0x30>
 80098cc:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 80098d0:	eeb0 0a48 	vmov.f32	s0, s16
 80098d4:	d107      	bne.n	80098e6 <__ieee754_powf+0xf6>
 80098d6:	2e00      	cmp	r6, #0
 80098d8:	db05      	blt.n	80098e6 <__ieee754_powf+0xf6>
 80098da:	ecbd 8b02 	vpop	{d8}
 80098de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80098e2:	f000 ba53 	b.w	8009d8c <__ieee754_sqrtf>
 80098e6:	f000 fa77 	bl	8009dd8 <fabsf>
 80098ea:	b125      	cbz	r5, 80098f6 <__ieee754_powf+0x106>
 80098ec:	f026 4340 	bic.w	r3, r6, #3221225472	; 0xc0000000
 80098f0:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 80098f4:	d116      	bne.n	8009924 <__ieee754_powf+0x134>
 80098f6:	2c00      	cmp	r4, #0
 80098f8:	bfbc      	itt	lt
 80098fa:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 80098fe:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8009902:	2e00      	cmp	r6, #0
 8009904:	da8c      	bge.n	8009820 <__ieee754_powf+0x30>
 8009906:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 800990a:	ea55 0307 	orrs.w	r3, r5, r7
 800990e:	d104      	bne.n	800991a <__ieee754_powf+0x12a>
 8009910:	ee70 7a40 	vsub.f32	s15, s0, s0
 8009914:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8009918:	e782      	b.n	8009820 <__ieee754_powf+0x30>
 800991a:	2f01      	cmp	r7, #1
 800991c:	d180      	bne.n	8009820 <__ieee754_powf+0x30>
 800991e:	eeb1 0a40 	vneg.f32	s0, s0
 8009922:	e77d      	b.n	8009820 <__ieee754_powf+0x30>
 8009924:	0ff0      	lsrs	r0, r6, #31
 8009926:	3801      	subs	r0, #1
 8009928:	ea57 0300 	orrs.w	r3, r7, r0
 800992c:	d104      	bne.n	8009938 <__ieee754_powf+0x148>
 800992e:	ee38 8a48 	vsub.f32	s16, s16, s16
 8009932:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8009936:	e773      	b.n	8009820 <__ieee754_powf+0x30>
 8009938:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 800993c:	dd74      	ble.n	8009a28 <__ieee754_powf+0x238>
 800993e:	4b9c      	ldr	r3, [pc, #624]	; (8009bb0 <__ieee754_powf+0x3c0>)
 8009940:	429d      	cmp	r5, r3
 8009942:	dc08      	bgt.n	8009956 <__ieee754_powf+0x166>
 8009944:	2c00      	cmp	r4, #0
 8009946:	da0b      	bge.n	8009960 <__ieee754_powf+0x170>
 8009948:	2000      	movs	r0, #0
 800994a:	ecbd 8b02 	vpop	{d8}
 800994e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009952:	f000 ba3b 	b.w	8009dcc <__math_oflowf>
 8009956:	4b97      	ldr	r3, [pc, #604]	; (8009bb4 <__ieee754_powf+0x3c4>)
 8009958:	429d      	cmp	r5, r3
 800995a:	dd08      	ble.n	800996e <__ieee754_powf+0x17e>
 800995c:	2c00      	cmp	r4, #0
 800995e:	dcf3      	bgt.n	8009948 <__ieee754_powf+0x158>
 8009960:	2000      	movs	r0, #0
 8009962:	ecbd 8b02 	vpop	{d8}
 8009966:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800996a:	f000 ba29 	b.w	8009dc0 <__math_uflowf>
 800996e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8009972:	ee30 0a67 	vsub.f32	s0, s0, s15
 8009976:	eddf 6a90 	vldr	s13, [pc, #576]	; 8009bb8 <__ieee754_powf+0x3c8>
 800997a:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800997e:	eee0 6a67 	vfms.f32	s13, s0, s15
 8009982:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8009986:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800998a:	ee20 7a00 	vmul.f32	s14, s0, s0
 800998e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009992:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8009bbc <__ieee754_powf+0x3cc>
 8009996:	ee67 7a67 	vnmul.f32	s15, s14, s15
 800999a:	ed9f 7a89 	vldr	s14, [pc, #548]	; 8009bc0 <__ieee754_powf+0x3d0>
 800999e:	eee0 7a07 	vfma.f32	s15, s0, s14
 80099a2:	ed9f 7a88 	vldr	s14, [pc, #544]	; 8009bc4 <__ieee754_powf+0x3d4>
 80099a6:	eef0 6a67 	vmov.f32	s13, s15
 80099aa:	eee0 6a07 	vfma.f32	s13, s0, s14
 80099ae:	ee16 3a90 	vmov	r3, s13
 80099b2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80099b6:	f023 030f 	bic.w	r3, r3, #15
 80099ba:	ee00 3a90 	vmov	s1, r3
 80099be:	eee0 0a47 	vfms.f32	s1, s0, s14
 80099c2:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80099c6:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 80099ca:	f024 040f 	bic.w	r4, r4, #15
 80099ce:	ee07 4a10 	vmov	s14, r4
 80099d2:	ee67 0aa8 	vmul.f32	s1, s15, s17
 80099d6:	ee38 7ac7 	vsub.f32	s14, s17, s14
 80099da:	ee07 3a90 	vmov	s15, r3
 80099de:	eee7 0a27 	vfma.f32	s1, s14, s15
 80099e2:	3f01      	subs	r7, #1
 80099e4:	ea57 0200 	orrs.w	r2, r7, r0
 80099e8:	ee07 4a10 	vmov	s14, r4
 80099ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80099f0:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 80099f4:	ee30 7aa7 	vadd.f32	s14, s1, s15
 80099f8:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 80099fc:	ee17 4a10 	vmov	r4, s14
 8009a00:	bf08      	it	eq
 8009a02:	eeb0 8a40 	vmoveq.f32	s16, s0
 8009a06:	2c00      	cmp	r4, #0
 8009a08:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8009a0c:	f340 817e 	ble.w	8009d0c <__ieee754_powf+0x51c>
 8009a10:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8009a14:	f340 80f8 	ble.w	8009c08 <__ieee754_powf+0x418>
 8009a18:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8009a1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a20:	bf4c      	ite	mi
 8009a22:	2001      	movmi	r0, #1
 8009a24:	2000      	movpl	r0, #0
 8009a26:	e790      	b.n	800994a <__ieee754_powf+0x15a>
 8009a28:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 8009a2c:	bf01      	itttt	eq
 8009a2e:	eddf 7a66 	vldreq	s15, [pc, #408]	; 8009bc8 <__ieee754_powf+0x3d8>
 8009a32:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8009a36:	f06f 0217 	mvneq.w	r2, #23
 8009a3a:	ee17 5a90 	vmoveq	r5, s15
 8009a3e:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8009a42:	bf18      	it	ne
 8009a44:	2200      	movne	r2, #0
 8009a46:	3b7f      	subs	r3, #127	; 0x7f
 8009a48:	4413      	add	r3, r2
 8009a4a:	4a60      	ldr	r2, [pc, #384]	; (8009bcc <__ieee754_powf+0x3dc>)
 8009a4c:	f3c5 0516 	ubfx	r5, r5, #0, #23
 8009a50:	4295      	cmp	r5, r2
 8009a52:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 8009a56:	dd06      	ble.n	8009a66 <__ieee754_powf+0x276>
 8009a58:	4a5d      	ldr	r2, [pc, #372]	; (8009bd0 <__ieee754_powf+0x3e0>)
 8009a5a:	4295      	cmp	r5, r2
 8009a5c:	f340 80a4 	ble.w	8009ba8 <__ieee754_powf+0x3b8>
 8009a60:	3301      	adds	r3, #1
 8009a62:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8009a66:	2500      	movs	r5, #0
 8009a68:	4a5a      	ldr	r2, [pc, #360]	; (8009bd4 <__ieee754_powf+0x3e4>)
 8009a6a:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 8009a6e:	ee07 1a90 	vmov	s15, r1
 8009a72:	ed92 7a00 	vldr	s14, [r2]
 8009a76:	4a58      	ldr	r2, [pc, #352]	; (8009bd8 <__ieee754_powf+0x3e8>)
 8009a78:	ee37 6a27 	vadd.f32	s12, s14, s15
 8009a7c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8009a80:	eec5 6a86 	vdiv.f32	s13, s11, s12
 8009a84:	1049      	asrs	r1, r1, #1
 8009a86:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8009a8a:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8009a8e:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 8009a92:	ee37 5ac7 	vsub.f32	s10, s15, s14
 8009a96:	ee06 1a10 	vmov	s12, r1
 8009a9a:	ee65 4a26 	vmul.f32	s9, s10, s13
 8009a9e:	ee36 7a47 	vsub.f32	s14, s12, s14
 8009aa2:	ee14 6a90 	vmov	r6, s9
 8009aa6:	4016      	ands	r6, r2
 8009aa8:	ee05 6a90 	vmov	s11, r6
 8009aac:	eea5 5ac6 	vfms.f32	s10, s11, s12
 8009ab0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009ab4:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8009bdc <__ieee754_powf+0x3ec>
 8009ab8:	eea5 5ae7 	vfms.f32	s10, s11, s15
 8009abc:	ee64 7aa4 	vmul.f32	s15, s9, s9
 8009ac0:	ee25 6a26 	vmul.f32	s12, s10, s13
 8009ac4:	eddf 6a46 	vldr	s13, [pc, #280]	; 8009be0 <__ieee754_powf+0x3f0>
 8009ac8:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8009acc:	eddf 6a45 	vldr	s13, [pc, #276]	; 8009be4 <__ieee754_powf+0x3f4>
 8009ad0:	eee7 6a27 	vfma.f32	s13, s14, s15
 8009ad4:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8009bb8 <__ieee754_powf+0x3c8>
 8009ad8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009adc:	eddf 6a42 	vldr	s13, [pc, #264]	; 8009be8 <__ieee754_powf+0x3f8>
 8009ae0:	eee7 6a27 	vfma.f32	s13, s14, s15
 8009ae4:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8009bec <__ieee754_powf+0x3fc>
 8009ae8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009aec:	ee74 6aa5 	vadd.f32	s13, s9, s11
 8009af0:	ee27 5aa7 	vmul.f32	s10, s15, s15
 8009af4:	ee66 6a86 	vmul.f32	s13, s13, s12
 8009af8:	eee5 6a07 	vfma.f32	s13, s10, s14
 8009afc:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 8009b00:	eef0 7a45 	vmov.f32	s15, s10
 8009b04:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8009b08:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b0c:	ee17 1a90 	vmov	r1, s15
 8009b10:	4011      	ands	r1, r2
 8009b12:	ee07 1a90 	vmov	s15, r1
 8009b16:	ee37 7ac5 	vsub.f32	s14, s15, s10
 8009b1a:	eea5 7ae5 	vfms.f32	s14, s11, s11
 8009b1e:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8009b22:	ee27 7a24 	vmul.f32	s14, s14, s9
 8009b26:	eea6 7a27 	vfma.f32	s14, s12, s15
 8009b2a:	eeb0 6a47 	vmov.f32	s12, s14
 8009b2e:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8009b32:	ee16 1a10 	vmov	r1, s12
 8009b36:	4011      	ands	r1, r2
 8009b38:	ee06 1a90 	vmov	s13, r1
 8009b3c:	eee5 6ae7 	vfms.f32	s13, s11, s15
 8009b40:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8009bf0 <__ieee754_powf+0x400>
 8009b44:	eddf 5a2b 	vldr	s11, [pc, #172]	; 8009bf4 <__ieee754_powf+0x404>
 8009b48:	ee37 7a66 	vsub.f32	s14, s14, s13
 8009b4c:	ee06 1a10 	vmov	s12, r1
 8009b50:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009b54:	eddf 7a28 	vldr	s15, [pc, #160]	; 8009bf8 <__ieee754_powf+0x408>
 8009b58:	4928      	ldr	r1, [pc, #160]	; (8009bfc <__ieee754_powf+0x40c>)
 8009b5a:	eea6 7a27 	vfma.f32	s14, s12, s15
 8009b5e:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8009b62:	edd1 7a00 	vldr	s15, [r1]
 8009b66:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009b6a:	ee07 3a90 	vmov	s15, r3
 8009b6e:	4b24      	ldr	r3, [pc, #144]	; (8009c00 <__ieee754_powf+0x410>)
 8009b70:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8009b74:	eef0 7a47 	vmov.f32	s15, s14
 8009b78:	eee6 7a25 	vfma.f32	s15, s12, s11
 8009b7c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8009b80:	edd5 0a00 	vldr	s1, [r5]
 8009b84:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8009b88:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b8c:	ee17 3a90 	vmov	r3, s15
 8009b90:	4013      	ands	r3, r2
 8009b92:	ee07 3a90 	vmov	s15, r3
 8009b96:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8009b9a:	ee76 6ae0 	vsub.f32	s13, s13, s1
 8009b9e:	eee6 6a65 	vfms.f32	s13, s12, s11
 8009ba2:	ee77 7a66 	vsub.f32	s15, s14, s13
 8009ba6:	e70e      	b.n	80099c6 <__ieee754_powf+0x1d6>
 8009ba8:	2501      	movs	r5, #1
 8009baa:	e75d      	b.n	8009a68 <__ieee754_powf+0x278>
 8009bac:	00000000 	.word	0x00000000
 8009bb0:	3f7ffff3 	.word	0x3f7ffff3
 8009bb4:	3f800007 	.word	0x3f800007
 8009bb8:	3eaaaaab 	.word	0x3eaaaaab
 8009bbc:	3fb8aa3b 	.word	0x3fb8aa3b
 8009bc0:	36eca570 	.word	0x36eca570
 8009bc4:	3fb8aa00 	.word	0x3fb8aa00
 8009bc8:	4b800000 	.word	0x4b800000
 8009bcc:	001cc471 	.word	0x001cc471
 8009bd0:	005db3d6 	.word	0x005db3d6
 8009bd4:	0800a34c 	.word	0x0800a34c
 8009bd8:	fffff000 	.word	0xfffff000
 8009bdc:	3e6c3255 	.word	0x3e6c3255
 8009be0:	3e53f142 	.word	0x3e53f142
 8009be4:	3e8ba305 	.word	0x3e8ba305
 8009be8:	3edb6db7 	.word	0x3edb6db7
 8009bec:	3f19999a 	.word	0x3f19999a
 8009bf0:	3f76384f 	.word	0x3f76384f
 8009bf4:	3f763800 	.word	0x3f763800
 8009bf8:	369dc3a0 	.word	0x369dc3a0
 8009bfc:	0800a35c 	.word	0x0800a35c
 8009c00:	0800a354 	.word	0x0800a354
 8009c04:	3338aa3c 	.word	0x3338aa3c
 8009c08:	f040 8095 	bne.w	8009d36 <__ieee754_powf+0x546>
 8009c0c:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8009c04 <__ieee754_powf+0x414>
 8009c10:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009c14:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8009c18:	eef4 6ac7 	vcmpe.f32	s13, s14
 8009c1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c20:	f73f aefa 	bgt.w	8009a18 <__ieee754_powf+0x228>
 8009c24:	15db      	asrs	r3, r3, #23
 8009c26:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 8009c2a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8009c2e:	4103      	asrs	r3, r0
 8009c30:	4423      	add	r3, r4
 8009c32:	494b      	ldr	r1, [pc, #300]	; (8009d60 <__ieee754_powf+0x570>)
 8009c34:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8009c38:	3a7f      	subs	r2, #127	; 0x7f
 8009c3a:	4111      	asrs	r1, r2
 8009c3c:	ea23 0101 	bic.w	r1, r3, r1
 8009c40:	ee07 1a10 	vmov	s14, r1
 8009c44:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8009c48:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8009c4c:	f1c2 0217 	rsb	r2, r2, #23
 8009c50:	4110      	asrs	r0, r2
 8009c52:	2c00      	cmp	r4, #0
 8009c54:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009c58:	bfb8      	it	lt
 8009c5a:	4240      	neglt	r0, r0
 8009c5c:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8009c60:	ed9f 0a40 	vldr	s0, [pc, #256]	; 8009d64 <__ieee754_powf+0x574>
 8009c64:	eddf 6a40 	vldr	s13, [pc, #256]	; 8009d68 <__ieee754_powf+0x578>
 8009c68:	ee17 3a10 	vmov	r3, s14
 8009c6c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8009c70:	f023 030f 	bic.w	r3, r3, #15
 8009c74:	ee07 3a10 	vmov	s14, r3
 8009c78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009c7c:	ee27 0a00 	vmul.f32	s0, s14, s0
 8009c80:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8009c84:	eddf 7a39 	vldr	s15, [pc, #228]	; 8009d6c <__ieee754_powf+0x57c>
 8009c88:	eea0 0aa7 	vfma.f32	s0, s1, s15
 8009c8c:	eef0 7a40 	vmov.f32	s15, s0
 8009c90:	eee7 7a26 	vfma.f32	s15, s14, s13
 8009c94:	eeb0 6a67 	vmov.f32	s12, s15
 8009c98:	eea7 6a66 	vfms.f32	s12, s14, s13
 8009c9c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8009ca0:	ee30 0a46 	vsub.f32	s0, s0, s12
 8009ca4:	eddf 6a32 	vldr	s13, [pc, #200]	; 8009d70 <__ieee754_powf+0x580>
 8009ca8:	ed9f 6a32 	vldr	s12, [pc, #200]	; 8009d74 <__ieee754_powf+0x584>
 8009cac:	eee7 6a06 	vfma.f32	s13, s14, s12
 8009cb0:	ed9f 6a31 	vldr	s12, [pc, #196]	; 8009d78 <__ieee754_powf+0x588>
 8009cb4:	eea6 6a87 	vfma.f32	s12, s13, s14
 8009cb8:	eddf 6a30 	vldr	s13, [pc, #192]	; 8009d7c <__ieee754_powf+0x58c>
 8009cbc:	eee6 6a07 	vfma.f32	s13, s12, s14
 8009cc0:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 8009d80 <__ieee754_powf+0x590>
 8009cc4:	eea6 6a87 	vfma.f32	s12, s13, s14
 8009cc8:	eef0 6a67 	vmov.f32	s13, s15
 8009ccc:	eee6 6a47 	vfms.f32	s13, s12, s14
 8009cd0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009cd4:	ee27 6aa6 	vmul.f32	s12, s15, s13
 8009cd8:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8009cdc:	eea7 0a80 	vfma.f32	s0, s15, s0
 8009ce0:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8009ce4:	ee37 0a40 	vsub.f32	s0, s14, s0
 8009ce8:	ee70 7a67 	vsub.f32	s15, s0, s15
 8009cec:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8009cf0:	ee30 0a67 	vsub.f32	s0, s0, s15
 8009cf4:	ee10 3a10 	vmov	r3, s0
 8009cf8:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8009cfc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009d00:	da1f      	bge.n	8009d42 <__ieee754_powf+0x552>
 8009d02:	f000 f87d 	bl	8009e00 <scalbnf>
 8009d06:	ee20 0a08 	vmul.f32	s0, s0, s16
 8009d0a:	e589      	b.n	8009820 <__ieee754_powf+0x30>
 8009d0c:	4a1d      	ldr	r2, [pc, #116]	; (8009d84 <__ieee754_powf+0x594>)
 8009d0e:	4293      	cmp	r3, r2
 8009d10:	dd07      	ble.n	8009d22 <__ieee754_powf+0x532>
 8009d12:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8009d16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d1a:	bf4c      	ite	mi
 8009d1c:	2001      	movmi	r0, #1
 8009d1e:	2000      	movpl	r0, #0
 8009d20:	e61f      	b.n	8009962 <__ieee754_powf+0x172>
 8009d22:	d108      	bne.n	8009d36 <__ieee754_powf+0x546>
 8009d24:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009d28:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8009d2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d30:	f6ff af78 	blt.w	8009c24 <__ieee754_powf+0x434>
 8009d34:	e7ed      	b.n	8009d12 <__ieee754_powf+0x522>
 8009d36:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8009d3a:	f73f af73 	bgt.w	8009c24 <__ieee754_powf+0x434>
 8009d3e:	2000      	movs	r0, #0
 8009d40:	e78c      	b.n	8009c5c <__ieee754_powf+0x46c>
 8009d42:	ee00 3a10 	vmov	s0, r3
 8009d46:	e7de      	b.n	8009d06 <__ieee754_powf+0x516>
 8009d48:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8009d4c:	e568      	b.n	8009820 <__ieee754_powf+0x30>
 8009d4e:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8009d88 <__ieee754_powf+0x598>
 8009d52:	e565      	b.n	8009820 <__ieee754_powf+0x30>
 8009d54:	eeb0 0a48 	vmov.f32	s0, s16
 8009d58:	e562      	b.n	8009820 <__ieee754_powf+0x30>
 8009d5a:	2700      	movs	r7, #0
 8009d5c:	e58d      	b.n	800987a <__ieee754_powf+0x8a>
 8009d5e:	bf00      	nop
 8009d60:	007fffff 	.word	0x007fffff
 8009d64:	35bfbe8c 	.word	0x35bfbe8c
 8009d68:	3f317200 	.word	0x3f317200
 8009d6c:	3f317218 	.word	0x3f317218
 8009d70:	b5ddea0e 	.word	0xb5ddea0e
 8009d74:	3331bb4c 	.word	0x3331bb4c
 8009d78:	388ab355 	.word	0x388ab355
 8009d7c:	bb360b61 	.word	0xbb360b61
 8009d80:	3e2aaaab 	.word	0x3e2aaaab
 8009d84:	43160000 	.word	0x43160000
 8009d88:	00000000 	.word	0x00000000

08009d8c <__ieee754_sqrtf>:
 8009d8c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8009d90:	4770      	bx	lr

08009d92 <with_errnof>:
 8009d92:	b513      	push	{r0, r1, r4, lr}
 8009d94:	4604      	mov	r4, r0
 8009d96:	ed8d 0a01 	vstr	s0, [sp, #4]
 8009d9a:	f7fc ff4b 	bl	8006c34 <__errno>
 8009d9e:	ed9d 0a01 	vldr	s0, [sp, #4]
 8009da2:	6004      	str	r4, [r0, #0]
 8009da4:	b002      	add	sp, #8
 8009da6:	bd10      	pop	{r4, pc}

08009da8 <xflowf>:
 8009da8:	b130      	cbz	r0, 8009db8 <xflowf+0x10>
 8009daa:	eef1 7a40 	vneg.f32	s15, s0
 8009dae:	ee27 0a80 	vmul.f32	s0, s15, s0
 8009db2:	2022      	movs	r0, #34	; 0x22
 8009db4:	f7ff bfed 	b.w	8009d92 <with_errnof>
 8009db8:	eef0 7a40 	vmov.f32	s15, s0
 8009dbc:	e7f7      	b.n	8009dae <xflowf+0x6>
	...

08009dc0 <__math_uflowf>:
 8009dc0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009dc8 <__math_uflowf+0x8>
 8009dc4:	f7ff bff0 	b.w	8009da8 <xflowf>
 8009dc8:	10000000 	.word	0x10000000

08009dcc <__math_oflowf>:
 8009dcc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009dd4 <__math_oflowf+0x8>
 8009dd0:	f7ff bfea 	b.w	8009da8 <xflowf>
 8009dd4:	70000000 	.word	0x70000000

08009dd8 <fabsf>:
 8009dd8:	ee10 3a10 	vmov	r3, s0
 8009ddc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009de0:	ee00 3a10 	vmov	s0, r3
 8009de4:	4770      	bx	lr

08009de6 <finitef>:
 8009de6:	b082      	sub	sp, #8
 8009de8:	ed8d 0a01 	vstr	s0, [sp, #4]
 8009dec:	9801      	ldr	r0, [sp, #4]
 8009dee:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8009df2:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8009df6:	bfac      	ite	ge
 8009df8:	2000      	movge	r0, #0
 8009dfa:	2001      	movlt	r0, #1
 8009dfc:	b002      	add	sp, #8
 8009dfe:	4770      	bx	lr

08009e00 <scalbnf>:
 8009e00:	ee10 3a10 	vmov	r3, s0
 8009e04:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8009e08:	d025      	beq.n	8009e56 <scalbnf+0x56>
 8009e0a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8009e0e:	d302      	bcc.n	8009e16 <scalbnf+0x16>
 8009e10:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009e14:	4770      	bx	lr
 8009e16:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8009e1a:	d122      	bne.n	8009e62 <scalbnf+0x62>
 8009e1c:	4b2a      	ldr	r3, [pc, #168]	; (8009ec8 <scalbnf+0xc8>)
 8009e1e:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8009ecc <scalbnf+0xcc>
 8009e22:	4298      	cmp	r0, r3
 8009e24:	ee20 0a27 	vmul.f32	s0, s0, s15
 8009e28:	db16      	blt.n	8009e58 <scalbnf+0x58>
 8009e2a:	ee10 3a10 	vmov	r3, s0
 8009e2e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8009e32:	3a19      	subs	r2, #25
 8009e34:	4402      	add	r2, r0
 8009e36:	2afe      	cmp	r2, #254	; 0xfe
 8009e38:	dd15      	ble.n	8009e66 <scalbnf+0x66>
 8009e3a:	ee10 3a10 	vmov	r3, s0
 8009e3e:	eddf 7a24 	vldr	s15, [pc, #144]	; 8009ed0 <scalbnf+0xd0>
 8009e42:	eddf 6a24 	vldr	s13, [pc, #144]	; 8009ed4 <scalbnf+0xd4>
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	eeb0 7a67 	vmov.f32	s14, s15
 8009e4c:	bfb8      	it	lt
 8009e4e:	eef0 7a66 	vmovlt.f32	s15, s13
 8009e52:	ee27 0a27 	vmul.f32	s0, s14, s15
 8009e56:	4770      	bx	lr
 8009e58:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8009ed8 <scalbnf+0xd8>
 8009e5c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8009e60:	4770      	bx	lr
 8009e62:	0dd2      	lsrs	r2, r2, #23
 8009e64:	e7e6      	b.n	8009e34 <scalbnf+0x34>
 8009e66:	2a00      	cmp	r2, #0
 8009e68:	dd06      	ble.n	8009e78 <scalbnf+0x78>
 8009e6a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009e6e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8009e72:	ee00 3a10 	vmov	s0, r3
 8009e76:	4770      	bx	lr
 8009e78:	f112 0f16 	cmn.w	r2, #22
 8009e7c:	da1a      	bge.n	8009eb4 <scalbnf+0xb4>
 8009e7e:	f24c 3350 	movw	r3, #50000	; 0xc350
 8009e82:	4298      	cmp	r0, r3
 8009e84:	ee10 3a10 	vmov	r3, s0
 8009e88:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009e8c:	dd0a      	ble.n	8009ea4 <scalbnf+0xa4>
 8009e8e:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8009ed0 <scalbnf+0xd0>
 8009e92:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8009ed4 <scalbnf+0xd4>
 8009e96:	eef0 7a40 	vmov.f32	s15, s0
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	bf18      	it	ne
 8009e9e:	eeb0 0a47 	vmovne.f32	s0, s14
 8009ea2:	e7db      	b.n	8009e5c <scalbnf+0x5c>
 8009ea4:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8009ed8 <scalbnf+0xd8>
 8009ea8:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8009edc <scalbnf+0xdc>
 8009eac:	eef0 7a40 	vmov.f32	s15, s0
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	e7f3      	b.n	8009e9c <scalbnf+0x9c>
 8009eb4:	3219      	adds	r2, #25
 8009eb6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009eba:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8009ebe:	eddf 7a08 	vldr	s15, [pc, #32]	; 8009ee0 <scalbnf+0xe0>
 8009ec2:	ee07 3a10 	vmov	s14, r3
 8009ec6:	e7c4      	b.n	8009e52 <scalbnf+0x52>
 8009ec8:	ffff3cb0 	.word	0xffff3cb0
 8009ecc:	4c000000 	.word	0x4c000000
 8009ed0:	7149f2ca 	.word	0x7149f2ca
 8009ed4:	f149f2ca 	.word	0xf149f2ca
 8009ed8:	0da24260 	.word	0x0da24260
 8009edc:	8da24260 	.word	0x8da24260
 8009ee0:	33000000 	.word	0x33000000

08009ee4 <_init>:
 8009ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ee6:	bf00      	nop
 8009ee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009eea:	bc08      	pop	{r3}
 8009eec:	469e      	mov	lr, r3
 8009eee:	4770      	bx	lr

08009ef0 <_fini>:
 8009ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ef2:	bf00      	nop
 8009ef4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ef6:	bc08      	pop	{r3}
 8009ef8:	469e      	mov	lr, r3
 8009efa:	4770      	bx	lr
