
STM32_Mic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006794  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  0800691c  0800691c  0001691c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080069a0  080069a0  00020470  2**0
                  CONTENTS
  4 .ARM          00000008  080069a0  080069a0  000169a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080069a8  080069a8  00020470  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080069a8  080069a8  000169a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080069ac  080069ac  000169ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000470  20000000  080069b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020470  2**0
                  CONTENTS
 10 .bss          00000494  20000470  20000470  00020470  2**2
                  ALLOC
 11 ._user_heap_stack 00003004  20000904  20000904  00020470  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020470  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cfbc  00000000  00000000  000204a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002590  00000000  00000000  0002d45c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009e8  00000000  00000000  0002f9f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000008d0  00000000  00000000  000303d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000213e2  00000000  00000000  00030ca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f1da  00000000  00000000  0005208a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c42f5  00000000  00000000  00061264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000cf  00000000  00000000  00125559  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000027bc  00000000  00000000  00125628  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000470 	.word	0x20000470
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006904 	.word	0x08006904

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000474 	.word	0x20000474
 80001c4:	08006904 	.word	0x08006904

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80004d0:	4b06      	ldr	r3, [pc, #24]	; (80004ec <MX_CRC_Init+0x20>)
 80004d2:	4a07      	ldr	r2, [pc, #28]	; (80004f0 <MX_CRC_Init+0x24>)
 80004d4:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80004d6:	4805      	ldr	r0, [pc, #20]	; (80004ec <MX_CRC_Init+0x20>)
 80004d8:	f000 fd77 	bl	8000fca <HAL_CRC_Init>
 80004dc:	4603      	mov	r3, r0
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d001      	beq.n	80004e6 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80004e2:	f000 fa99 	bl	8000a18 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80004e6:	bf00      	nop
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	bf00      	nop
 80004ec:	20000490 	.word	0x20000490
 80004f0:	40023000 	.word	0x40023000

080004f4 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80004f4:	b480      	push	{r7}
 80004f6:	b085      	sub	sp, #20
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	4a0b      	ldr	r2, [pc, #44]	; (8000530 <HAL_CRC_MspInit+0x3c>)
 8000502:	4293      	cmp	r3, r2
 8000504:	d10d      	bne.n	8000522 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000506:	2300      	movs	r3, #0
 8000508:	60fb      	str	r3, [r7, #12]
 800050a:	4b0a      	ldr	r3, [pc, #40]	; (8000534 <HAL_CRC_MspInit+0x40>)
 800050c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800050e:	4a09      	ldr	r2, [pc, #36]	; (8000534 <HAL_CRC_MspInit+0x40>)
 8000510:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000514:	6313      	str	r3, [r2, #48]	; 0x30
 8000516:	4b07      	ldr	r3, [pc, #28]	; (8000534 <HAL_CRC_MspInit+0x40>)
 8000518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800051e:	60fb      	str	r3, [r7, #12]
 8000520:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000522:	bf00      	nop
 8000524:	3714      	adds	r7, #20
 8000526:	46bd      	mov	sp, r7
 8000528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop
 8000530:	40023000 	.word	0x40023000
 8000534:	40023800 	.word	0x40023800

08000538 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b082      	sub	sp, #8
 800053c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800053e:	2300      	movs	r3, #0
 8000540:	607b      	str	r3, [r7, #4]
 8000542:	4b0c      	ldr	r3, [pc, #48]	; (8000574 <MX_DMA_Init+0x3c>)
 8000544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000546:	4a0b      	ldr	r2, [pc, #44]	; (8000574 <MX_DMA_Init+0x3c>)
 8000548:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800054c:	6313      	str	r3, [r2, #48]	; 0x30
 800054e:	4b09      	ldr	r3, [pc, #36]	; (8000574 <MX_DMA_Init+0x3c>)
 8000550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000552:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000556:	607b      	str	r3, [r7, #4]
 8000558:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800055a:	2200      	movs	r2, #0
 800055c:	2100      	movs	r1, #0
 800055e:	200e      	movs	r0, #14
 8000560:	f000 fcfd 	bl	8000f5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000564:	200e      	movs	r0, #14
 8000566:	f000 fd16 	bl	8000f96 <HAL_NVIC_EnableIRQ>

}
 800056a:	bf00      	nop
 800056c:	3708      	adds	r7, #8
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	40023800 	.word	0x40023800

08000578 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000578:	b480      	push	{r7}
 800057a:	b085      	sub	sp, #20
 800057c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800057e:	2300      	movs	r3, #0
 8000580:	60fb      	str	r3, [r7, #12]
 8000582:	4b1e      	ldr	r3, [pc, #120]	; (80005fc <MX_GPIO_Init+0x84>)
 8000584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000586:	4a1d      	ldr	r2, [pc, #116]	; (80005fc <MX_GPIO_Init+0x84>)
 8000588:	f043 0304 	orr.w	r3, r3, #4
 800058c:	6313      	str	r3, [r2, #48]	; 0x30
 800058e:	4b1b      	ldr	r3, [pc, #108]	; (80005fc <MX_GPIO_Init+0x84>)
 8000590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000592:	f003 0304 	and.w	r3, r3, #4
 8000596:	60fb      	str	r3, [r7, #12]
 8000598:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800059a:	2300      	movs	r3, #0
 800059c:	60bb      	str	r3, [r7, #8]
 800059e:	4b17      	ldr	r3, [pc, #92]	; (80005fc <MX_GPIO_Init+0x84>)
 80005a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a2:	4a16      	ldr	r2, [pc, #88]	; (80005fc <MX_GPIO_Init+0x84>)
 80005a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005a8:	6313      	str	r3, [r2, #48]	; 0x30
 80005aa:	4b14      	ldr	r3, [pc, #80]	; (80005fc <MX_GPIO_Init+0x84>)
 80005ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005b2:	60bb      	str	r3, [r7, #8]
 80005b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b6:	2300      	movs	r3, #0
 80005b8:	607b      	str	r3, [r7, #4]
 80005ba:	4b10      	ldr	r3, [pc, #64]	; (80005fc <MX_GPIO_Init+0x84>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005be:	4a0f      	ldr	r2, [pc, #60]	; (80005fc <MX_GPIO_Init+0x84>)
 80005c0:	f043 0301 	orr.w	r3, r3, #1
 80005c4:	6313      	str	r3, [r2, #48]	; 0x30
 80005c6:	4b0d      	ldr	r3, [pc, #52]	; (80005fc <MX_GPIO_Init+0x84>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ca:	f003 0301 	and.w	r3, r3, #1
 80005ce:	607b      	str	r3, [r7, #4]
 80005d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005d2:	2300      	movs	r3, #0
 80005d4:	603b      	str	r3, [r7, #0]
 80005d6:	4b09      	ldr	r3, [pc, #36]	; (80005fc <MX_GPIO_Init+0x84>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	4a08      	ldr	r2, [pc, #32]	; (80005fc <MX_GPIO_Init+0x84>)
 80005dc:	f043 0302 	orr.w	r3, r3, #2
 80005e0:	6313      	str	r3, [r2, #48]	; 0x30
 80005e2:	4b06      	ldr	r3, [pc, #24]	; (80005fc <MX_GPIO_Init+0x84>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e6:	f003 0302 	and.w	r3, r3, #2
 80005ea:	603b      	str	r3, [r7, #0]
 80005ec:	683b      	ldr	r3, [r7, #0]

}
 80005ee:	bf00      	nop
 80005f0:	3714      	adds	r7, #20
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop
 80005fc:	40023800 	.word	0x40023800

08000600 <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
DMA_HandleTypeDef hdma_spi2_rx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000604:	4b13      	ldr	r3, [pc, #76]	; (8000654 <MX_I2S2_Init+0x54>)
 8000606:	4a14      	ldr	r2, [pc, #80]	; (8000658 <MX_I2S2_Init+0x58>)
 8000608:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 800060a:	4b12      	ldr	r3, [pc, #72]	; (8000654 <MX_I2S2_Init+0x54>)
 800060c:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000610:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_MSB;
 8000612:	4b10      	ldr	r3, [pc, #64]	; (8000654 <MX_I2S2_Init+0x54>)
 8000614:	2210      	movs	r2, #16
 8000616:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B_EXTENDED;
 8000618:	4b0e      	ldr	r3, [pc, #56]	; (8000654 <MX_I2S2_Init+0x54>)
 800061a:	2201      	movs	r2, #1
 800061c:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800061e:	4b0d      	ldr	r3, [pc, #52]	; (8000654 <MX_I2S2_Init+0x54>)
 8000620:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000624:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8000626:	4b0b      	ldr	r3, [pc, #44]	; (8000654 <MX_I2S2_Init+0x54>)
 8000628:	f64b 3280 	movw	r2, #48000	; 0xbb80
 800062c:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 800062e:	4b09      	ldr	r3, [pc, #36]	; (8000654 <MX_I2S2_Init+0x54>)
 8000630:	2200      	movs	r2, #0
 8000632:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000634:	4b07      	ldr	r3, [pc, #28]	; (8000654 <MX_I2S2_Init+0x54>)
 8000636:	2200      	movs	r2, #0
 8000638:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800063a:	4b06      	ldr	r3, [pc, #24]	; (8000654 <MX_I2S2_Init+0x54>)
 800063c:	2200      	movs	r2, #0
 800063e:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000640:	4804      	ldr	r0, [pc, #16]	; (8000654 <MX_I2S2_Init+0x54>)
 8000642:	f001 fa7d 	bl	8001b40 <HAL_I2S_Init>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <MX_I2S2_Init+0x50>
  {
    Error_Handler();
 800064c:	f000 f9e4 	bl	8000a18 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000650:	bf00      	nop
 8000652:	bd80      	pop	{r7, pc}
 8000654:	20000498 	.word	0x20000498
 8000658:	40003800 	.word	0x40003800

0800065c <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b08e      	sub	sp, #56	; 0x38
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000664:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
 800066e:	609a      	str	r2, [r3, #8]
 8000670:	60da      	str	r2, [r3, #12]
 8000672:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000674:	f107 0314 	add.w	r3, r7, #20
 8000678:	2200      	movs	r2, #0
 800067a:	601a      	str	r2, [r3, #0]
 800067c:	605a      	str	r2, [r3, #4]
 800067e:	609a      	str	r2, [r3, #8]
 8000680:	60da      	str	r2, [r3, #12]
  if(i2sHandle->Instance==SPI2)
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	4a55      	ldr	r2, [pc, #340]	; (80007dc <HAL_I2S_MspInit+0x180>)
 8000688:	4293      	cmp	r3, r2
 800068a:	f040 80a3 	bne.w	80007d4 <HAL_I2S_MspInit+0x178>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800068e:	2301      	movs	r3, #1
 8000690:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000692:	23c0      	movs	r3, #192	; 0xc0
 8000694:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000696:	2302      	movs	r3, #2
 8000698:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800069a:	f107 0314 	add.w	r3, r7, #20
 800069e:	4618      	mov	r0, r3
 80006a0:	f002 fc8e 	bl	8002fc0 <HAL_RCCEx_PeriphCLKConfig>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 80006aa:	f000 f9b5 	bl	8000a18 <Error_Handler>
    }

    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80006ae:	2300      	movs	r3, #0
 80006b0:	613b      	str	r3, [r7, #16]
 80006b2:	4b4b      	ldr	r3, [pc, #300]	; (80007e0 <HAL_I2S_MspInit+0x184>)
 80006b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b6:	4a4a      	ldr	r2, [pc, #296]	; (80007e0 <HAL_I2S_MspInit+0x184>)
 80006b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006bc:	6413      	str	r3, [r2, #64]	; 0x40
 80006be:	4b48      	ldr	r3, [pc, #288]	; (80007e0 <HAL_I2S_MspInit+0x184>)
 80006c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006c6:	613b      	str	r3, [r7, #16]
 80006c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ca:	2300      	movs	r3, #0
 80006cc:	60fb      	str	r3, [r7, #12]
 80006ce:	4b44      	ldr	r3, [pc, #272]	; (80007e0 <HAL_I2S_MspInit+0x184>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d2:	4a43      	ldr	r2, [pc, #268]	; (80007e0 <HAL_I2S_MspInit+0x184>)
 80006d4:	f043 0304 	orr.w	r3, r3, #4
 80006d8:	6313      	str	r3, [r2, #48]	; 0x30
 80006da:	4b41      	ldr	r3, [pc, #260]	; (80007e0 <HAL_I2S_MspInit+0x184>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	f003 0304 	and.w	r3, r3, #4
 80006e2:	60fb      	str	r3, [r7, #12]
 80006e4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006e6:	2300      	movs	r3, #0
 80006e8:	60bb      	str	r3, [r7, #8]
 80006ea:	4b3d      	ldr	r3, [pc, #244]	; (80007e0 <HAL_I2S_MspInit+0x184>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	4a3c      	ldr	r2, [pc, #240]	; (80007e0 <HAL_I2S_MspInit+0x184>)
 80006f0:	f043 0302 	orr.w	r3, r3, #2
 80006f4:	6313      	str	r3, [r2, #48]	; 0x30
 80006f6:	4b3a      	ldr	r3, [pc, #232]	; (80007e0 <HAL_I2S_MspInit+0x184>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	f003 0302 	and.w	r3, r3, #2
 80006fe:	60bb      	str	r3, [r7, #8]
 8000700:	68bb      	ldr	r3, [r7, #8]
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    PC6     ------> I2S2_MCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000702:	2308      	movs	r3, #8
 8000704:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000706:	2302      	movs	r3, #2
 8000708:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070a:	2300      	movs	r3, #0
 800070c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800070e:	2303      	movs	r3, #3
 8000710:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000712:	2305      	movs	r3, #5
 8000714:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000716:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800071a:	4619      	mov	r1, r3
 800071c:	4831      	ldr	r0, [pc, #196]	; (80007e4 <HAL_I2S_MspInit+0x188>)
 800071e:	f001 f873 	bl	8001808 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000722:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000726:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000728:	2302      	movs	r3, #2
 800072a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072c:	2300      	movs	r3, #0
 800072e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000730:	2303      	movs	r3, #3
 8000732:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000734:	2305      	movs	r3, #5
 8000736:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000738:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800073c:	4619      	mov	r1, r3
 800073e:	482a      	ldr	r0, [pc, #168]	; (80007e8 <HAL_I2S_MspInit+0x18c>)
 8000740:	f001 f862 	bl	8001808 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000744:	2340      	movs	r3, #64	; 0x40
 8000746:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000748:	2302      	movs	r3, #2
 800074a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074c:	2300      	movs	r3, #0
 800074e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000750:	2300      	movs	r3, #0
 8000752:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000754:	2305      	movs	r3, #5
 8000756:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000758:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800075c:	4619      	mov	r1, r3
 800075e:	4821      	ldr	r0, [pc, #132]	; (80007e4 <HAL_I2S_MspInit+0x188>)
 8000760:	f001 f852 	bl	8001808 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8000764:	4b21      	ldr	r3, [pc, #132]	; (80007ec <HAL_I2S_MspInit+0x190>)
 8000766:	4a22      	ldr	r2, [pc, #136]	; (80007f0 <HAL_I2S_MspInit+0x194>)
 8000768:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 800076a:	4b20      	ldr	r3, [pc, #128]	; (80007ec <HAL_I2S_MspInit+0x190>)
 800076c:	2200      	movs	r2, #0
 800076e:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000770:	4b1e      	ldr	r3, [pc, #120]	; (80007ec <HAL_I2S_MspInit+0x190>)
 8000772:	2200      	movs	r2, #0
 8000774:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000776:	4b1d      	ldr	r3, [pc, #116]	; (80007ec <HAL_I2S_MspInit+0x190>)
 8000778:	2200      	movs	r2, #0
 800077a:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800077c:	4b1b      	ldr	r3, [pc, #108]	; (80007ec <HAL_I2S_MspInit+0x190>)
 800077e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000782:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000784:	4b19      	ldr	r3, [pc, #100]	; (80007ec <HAL_I2S_MspInit+0x190>)
 8000786:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800078a:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800078c:	4b17      	ldr	r3, [pc, #92]	; (80007ec <HAL_I2S_MspInit+0x190>)
 800078e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000792:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8000794:	4b15      	ldr	r3, [pc, #84]	; (80007ec <HAL_I2S_MspInit+0x190>)
 8000796:	f44f 7280 	mov.w	r2, #256	; 0x100
 800079a:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800079c:	4b13      	ldr	r3, [pc, #76]	; (80007ec <HAL_I2S_MspInit+0x190>)
 800079e:	2200      	movs	r2, #0
 80007a0:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80007a2:	4b12      	ldr	r3, [pc, #72]	; (80007ec <HAL_I2S_MspInit+0x190>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80007a8:	4810      	ldr	r0, [pc, #64]	; (80007ec <HAL_I2S_MspInit+0x190>)
 80007aa:	f000 fc2b 	bl	8001004 <HAL_DMA_Init>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <HAL_I2S_MspInit+0x15c>
    {
      Error_Handler();
 80007b4:	f000 f930 	bl	8000a18 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_spi2_rx);
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	4a0c      	ldr	r2, [pc, #48]	; (80007ec <HAL_I2S_MspInit+0x190>)
 80007bc:	63da      	str	r2, [r3, #60]	; 0x3c
 80007be:	4a0b      	ldr	r2, [pc, #44]	; (80007ec <HAL_I2S_MspInit+0x190>)
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2S2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80007c4:	2200      	movs	r2, #0
 80007c6:	2100      	movs	r1, #0
 80007c8:	2024      	movs	r0, #36	; 0x24
 80007ca:	f000 fbc8 	bl	8000f5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80007ce:	2024      	movs	r0, #36	; 0x24
 80007d0:	f000 fbe1 	bl	8000f96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80007d4:	bf00      	nop
 80007d6:	3738      	adds	r7, #56	; 0x38
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	40003800 	.word	0x40003800
 80007e0:	40023800 	.word	0x40023800
 80007e4:	40020800 	.word	0x40020800
 80007e8:	40020400 	.word	0x40020400
 80007ec:	200004e0 	.word	0x200004e0
 80007f0:	40026058 	.word	0x40026058

080007f4 <fifoWrite>:
uint16_t fifoBuf[256];
uint8_t fifo_w_ptr = 0;
uint8_t fifo_r_ptr = 0;
uint8_t fifo_read_enable = 0;

void fifoWrite(uint16_t data) {
 80007f4:	b480      	push	{r7}
 80007f6:	b083      	sub	sp, #12
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	4603      	mov	r3, r0
 80007fc:	80fb      	strh	r3, [r7, #6]
	fifoBuf[fifo_w_ptr] = data;
 80007fe:	4b09      	ldr	r3, [pc, #36]	; (8000824 <fifoWrite+0x30>)
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	4619      	mov	r1, r3
 8000804:	4a08      	ldr	r2, [pc, #32]	; (8000828 <fifoWrite+0x34>)
 8000806:	88fb      	ldrh	r3, [r7, #6]
 8000808:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
	fifo_w_ptr++;
 800080c:	4b05      	ldr	r3, [pc, #20]	; (8000824 <fifoWrite+0x30>)
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	3301      	adds	r3, #1
 8000812:	b2da      	uxtb	r2, r3
 8000814:	4b03      	ldr	r3, [pc, #12]	; (8000824 <fifoWrite+0x30>)
 8000816:	701a      	strb	r2, [r3, #0]
}
 8000818:	bf00      	nop
 800081a:	370c      	adds	r7, #12
 800081c:	46bd      	mov	sp, r7
 800081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000822:	4770      	bx	lr
 8000824:	20000864 	.word	0x20000864
 8000828:	20000664 	.word	0x20000664

0800082c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000832:	f000 fa47 	bl	8000cc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000836:	f000 f855 	bl	80008e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800083a:	f7ff fe9d 	bl	8000578 <MX_GPIO_Init>
  MX_DMA_Init();
 800083e:	f7ff fe7b 	bl	8000538 <MX_DMA_Init>
  MX_I2S2_Init();
 8000842:	f7ff fedd 	bl	8000600 <MX_I2S2_Init>
  MX_USART2_UART_Init();
 8000846:	f000 f95d 	bl	8000b04 <MX_USART2_UART_Init>
  MX_CRC_Init();
 800084a:	f7ff fe3f 	bl	80004cc <MX_CRC_Init>
  MX_PDM2PCM_Init();
 800084e:	f000 f9d3 	bl	8000bf8 <MX_PDM2PCM_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit(&huart2, (uint8_t *)"I2S Data Demo..\r\n", 18, 0xFFFF);
 8000852:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000856:	2212      	movs	r2, #18
 8000858:	4918      	ldr	r1, [pc, #96]	; (80008bc <main+0x90>)
 800085a:	4819      	ldr	r0, [pc, #100]	; (80008c0 <main+0x94>)
 800085c:	f002 fd3d 	bl	80032da <HAL_UART_Transmit>

  HAL_I2S_Receive_DMA(&hi2s2, &rxBuff[0], 64);
 8000860:	2240      	movs	r2, #64	; 0x40
 8000862:	4918      	ldr	r1, [pc, #96]	; (80008c4 <main+0x98>)
 8000864:	4818      	ldr	r0, [pc, #96]	; (80008c8 <main+0x9c>)
 8000866:	f001 faab 	bl	8001dc0 <HAL_I2S_Receive_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

     if (rxState == 1) {
 800086a:	4b18      	ldr	r3, [pc, #96]	; (80008cc <main+0xa0>)
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	2b01      	cmp	r3, #1
 8000870:	d1fb      	bne.n	800086a <main+0x3e>
    	 PDM_Filter(&rxBuff[0], &midBuff[0], &PDM1_filter_handler);
 8000872:	4a17      	ldr	r2, [pc, #92]	; (80008d0 <main+0xa4>)
 8000874:	4917      	ldr	r1, [pc, #92]	; (80008d4 <main+0xa8>)
 8000876:	4813      	ldr	r0, [pc, #76]	; (80008c4 <main+0x98>)
 8000878:	f005 fbc2 	bl	8006000 <PDM_Filter>
    	 for (uint8_t i  = 0; i  < 64; i++ ) {
 800087c:	2300      	movs	r3, #0
 800087e:	71fb      	strb	r3, [r7, #7]
 8000880:	e009      	b.n	8000896 <main+0x6a>
			fifoWrite(midBuff[i]);
 8000882:	79fb      	ldrb	r3, [r7, #7]
 8000884:	4a13      	ldr	r2, [pc, #76]	; (80008d4 <main+0xa8>)
 8000886:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800088a:	4618      	mov	r0, r3
 800088c:	f7ff ffb2 	bl	80007f4 <fifoWrite>
    	 for (uint8_t i  = 0; i  < 64; i++ ) {
 8000890:	79fb      	ldrb	r3, [r7, #7]
 8000892:	3301      	adds	r3, #1
 8000894:	71fb      	strb	r3, [r7, #7]
 8000896:	79fb      	ldrb	r3, [r7, #7]
 8000898:	2b3f      	cmp	r3, #63	; 0x3f
 800089a:	d9f2      	bls.n	8000882 <main+0x56>
		 }
    	 if (fifo_w_ptr - fifo_r_ptr > 128) {
 800089c:	4b0e      	ldr	r3, [pc, #56]	; (80008d8 <main+0xac>)
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	461a      	mov	r2, r3
 80008a2:	4b0e      	ldr	r3, [pc, #56]	; (80008dc <main+0xb0>)
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	1ad3      	subs	r3, r2, r3
 80008a8:	2b80      	cmp	r3, #128	; 0x80
 80008aa:	dd02      	ble.n	80008b2 <main+0x86>
			fifo_read_enable = 1;
 80008ac:	4b0c      	ldr	r3, [pc, #48]	; (80008e0 <main+0xb4>)
 80008ae:	2201      	movs	r2, #1
 80008b0:	701a      	strb	r2, [r3, #0]
		 }
    	 rxState = 0;
 80008b2:	4b06      	ldr	r3, [pc, #24]	; (80008cc <main+0xa0>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	701a      	strb	r2, [r3, #0]
     if (rxState == 1) {
 80008b8:	e7d7      	b.n	800086a <main+0x3e>
 80008ba:	bf00      	nop
 80008bc:	0800691c 	.word	0x0800691c
 80008c0:	20000868 	.word	0x20000868
 80008c4:	20000540 	.word	0x20000540
 80008c8:	20000498 	.word	0x20000498
 80008cc:	20000661 	.word	0x20000661
 80008d0:	200008ac 	.word	0x200008ac
 80008d4:	20000640 	.word	0x20000640
 80008d8:	20000864 	.word	0x20000864
 80008dc:	20000865 	.word	0x20000865
 80008e0:	20000866 	.word	0x20000866

080008e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b094      	sub	sp, #80	; 0x50
 80008e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ea:	f107 0320 	add.w	r3, r7, #32
 80008ee:	2230      	movs	r2, #48	; 0x30
 80008f0:	2100      	movs	r1, #0
 80008f2:	4618      	mov	r0, r3
 80008f4:	f005 fc08 	bl	8006108 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008f8:	f107 030c 	add.w	r3, r7, #12
 80008fc:	2200      	movs	r2, #0
 80008fe:	601a      	str	r2, [r3, #0]
 8000900:	605a      	str	r2, [r3, #4]
 8000902:	609a      	str	r2, [r3, #8]
 8000904:	60da      	str	r2, [r3, #12]
 8000906:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000908:	2300      	movs	r3, #0
 800090a:	60bb      	str	r3, [r7, #8]
 800090c:	4b28      	ldr	r3, [pc, #160]	; (80009b0 <SystemClock_Config+0xcc>)
 800090e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000910:	4a27      	ldr	r2, [pc, #156]	; (80009b0 <SystemClock_Config+0xcc>)
 8000912:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000916:	6413      	str	r3, [r2, #64]	; 0x40
 8000918:	4b25      	ldr	r3, [pc, #148]	; (80009b0 <SystemClock_Config+0xcc>)
 800091a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800091c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000920:	60bb      	str	r3, [r7, #8]
 8000922:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000924:	2300      	movs	r3, #0
 8000926:	607b      	str	r3, [r7, #4]
 8000928:	4b22      	ldr	r3, [pc, #136]	; (80009b4 <SystemClock_Config+0xd0>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a21      	ldr	r2, [pc, #132]	; (80009b4 <SystemClock_Config+0xd0>)
 800092e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000932:	6013      	str	r3, [r2, #0]
 8000934:	4b1f      	ldr	r3, [pc, #124]	; (80009b4 <SystemClock_Config+0xd0>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800093c:	607b      	str	r3, [r7, #4]
 800093e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000940:	2301      	movs	r3, #1
 8000942:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000944:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000948:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800094a:	2302      	movs	r3, #2
 800094c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800094e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000952:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000954:	2308      	movs	r3, #8
 8000956:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000958:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800095c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800095e:	2302      	movs	r3, #2
 8000960:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000962:	2307      	movs	r3, #7
 8000964:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000966:	f107 0320 	add.w	r3, r7, #32
 800096a:	4618      	mov	r0, r3
 800096c:	f001 fe90 	bl	8002690 <HAL_RCC_OscConfig>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000976:	f000 f84f 	bl	8000a18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800097a:	230f      	movs	r3, #15
 800097c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800097e:	2302      	movs	r3, #2
 8000980:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000982:	2300      	movs	r3, #0
 8000984:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000986:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800098a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800098c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000990:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000992:	f107 030c 	add.w	r3, r7, #12
 8000996:	2105      	movs	r1, #5
 8000998:	4618      	mov	r0, r3
 800099a:	f002 f8f1 	bl	8002b80 <HAL_RCC_ClockConfig>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80009a4:	f000 f838 	bl	8000a18 <Error_Handler>
  }
}
 80009a8:	bf00      	nop
 80009aa:	3750      	adds	r7, #80	; 0x50
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	40023800 	.word	0x40023800
 80009b4:	40007000 	.word	0x40007000

080009b8 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b083      	sub	sp, #12
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
 	txState = 2;
 80009c0:	4b04      	ldr	r3, [pc, #16]	; (80009d4 <HAL_I2S_TxCpltCallback+0x1c>)
 80009c2:	2202      	movs	r2, #2
 80009c4:	701a      	strb	r2, [r3, #0]
}
 80009c6:	bf00      	nop
 80009c8:	370c      	adds	r7, #12
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop
 80009d4:	20000660 	.word	0x20000660

080009d8 <HAL_I2S_RxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80009d8:	b480      	push	{r7}
 80009da:	b083      	sub	sp, #12
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
	rxState = 1;
 80009e0:	4b04      	ldr	r3, [pc, #16]	; (80009f4 <HAL_I2S_RxHalfCpltCallback+0x1c>)
 80009e2:	2201      	movs	r2, #1
 80009e4:	701a      	strb	r2, [r3, #0]
}
 80009e6:	bf00      	nop
 80009e8:	370c      	adds	r7, #12
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop
 80009f4:	20000661 	.word	0x20000661

080009f8 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b083      	sub	sp, #12
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
	rxState = 2;
 8000a00:	4b04      	ldr	r3, [pc, #16]	; (8000a14 <HAL_I2S_RxCpltCallback+0x1c>)
 8000a02:	2202      	movs	r2, #2
 8000a04:	701a      	strb	r2, [r3, #0]
}
 8000a06:	bf00      	nop
 8000a08:	370c      	adds	r7, #12
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	20000661 	.word	0x20000661

08000a18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a1c:	b672      	cpsid	i
}
 8000a1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a20:	e7fe      	b.n	8000a20 <Error_Handler+0x8>
	...

08000a24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	607b      	str	r3, [r7, #4]
 8000a2e:	4b10      	ldr	r3, [pc, #64]	; (8000a70 <HAL_MspInit+0x4c>)
 8000a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a32:	4a0f      	ldr	r2, [pc, #60]	; (8000a70 <HAL_MspInit+0x4c>)
 8000a34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a38:	6453      	str	r3, [r2, #68]	; 0x44
 8000a3a:	4b0d      	ldr	r3, [pc, #52]	; (8000a70 <HAL_MspInit+0x4c>)
 8000a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a42:	607b      	str	r3, [r7, #4]
 8000a44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a46:	2300      	movs	r3, #0
 8000a48:	603b      	str	r3, [r7, #0]
 8000a4a:	4b09      	ldr	r3, [pc, #36]	; (8000a70 <HAL_MspInit+0x4c>)
 8000a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a4e:	4a08      	ldr	r2, [pc, #32]	; (8000a70 <HAL_MspInit+0x4c>)
 8000a50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a54:	6413      	str	r3, [r2, #64]	; 0x40
 8000a56:	4b06      	ldr	r3, [pc, #24]	; (8000a70 <HAL_MspInit+0x4c>)
 8000a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a5e:	603b      	str	r3, [r7, #0]
 8000a60:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a62:	2007      	movs	r0, #7
 8000a64:	f000 fa70 	bl	8000f48 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a68:	bf00      	nop
 8000a6a:	3708      	adds	r7, #8
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	40023800 	.word	0x40023800

08000a74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a78:	e7fe      	b.n	8000a78 <NMI_Handler+0x4>

08000a7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a7a:	b480      	push	{r7}
 8000a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a7e:	e7fe      	b.n	8000a7e <HardFault_Handler+0x4>

08000a80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a84:	e7fe      	b.n	8000a84 <MemManage_Handler+0x4>

08000a86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a86:	b480      	push	{r7}
 8000a88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a8a:	e7fe      	b.n	8000a8a <BusFault_Handler+0x4>

08000a8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a90:	e7fe      	b.n	8000a90 <UsageFault_Handler+0x4>

08000a92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a92:	b480      	push	{r7}
 8000a94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a96:	bf00      	nop
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr

08000aa0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aa4:	bf00      	nop
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr

08000aae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aae:	b480      	push	{r7}
 8000ab0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ab2:	bf00      	nop
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr

08000abc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ac0:	f000 f952 	bl	8000d68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ac4:	bf00      	nop
 8000ac6:	bd80      	pop	{r7, pc}

08000ac8 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8000acc:	4802      	ldr	r0, [pc, #8]	; (8000ad8 <DMA1_Stream3_IRQHandler+0x10>)
 8000ace:	f000 fc31 	bl	8001334 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8000ad2:	bf00      	nop
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	200004e0 	.word	0x200004e0

08000adc <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s2);
 8000ae0:	4802      	ldr	r0, [pc, #8]	; (8000aec <SPI2_IRQHandler+0x10>)
 8000ae2:	f001 fa29 	bl	8001f38 <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8000ae6:	bf00      	nop
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	20000498 	.word	0x20000498

08000af0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000af4:	4802      	ldr	r0, [pc, #8]	; (8000b00 <USART2_IRQHandler+0x10>)
 8000af6:	f002 fc83 	bl	8003400 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000afa:	bf00      	nop
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	20000868 	.word	0x20000868

08000b04 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b08:	4b11      	ldr	r3, [pc, #68]	; (8000b50 <MX_USART2_UART_Init+0x4c>)
 8000b0a:	4a12      	ldr	r2, [pc, #72]	; (8000b54 <MX_USART2_UART_Init+0x50>)
 8000b0c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b0e:	4b10      	ldr	r3, [pc, #64]	; (8000b50 <MX_USART2_UART_Init+0x4c>)
 8000b10:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b14:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b16:	4b0e      	ldr	r3, [pc, #56]	; (8000b50 <MX_USART2_UART_Init+0x4c>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b1c:	4b0c      	ldr	r3, [pc, #48]	; (8000b50 <MX_USART2_UART_Init+0x4c>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b22:	4b0b      	ldr	r3, [pc, #44]	; (8000b50 <MX_USART2_UART_Init+0x4c>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b28:	4b09      	ldr	r3, [pc, #36]	; (8000b50 <MX_USART2_UART_Init+0x4c>)
 8000b2a:	220c      	movs	r2, #12
 8000b2c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b2e:	4b08      	ldr	r3, [pc, #32]	; (8000b50 <MX_USART2_UART_Init+0x4c>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b34:	4b06      	ldr	r3, [pc, #24]	; (8000b50 <MX_USART2_UART_Init+0x4c>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b3a:	4805      	ldr	r0, [pc, #20]	; (8000b50 <MX_USART2_UART_Init+0x4c>)
 8000b3c:	f002 fb80 	bl	8003240 <HAL_UART_Init>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b46:	f7ff ff67 	bl	8000a18 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b4a:	bf00      	nop
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	20000868 	.word	0x20000868
 8000b54:	40004400 	.word	0x40004400

08000b58 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b08a      	sub	sp, #40	; 0x28
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b60:	f107 0314 	add.w	r3, r7, #20
 8000b64:	2200      	movs	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]
 8000b68:	605a      	str	r2, [r3, #4]
 8000b6a:	609a      	str	r2, [r3, #8]
 8000b6c:	60da      	str	r2, [r3, #12]
 8000b6e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a1d      	ldr	r2, [pc, #116]	; (8000bec <HAL_UART_MspInit+0x94>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d133      	bne.n	8000be2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	613b      	str	r3, [r7, #16]
 8000b7e:	4b1c      	ldr	r3, [pc, #112]	; (8000bf0 <HAL_UART_MspInit+0x98>)
 8000b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b82:	4a1b      	ldr	r2, [pc, #108]	; (8000bf0 <HAL_UART_MspInit+0x98>)
 8000b84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b88:	6413      	str	r3, [r2, #64]	; 0x40
 8000b8a:	4b19      	ldr	r3, [pc, #100]	; (8000bf0 <HAL_UART_MspInit+0x98>)
 8000b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b92:	613b      	str	r3, [r7, #16]
 8000b94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	60fb      	str	r3, [r7, #12]
 8000b9a:	4b15      	ldr	r3, [pc, #84]	; (8000bf0 <HAL_UART_MspInit+0x98>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	4a14      	ldr	r2, [pc, #80]	; (8000bf0 <HAL_UART_MspInit+0x98>)
 8000ba0:	f043 0301 	orr.w	r3, r3, #1
 8000ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba6:	4b12      	ldr	r3, [pc, #72]	; (8000bf0 <HAL_UART_MspInit+0x98>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	f003 0301 	and.w	r3, r3, #1
 8000bae:	60fb      	str	r3, [r7, #12]
 8000bb0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000bb2:	230c      	movs	r3, #12
 8000bb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb6:	2302      	movs	r3, #2
 8000bb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bbe:	2303      	movs	r3, #3
 8000bc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bc2:	2307      	movs	r3, #7
 8000bc4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc6:	f107 0314 	add.w	r3, r7, #20
 8000bca:	4619      	mov	r1, r3
 8000bcc:	4809      	ldr	r0, [pc, #36]	; (8000bf4 <HAL_UART_MspInit+0x9c>)
 8000bce:	f000 fe1b 	bl	8001808 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	2026      	movs	r0, #38	; 0x26
 8000bd8:	f000 f9c1 	bl	8000f5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000bdc:	2026      	movs	r0, #38	; 0x26
 8000bde:	f000 f9da 	bl	8000f96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000be2:	bf00      	nop
 8000be4:	3728      	adds	r7, #40	; 0x28
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	40004400 	.word	0x40004400
 8000bf0:	40023800 	.word	0x40023800
 8000bf4:	40020000 	.word	0x40020000

08000bf8 <MX_PDM2PCM_Init>:
/* USER CODE BEGIN 1 */
/* USER CODE END 1 */

/* PDM2PCM init function */
void MX_PDM2PCM_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

   /**
  */
  PDM1_filter_handler.bit_order = PDM_FILTER_BIT_ORDER_LSB;
 8000bfc:	4b10      	ldr	r3, [pc, #64]	; (8000c40 <MX_PDM2PCM_Init+0x48>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	801a      	strh	r2, [r3, #0]
  PDM1_filter_handler.endianness = PDM_FILTER_ENDIANNESS_BE;
 8000c02:	4b0f      	ldr	r3, [pc, #60]	; (8000c40 <MX_PDM2PCM_Init+0x48>)
 8000c04:	2201      	movs	r2, #1
 8000c06:	805a      	strh	r2, [r3, #2]
  PDM1_filter_handler.high_pass_tap = 2104533974;
 8000c08:	4b0d      	ldr	r3, [pc, #52]	; (8000c40 <MX_PDM2PCM_Init+0x48>)
 8000c0a:	4a0e      	ldr	r2, [pc, #56]	; (8000c44 <MX_PDM2PCM_Init+0x4c>)
 8000c0c:	605a      	str	r2, [r3, #4]
  PDM1_filter_handler.in_ptr_channels = 1;
 8000c0e:	4b0c      	ldr	r3, [pc, #48]	; (8000c40 <MX_PDM2PCM_Init+0x48>)
 8000c10:	2201      	movs	r2, #1
 8000c12:	811a      	strh	r2, [r3, #8]
  PDM1_filter_handler.out_ptr_channels = 1;
 8000c14:	4b0a      	ldr	r3, [pc, #40]	; (8000c40 <MX_PDM2PCM_Init+0x48>)
 8000c16:	2201      	movs	r2, #1
 8000c18:	815a      	strh	r2, [r3, #10]
  PDM_Filter_Init(&PDM1_filter_handler);
 8000c1a:	4809      	ldr	r0, [pc, #36]	; (8000c40 <MX_PDM2PCM_Init+0x48>)
 8000c1c:	f005 f874 	bl	8005d08 <PDM_Filter_Init>

  PDM1_filter_config.decimation_factor = PDM_FILTER_DEC_FACTOR_64;
 8000c20:	4b09      	ldr	r3, [pc, #36]	; (8000c48 <MX_PDM2PCM_Init+0x50>)
 8000c22:	2202      	movs	r2, #2
 8000c24:	801a      	strh	r2, [r3, #0]
  PDM1_filter_config.output_samples_number = 16;
 8000c26:	4b08      	ldr	r3, [pc, #32]	; (8000c48 <MX_PDM2PCM_Init+0x50>)
 8000c28:	2210      	movs	r2, #16
 8000c2a:	805a      	strh	r2, [r3, #2]
  PDM1_filter_config.mic_gain = 0;
 8000c2c:	4b06      	ldr	r3, [pc, #24]	; (8000c48 <MX_PDM2PCM_Init+0x50>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	809a      	strh	r2, [r3, #4]
  PDM_Filter_setConfig(&PDM1_filter_handler, &PDM1_filter_config);
 8000c32:	4905      	ldr	r1, [pc, #20]	; (8000c48 <MX_PDM2PCM_Init+0x50>)
 8000c34:	4802      	ldr	r0, [pc, #8]	; (8000c40 <MX_PDM2PCM_Init+0x48>)
 8000c36:	f005 f8f1 	bl	8005e1c <PDM_Filter_setConfig>

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 8000c3a:	bf00      	nop
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	200008ac 	.word	0x200008ac
 8000c44:	7d70a3d6 	.word	0x7d70a3d6
 8000c48:	200008f8 	.word	0x200008f8

08000c4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c84 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c50:	480d      	ldr	r0, [pc, #52]	; (8000c88 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c52:	490e      	ldr	r1, [pc, #56]	; (8000c8c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c54:	4a0e      	ldr	r2, [pc, #56]	; (8000c90 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c58:	e002      	b.n	8000c60 <LoopCopyDataInit>

08000c5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c5e:	3304      	adds	r3, #4

08000c60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c64:	d3f9      	bcc.n	8000c5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c66:	4a0b      	ldr	r2, [pc, #44]	; (8000c94 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c68:	4c0b      	ldr	r4, [pc, #44]	; (8000c98 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c6c:	e001      	b.n	8000c72 <LoopFillZerobss>

08000c6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c70:	3204      	adds	r2, #4

08000c72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c74:	d3fb      	bcc.n	8000c6e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c76:	f000 f813 	bl	8000ca0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c7a:	f005 fa21 	bl	80060c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c7e:	f7ff fdd5 	bl	800082c <main>
  bx  lr    
 8000c82:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c84:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c8c:	20000470 	.word	0x20000470
  ldr r2, =_sidata
 8000c90:	080069b0 	.word	0x080069b0
  ldr r2, =_sbss
 8000c94:	20000470 	.word	0x20000470
  ldr r4, =_ebss
 8000c98:	20000904 	.word	0x20000904

08000c9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c9c:	e7fe      	b.n	8000c9c <ADC_IRQHandler>
	...

08000ca0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ca4:	4b06      	ldr	r3, [pc, #24]	; (8000cc0 <SystemInit+0x20>)
 8000ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000caa:	4a05      	ldr	r2, [pc, #20]	; (8000cc0 <SystemInit+0x20>)
 8000cac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cb0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cb4:	bf00      	nop
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	e000ed00 	.word	0xe000ed00

08000cc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cc8:	4b0e      	ldr	r3, [pc, #56]	; (8000d04 <HAL_Init+0x40>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a0d      	ldr	r2, [pc, #52]	; (8000d04 <HAL_Init+0x40>)
 8000cce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cd2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cd4:	4b0b      	ldr	r3, [pc, #44]	; (8000d04 <HAL_Init+0x40>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a0a      	ldr	r2, [pc, #40]	; (8000d04 <HAL_Init+0x40>)
 8000cda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cde:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ce0:	4b08      	ldr	r3, [pc, #32]	; (8000d04 <HAL_Init+0x40>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a07      	ldr	r2, [pc, #28]	; (8000d04 <HAL_Init+0x40>)
 8000ce6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cec:	2003      	movs	r0, #3
 8000cee:	f000 f92b 	bl	8000f48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cf2:	2000      	movs	r0, #0
 8000cf4:	f000 f808 	bl	8000d08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cf8:	f7ff fe94 	bl	8000a24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cfc:	2300      	movs	r3, #0
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	40023c00 	.word	0x40023c00

08000d08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d10:	4b12      	ldr	r3, [pc, #72]	; (8000d5c <HAL_InitTick+0x54>)
 8000d12:	681a      	ldr	r2, [r3, #0]
 8000d14:	4b12      	ldr	r3, [pc, #72]	; (8000d60 <HAL_InitTick+0x58>)
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	4619      	mov	r1, r3
 8000d1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d22:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d26:	4618      	mov	r0, r3
 8000d28:	f000 f943 	bl	8000fb2 <HAL_SYSTICK_Config>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d32:	2301      	movs	r3, #1
 8000d34:	e00e      	b.n	8000d54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	2b0f      	cmp	r3, #15
 8000d3a:	d80a      	bhi.n	8000d52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	6879      	ldr	r1, [r7, #4]
 8000d40:	f04f 30ff 	mov.w	r0, #4294967295
 8000d44:	f000 f90b 	bl	8000f5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d48:	4a06      	ldr	r2, [pc, #24]	; (8000d64 <HAL_InitTick+0x5c>)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	e000      	b.n	8000d54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d52:	2301      	movs	r3, #1
}
 8000d54:	4618      	mov	r0, r3
 8000d56:	3708      	adds	r7, #8
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	20000400 	.word	0x20000400
 8000d60:	20000408 	.word	0x20000408
 8000d64:	20000404 	.word	0x20000404

08000d68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d6c:	4b06      	ldr	r3, [pc, #24]	; (8000d88 <HAL_IncTick+0x20>)
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	461a      	mov	r2, r3
 8000d72:	4b06      	ldr	r3, [pc, #24]	; (8000d8c <HAL_IncTick+0x24>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4413      	add	r3, r2
 8000d78:	4a04      	ldr	r2, [pc, #16]	; (8000d8c <HAL_IncTick+0x24>)
 8000d7a:	6013      	str	r3, [r2, #0]
}
 8000d7c:	bf00      	nop
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	20000408 	.word	0x20000408
 8000d8c:	20000900 	.word	0x20000900

08000d90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  return uwTick;
 8000d94:	4b03      	ldr	r3, [pc, #12]	; (8000da4 <HAL_GetTick+0x14>)
 8000d96:	681b      	ldr	r3, [r3, #0]
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	20000900 	.word	0x20000900

08000da8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b085      	sub	sp, #20
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	f003 0307 	and.w	r3, r3, #7
 8000db6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000db8:	4b0c      	ldr	r3, [pc, #48]	; (8000dec <__NVIC_SetPriorityGrouping+0x44>)
 8000dba:	68db      	ldr	r3, [r3, #12]
 8000dbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dbe:	68ba      	ldr	r2, [r7, #8]
 8000dc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dd0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000dd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dda:	4a04      	ldr	r2, [pc, #16]	; (8000dec <__NVIC_SetPriorityGrouping+0x44>)
 8000ddc:	68bb      	ldr	r3, [r7, #8]
 8000dde:	60d3      	str	r3, [r2, #12]
}
 8000de0:	bf00      	nop
 8000de2:	3714      	adds	r7, #20
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr
 8000dec:	e000ed00 	.word	0xe000ed00

08000df0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000df4:	4b04      	ldr	r3, [pc, #16]	; (8000e08 <__NVIC_GetPriorityGrouping+0x18>)
 8000df6:	68db      	ldr	r3, [r3, #12]
 8000df8:	0a1b      	lsrs	r3, r3, #8
 8000dfa:	f003 0307 	and.w	r3, r3, #7
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr
 8000e08:	e000ed00 	.word	0xe000ed00

08000e0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b083      	sub	sp, #12
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	4603      	mov	r3, r0
 8000e14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	db0b      	blt.n	8000e36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e1e:	79fb      	ldrb	r3, [r7, #7]
 8000e20:	f003 021f 	and.w	r2, r3, #31
 8000e24:	4907      	ldr	r1, [pc, #28]	; (8000e44 <__NVIC_EnableIRQ+0x38>)
 8000e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2a:	095b      	lsrs	r3, r3, #5
 8000e2c:	2001      	movs	r0, #1
 8000e2e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e36:	bf00      	nop
 8000e38:	370c      	adds	r7, #12
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	e000e100 	.word	0xe000e100

08000e48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b083      	sub	sp, #12
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	4603      	mov	r3, r0
 8000e50:	6039      	str	r1, [r7, #0]
 8000e52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	db0a      	blt.n	8000e72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	b2da      	uxtb	r2, r3
 8000e60:	490c      	ldr	r1, [pc, #48]	; (8000e94 <__NVIC_SetPriority+0x4c>)
 8000e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e66:	0112      	lsls	r2, r2, #4
 8000e68:	b2d2      	uxtb	r2, r2
 8000e6a:	440b      	add	r3, r1
 8000e6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e70:	e00a      	b.n	8000e88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	b2da      	uxtb	r2, r3
 8000e76:	4908      	ldr	r1, [pc, #32]	; (8000e98 <__NVIC_SetPriority+0x50>)
 8000e78:	79fb      	ldrb	r3, [r7, #7]
 8000e7a:	f003 030f 	and.w	r3, r3, #15
 8000e7e:	3b04      	subs	r3, #4
 8000e80:	0112      	lsls	r2, r2, #4
 8000e82:	b2d2      	uxtb	r2, r2
 8000e84:	440b      	add	r3, r1
 8000e86:	761a      	strb	r2, [r3, #24]
}
 8000e88:	bf00      	nop
 8000e8a:	370c      	adds	r7, #12
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr
 8000e94:	e000e100 	.word	0xe000e100
 8000e98:	e000ed00 	.word	0xe000ed00

08000e9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b089      	sub	sp, #36	; 0x24
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	60f8      	str	r0, [r7, #12]
 8000ea4:	60b9      	str	r1, [r7, #8]
 8000ea6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	f003 0307 	and.w	r3, r3, #7
 8000eae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000eb0:	69fb      	ldr	r3, [r7, #28]
 8000eb2:	f1c3 0307 	rsb	r3, r3, #7
 8000eb6:	2b04      	cmp	r3, #4
 8000eb8:	bf28      	it	cs
 8000eba:	2304      	movcs	r3, #4
 8000ebc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	3304      	adds	r3, #4
 8000ec2:	2b06      	cmp	r3, #6
 8000ec4:	d902      	bls.n	8000ecc <NVIC_EncodePriority+0x30>
 8000ec6:	69fb      	ldr	r3, [r7, #28]
 8000ec8:	3b03      	subs	r3, #3
 8000eca:	e000      	b.n	8000ece <NVIC_EncodePriority+0x32>
 8000ecc:	2300      	movs	r3, #0
 8000ece:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ed0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ed4:	69bb      	ldr	r3, [r7, #24]
 8000ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eda:	43da      	mvns	r2, r3
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	401a      	ands	r2, r3
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ee4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	fa01 f303 	lsl.w	r3, r1, r3
 8000eee:	43d9      	mvns	r1, r3
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ef4:	4313      	orrs	r3, r2
         );
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3724      	adds	r7, #36	; 0x24
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
	...

08000f04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	3b01      	subs	r3, #1
 8000f10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f14:	d301      	bcc.n	8000f1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f16:	2301      	movs	r3, #1
 8000f18:	e00f      	b.n	8000f3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f1a:	4a0a      	ldr	r2, [pc, #40]	; (8000f44 <SysTick_Config+0x40>)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	3b01      	subs	r3, #1
 8000f20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f22:	210f      	movs	r1, #15
 8000f24:	f04f 30ff 	mov.w	r0, #4294967295
 8000f28:	f7ff ff8e 	bl	8000e48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f2c:	4b05      	ldr	r3, [pc, #20]	; (8000f44 <SysTick_Config+0x40>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f32:	4b04      	ldr	r3, [pc, #16]	; (8000f44 <SysTick_Config+0x40>)
 8000f34:	2207      	movs	r2, #7
 8000f36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f38:	2300      	movs	r3, #0
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3708      	adds	r7, #8
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	e000e010 	.word	0xe000e010

08000f48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f50:	6878      	ldr	r0, [r7, #4]
 8000f52:	f7ff ff29 	bl	8000da8 <__NVIC_SetPriorityGrouping>
}
 8000f56:	bf00      	nop
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}

08000f5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f5e:	b580      	push	{r7, lr}
 8000f60:	b086      	sub	sp, #24
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	4603      	mov	r3, r0
 8000f66:	60b9      	str	r1, [r7, #8]
 8000f68:	607a      	str	r2, [r7, #4]
 8000f6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f70:	f7ff ff3e 	bl	8000df0 <__NVIC_GetPriorityGrouping>
 8000f74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f76:	687a      	ldr	r2, [r7, #4]
 8000f78:	68b9      	ldr	r1, [r7, #8]
 8000f7a:	6978      	ldr	r0, [r7, #20]
 8000f7c:	f7ff ff8e 	bl	8000e9c <NVIC_EncodePriority>
 8000f80:	4602      	mov	r2, r0
 8000f82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f86:	4611      	mov	r1, r2
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f7ff ff5d 	bl	8000e48 <__NVIC_SetPriority>
}
 8000f8e:	bf00      	nop
 8000f90:	3718      	adds	r7, #24
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}

08000f96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f96:	b580      	push	{r7, lr}
 8000f98:	b082      	sub	sp, #8
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f7ff ff31 	bl	8000e0c <__NVIC_EnableIRQ>
}
 8000faa:	bf00      	nop
 8000fac:	3708      	adds	r7, #8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}

08000fb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fb2:	b580      	push	{r7, lr}
 8000fb4:	b082      	sub	sp, #8
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fba:	6878      	ldr	r0, [r7, #4]
 8000fbc:	f7ff ffa2 	bl	8000f04 <SysTick_Config>
 8000fc0:	4603      	mov	r3, r0
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}

08000fca <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000fca:	b580      	push	{r7, lr}
 8000fcc:	b082      	sub	sp, #8
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d101      	bne.n	8000fdc <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	e00e      	b.n	8000ffa <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	795b      	ldrb	r3, [r3, #5]
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d105      	bne.n	8000ff2 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	2200      	movs	r2, #0
 8000fea:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8000fec:	6878      	ldr	r0, [r7, #4]
 8000fee:	f7ff fa81 	bl	80004f4 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8000ff8:	2300      	movs	r3, #0
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
	...

08001004 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b086      	sub	sp, #24
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800100c:	2300      	movs	r3, #0
 800100e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001010:	f7ff febe 	bl	8000d90 <HAL_GetTick>
 8001014:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d101      	bne.n	8001020 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800101c:	2301      	movs	r3, #1
 800101e:	e099      	b.n	8001154 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2202      	movs	r2, #2
 8001024:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2200      	movs	r2, #0
 800102c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	681a      	ldr	r2, [r3, #0]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f022 0201 	bic.w	r2, r2, #1
 800103e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001040:	e00f      	b.n	8001062 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001042:	f7ff fea5 	bl	8000d90 <HAL_GetTick>
 8001046:	4602      	mov	r2, r0
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	1ad3      	subs	r3, r2, r3
 800104c:	2b05      	cmp	r3, #5
 800104e:	d908      	bls.n	8001062 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2220      	movs	r2, #32
 8001054:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2203      	movs	r2, #3
 800105a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800105e:	2303      	movs	r3, #3
 8001060:	e078      	b.n	8001154 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f003 0301 	and.w	r3, r3, #1
 800106c:	2b00      	cmp	r3, #0
 800106e:	d1e8      	bne.n	8001042 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001078:	697a      	ldr	r2, [r7, #20]
 800107a:	4b38      	ldr	r3, [pc, #224]	; (800115c <HAL_DMA_Init+0x158>)
 800107c:	4013      	ands	r3, r2
 800107e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	685a      	ldr	r2, [r3, #4]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	689b      	ldr	r3, [r3, #8]
 8001088:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800108e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	691b      	ldr	r3, [r3, #16]
 8001094:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800109a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	699b      	ldr	r3, [r3, #24]
 80010a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6a1b      	ldr	r3, [r3, #32]
 80010ac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80010ae:	697a      	ldr	r2, [r7, #20]
 80010b0:	4313      	orrs	r3, r2
 80010b2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010b8:	2b04      	cmp	r3, #4
 80010ba:	d107      	bne.n	80010cc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c4:	4313      	orrs	r3, r2
 80010c6:	697a      	ldr	r2, [r7, #20]
 80010c8:	4313      	orrs	r3, r2
 80010ca:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	697a      	ldr	r2, [r7, #20]
 80010d2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	695b      	ldr	r3, [r3, #20]
 80010da:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	f023 0307 	bic.w	r3, r3, #7
 80010e2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010e8:	697a      	ldr	r2, [r7, #20]
 80010ea:	4313      	orrs	r3, r2
 80010ec:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010f2:	2b04      	cmp	r3, #4
 80010f4:	d117      	bne.n	8001126 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010fa:	697a      	ldr	r2, [r7, #20]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001104:	2b00      	cmp	r3, #0
 8001106:	d00e      	beq.n	8001126 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001108:	6878      	ldr	r0, [r7, #4]
 800110a:	f000 fb01 	bl	8001710 <DMA_CheckFifoParam>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d008      	beq.n	8001126 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2240      	movs	r2, #64	; 0x40
 8001118:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2201      	movs	r2, #1
 800111e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001122:	2301      	movs	r3, #1
 8001124:	e016      	b.n	8001154 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	697a      	ldr	r2, [r7, #20]
 800112c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800112e:	6878      	ldr	r0, [r7, #4]
 8001130:	f000 fab8 	bl	80016a4 <DMA_CalcBaseAndBitshift>
 8001134:	4603      	mov	r3, r0
 8001136:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800113c:	223f      	movs	r2, #63	; 0x3f
 800113e:	409a      	lsls	r2, r3
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2200      	movs	r2, #0
 8001148:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2201      	movs	r2, #1
 800114e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001152:	2300      	movs	r3, #0
}
 8001154:	4618      	mov	r0, r3
 8001156:	3718      	adds	r7, #24
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	f010803f 	.word	0xf010803f

08001160 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b086      	sub	sp, #24
 8001164:	af00      	add	r7, sp, #0
 8001166:	60f8      	str	r0, [r7, #12]
 8001168:	60b9      	str	r1, [r7, #8]
 800116a:	607a      	str	r2, [r7, #4]
 800116c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800116e:	2300      	movs	r3, #0
 8001170:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001176:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800117e:	2b01      	cmp	r3, #1
 8001180:	d101      	bne.n	8001186 <HAL_DMA_Start_IT+0x26>
 8001182:	2302      	movs	r3, #2
 8001184:	e040      	b.n	8001208 <HAL_DMA_Start_IT+0xa8>
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	2201      	movs	r2, #1
 800118a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001194:	b2db      	uxtb	r3, r3
 8001196:	2b01      	cmp	r3, #1
 8001198:	d12f      	bne.n	80011fa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	2202      	movs	r2, #2
 800119e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	2200      	movs	r2, #0
 80011a6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	687a      	ldr	r2, [r7, #4]
 80011ac:	68b9      	ldr	r1, [r7, #8]
 80011ae:	68f8      	ldr	r0, [r7, #12]
 80011b0:	f000 fa4a 	bl	8001648 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011b8:	223f      	movs	r2, #63	; 0x3f
 80011ba:	409a      	lsls	r2, r3
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f042 0216 	orr.w	r2, r2, #22
 80011ce:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d007      	beq.n	80011e8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f042 0208 	orr.w	r2, r2, #8
 80011e6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f042 0201 	orr.w	r2, r2, #1
 80011f6:	601a      	str	r2, [r3, #0]
 80011f8:	e005      	b.n	8001206 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	2200      	movs	r2, #0
 80011fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001202:	2302      	movs	r3, #2
 8001204:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001206:	7dfb      	ldrb	r3, [r7, #23]
}
 8001208:	4618      	mov	r0, r3
 800120a:	3718      	adds	r7, #24
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}

08001210 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800121c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800121e:	f7ff fdb7 	bl	8000d90 <HAL_GetTick>
 8001222:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800122a:	b2db      	uxtb	r3, r3
 800122c:	2b02      	cmp	r3, #2
 800122e:	d008      	beq.n	8001242 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2280      	movs	r2, #128	; 0x80
 8001234:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2200      	movs	r2, #0
 800123a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
 8001240:	e052      	b.n	80012e8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f022 0216 	bic.w	r2, r2, #22
 8001250:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	695a      	ldr	r2, [r3, #20]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001260:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001266:	2b00      	cmp	r3, #0
 8001268:	d103      	bne.n	8001272 <HAL_DMA_Abort+0x62>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800126e:	2b00      	cmp	r3, #0
 8001270:	d007      	beq.n	8001282 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f022 0208 	bic.w	r2, r2, #8
 8001280:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f022 0201 	bic.w	r2, r2, #1
 8001290:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001292:	e013      	b.n	80012bc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001294:	f7ff fd7c 	bl	8000d90 <HAL_GetTick>
 8001298:	4602      	mov	r2, r0
 800129a:	68bb      	ldr	r3, [r7, #8]
 800129c:	1ad3      	subs	r3, r2, r3
 800129e:	2b05      	cmp	r3, #5
 80012a0:	d90c      	bls.n	80012bc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2220      	movs	r2, #32
 80012a6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2203      	movs	r2, #3
 80012ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2200      	movs	r2, #0
 80012b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80012b8:	2303      	movs	r3, #3
 80012ba:	e015      	b.n	80012e8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f003 0301 	and.w	r3, r3, #1
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d1e4      	bne.n	8001294 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012ce:	223f      	movs	r2, #63	; 0x3f
 80012d0:	409a      	lsls	r2, r3
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2201      	movs	r2, #1
 80012da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2200      	movs	r2, #0
 80012e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80012e6:	2300      	movs	r3, #0
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	3710      	adds	r7, #16
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}

080012f0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012fe:	b2db      	uxtb	r3, r3
 8001300:	2b02      	cmp	r3, #2
 8001302:	d004      	beq.n	800130e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2280      	movs	r2, #128	; 0x80
 8001308:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800130a:	2301      	movs	r3, #1
 800130c:	e00c      	b.n	8001328 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2205      	movs	r2, #5
 8001312:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f022 0201 	bic.w	r2, r2, #1
 8001324:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001326:	2300      	movs	r3, #0
}
 8001328:	4618      	mov	r0, r3
 800132a:	370c      	adds	r7, #12
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr

08001334 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b086      	sub	sp, #24
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800133c:	2300      	movs	r3, #0
 800133e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001340:	4b8e      	ldr	r3, [pc, #568]	; (800157c <HAL_DMA_IRQHandler+0x248>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a8e      	ldr	r2, [pc, #568]	; (8001580 <HAL_DMA_IRQHandler+0x24c>)
 8001346:	fba2 2303 	umull	r2, r3, r2, r3
 800134a:	0a9b      	lsrs	r3, r3, #10
 800134c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001352:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800135e:	2208      	movs	r2, #8
 8001360:	409a      	lsls	r2, r3
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	4013      	ands	r3, r2
 8001366:	2b00      	cmp	r3, #0
 8001368:	d01a      	beq.n	80013a0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f003 0304 	and.w	r3, r3, #4
 8001374:	2b00      	cmp	r3, #0
 8001376:	d013      	beq.n	80013a0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f022 0204 	bic.w	r2, r2, #4
 8001386:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800138c:	2208      	movs	r2, #8
 800138e:	409a      	lsls	r2, r3
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001398:	f043 0201 	orr.w	r2, r3, #1
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013a4:	2201      	movs	r2, #1
 80013a6:	409a      	lsls	r2, r3
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	4013      	ands	r3, r2
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d012      	beq.n	80013d6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	695b      	ldr	r3, [r3, #20]
 80013b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d00b      	beq.n	80013d6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013c2:	2201      	movs	r2, #1
 80013c4:	409a      	lsls	r2, r3
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013ce:	f043 0202 	orr.w	r2, r3, #2
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013da:	2204      	movs	r2, #4
 80013dc:	409a      	lsls	r2, r3
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	4013      	ands	r3, r2
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d012      	beq.n	800140c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f003 0302 	and.w	r3, r3, #2
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d00b      	beq.n	800140c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013f8:	2204      	movs	r2, #4
 80013fa:	409a      	lsls	r2, r3
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001404:	f043 0204 	orr.w	r2, r3, #4
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001410:	2210      	movs	r2, #16
 8001412:	409a      	lsls	r2, r3
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	4013      	ands	r3, r2
 8001418:	2b00      	cmp	r3, #0
 800141a:	d043      	beq.n	80014a4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f003 0308 	and.w	r3, r3, #8
 8001426:	2b00      	cmp	r3, #0
 8001428:	d03c      	beq.n	80014a4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800142e:	2210      	movs	r2, #16
 8001430:	409a      	lsls	r2, r3
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001440:	2b00      	cmp	r3, #0
 8001442:	d018      	beq.n	8001476 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800144e:	2b00      	cmp	r3, #0
 8001450:	d108      	bne.n	8001464 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001456:	2b00      	cmp	r3, #0
 8001458:	d024      	beq.n	80014a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145e:	6878      	ldr	r0, [r7, #4]
 8001460:	4798      	blx	r3
 8001462:	e01f      	b.n	80014a4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001468:	2b00      	cmp	r3, #0
 800146a:	d01b      	beq.n	80014a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001470:	6878      	ldr	r0, [r7, #4]
 8001472:	4798      	blx	r3
 8001474:	e016      	b.n	80014a4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001480:	2b00      	cmp	r3, #0
 8001482:	d107      	bne.n	8001494 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f022 0208 	bic.w	r2, r2, #8
 8001492:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001498:	2b00      	cmp	r3, #0
 800149a:	d003      	beq.n	80014a4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a0:	6878      	ldr	r0, [r7, #4]
 80014a2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014a8:	2220      	movs	r2, #32
 80014aa:	409a      	lsls	r2, r3
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	4013      	ands	r3, r2
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	f000 808f 	beq.w	80015d4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f003 0310 	and.w	r3, r3, #16
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	f000 8087 	beq.w	80015d4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014ca:	2220      	movs	r2, #32
 80014cc:	409a      	lsls	r2, r3
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	2b05      	cmp	r3, #5
 80014dc:	d136      	bne.n	800154c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f022 0216 	bic.w	r2, r2, #22
 80014ec:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	695a      	ldr	r2, [r3, #20]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80014fc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001502:	2b00      	cmp	r3, #0
 8001504:	d103      	bne.n	800150e <HAL_DMA_IRQHandler+0x1da>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800150a:	2b00      	cmp	r3, #0
 800150c:	d007      	beq.n	800151e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f022 0208 	bic.w	r2, r2, #8
 800151c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001522:	223f      	movs	r2, #63	; 0x3f
 8001524:	409a      	lsls	r2, r3
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2201      	movs	r2, #1
 800152e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2200      	movs	r2, #0
 8001536:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800153e:	2b00      	cmp	r3, #0
 8001540:	d07e      	beq.n	8001640 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001546:	6878      	ldr	r0, [r7, #4]
 8001548:	4798      	blx	r3
        }
        return;
 800154a:	e079      	b.n	8001640 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001556:	2b00      	cmp	r3, #0
 8001558:	d01d      	beq.n	8001596 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001564:	2b00      	cmp	r3, #0
 8001566:	d10d      	bne.n	8001584 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800156c:	2b00      	cmp	r3, #0
 800156e:	d031      	beq.n	80015d4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001574:	6878      	ldr	r0, [r7, #4]
 8001576:	4798      	blx	r3
 8001578:	e02c      	b.n	80015d4 <HAL_DMA_IRQHandler+0x2a0>
 800157a:	bf00      	nop
 800157c:	20000400 	.word	0x20000400
 8001580:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001588:	2b00      	cmp	r3, #0
 800158a:	d023      	beq.n	80015d4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001590:	6878      	ldr	r0, [r7, #4]
 8001592:	4798      	blx	r3
 8001594:	e01e      	b.n	80015d4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d10f      	bne.n	80015c4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f022 0210 	bic.w	r2, r2, #16
 80015b2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2201      	movs	r2, #1
 80015b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2200      	movs	r2, #0
 80015c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d003      	beq.n	80015d4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015d0:	6878      	ldr	r0, [r7, #4]
 80015d2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d032      	beq.n	8001642 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015e0:	f003 0301 	and.w	r3, r3, #1
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d022      	beq.n	800162e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2205      	movs	r2, #5
 80015ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f022 0201 	bic.w	r2, r2, #1
 80015fe:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	3301      	adds	r3, #1
 8001604:	60bb      	str	r3, [r7, #8]
 8001606:	697a      	ldr	r2, [r7, #20]
 8001608:	429a      	cmp	r2, r3
 800160a:	d307      	bcc.n	800161c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f003 0301 	and.w	r3, r3, #1
 8001616:	2b00      	cmp	r3, #0
 8001618:	d1f2      	bne.n	8001600 <HAL_DMA_IRQHandler+0x2cc>
 800161a:	e000      	b.n	800161e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800161c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2201      	movs	r2, #1
 8001622:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2200      	movs	r2, #0
 800162a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001632:	2b00      	cmp	r3, #0
 8001634:	d005      	beq.n	8001642 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	4798      	blx	r3
 800163e:	e000      	b.n	8001642 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001640:	bf00      	nop
    }
  }
}
 8001642:	3718      	adds	r7, #24
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}

08001648 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001648:	b480      	push	{r7}
 800164a:	b085      	sub	sp, #20
 800164c:	af00      	add	r7, sp, #0
 800164e:	60f8      	str	r0, [r7, #12]
 8001650:	60b9      	str	r1, [r7, #8]
 8001652:	607a      	str	r2, [r7, #4]
 8001654:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001664:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	683a      	ldr	r2, [r7, #0]
 800166c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	2b40      	cmp	r3, #64	; 0x40
 8001674:	d108      	bne.n	8001688 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	687a      	ldr	r2, [r7, #4]
 800167c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	68ba      	ldr	r2, [r7, #8]
 8001684:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001686:	e007      	b.n	8001698 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	68ba      	ldr	r2, [r7, #8]
 800168e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	687a      	ldr	r2, [r7, #4]
 8001696:	60da      	str	r2, [r3, #12]
}
 8001698:	bf00      	nop
 800169a:	3714      	adds	r7, #20
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr

080016a4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b085      	sub	sp, #20
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	3b10      	subs	r3, #16
 80016b4:	4a14      	ldr	r2, [pc, #80]	; (8001708 <DMA_CalcBaseAndBitshift+0x64>)
 80016b6:	fba2 2303 	umull	r2, r3, r2, r3
 80016ba:	091b      	lsrs	r3, r3, #4
 80016bc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80016be:	4a13      	ldr	r2, [pc, #76]	; (800170c <DMA_CalcBaseAndBitshift+0x68>)
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	4413      	add	r3, r2
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	461a      	mov	r2, r3
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	2b03      	cmp	r3, #3
 80016d0:	d909      	bls.n	80016e6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80016da:	f023 0303 	bic.w	r3, r3, #3
 80016de:	1d1a      	adds	r2, r3, #4
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	659a      	str	r2, [r3, #88]	; 0x58
 80016e4:	e007      	b.n	80016f6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80016ee:	f023 0303 	bic.w	r3, r3, #3
 80016f2:	687a      	ldr	r2, [r7, #4]
 80016f4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3714      	adds	r7, #20
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	aaaaaaab 	.word	0xaaaaaaab
 800170c:	08006980 	.word	0x08006980

08001710 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001710:	b480      	push	{r7}
 8001712:	b085      	sub	sp, #20
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001718:	2300      	movs	r3, #0
 800171a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001720:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	699b      	ldr	r3, [r3, #24]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d11f      	bne.n	800176a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800172a:	68bb      	ldr	r3, [r7, #8]
 800172c:	2b03      	cmp	r3, #3
 800172e:	d856      	bhi.n	80017de <DMA_CheckFifoParam+0xce>
 8001730:	a201      	add	r2, pc, #4	; (adr r2, 8001738 <DMA_CheckFifoParam+0x28>)
 8001732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001736:	bf00      	nop
 8001738:	08001749 	.word	0x08001749
 800173c:	0800175b 	.word	0x0800175b
 8001740:	08001749 	.word	0x08001749
 8001744:	080017df 	.word	0x080017df
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800174c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001750:	2b00      	cmp	r3, #0
 8001752:	d046      	beq.n	80017e2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001758:	e043      	b.n	80017e2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800175e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001762:	d140      	bne.n	80017e6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001764:	2301      	movs	r3, #1
 8001766:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001768:	e03d      	b.n	80017e6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	699b      	ldr	r3, [r3, #24]
 800176e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001772:	d121      	bne.n	80017b8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	2b03      	cmp	r3, #3
 8001778:	d837      	bhi.n	80017ea <DMA_CheckFifoParam+0xda>
 800177a:	a201      	add	r2, pc, #4	; (adr r2, 8001780 <DMA_CheckFifoParam+0x70>)
 800177c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001780:	08001791 	.word	0x08001791
 8001784:	08001797 	.word	0x08001797
 8001788:	08001791 	.word	0x08001791
 800178c:	080017a9 	.word	0x080017a9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001790:	2301      	movs	r3, #1
 8001792:	73fb      	strb	r3, [r7, #15]
      break;
 8001794:	e030      	b.n	80017f8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800179a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d025      	beq.n	80017ee <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80017a6:	e022      	b.n	80017ee <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ac:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80017b0:	d11f      	bne.n	80017f2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80017b6:	e01c      	b.n	80017f2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	d903      	bls.n	80017c6 <DMA_CheckFifoParam+0xb6>
 80017be:	68bb      	ldr	r3, [r7, #8]
 80017c0:	2b03      	cmp	r3, #3
 80017c2:	d003      	beq.n	80017cc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80017c4:	e018      	b.n	80017f8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	73fb      	strb	r3, [r7, #15]
      break;
 80017ca:	e015      	b.n	80017f8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d00e      	beq.n	80017f6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80017d8:	2301      	movs	r3, #1
 80017da:	73fb      	strb	r3, [r7, #15]
      break;
 80017dc:	e00b      	b.n	80017f6 <DMA_CheckFifoParam+0xe6>
      break;
 80017de:	bf00      	nop
 80017e0:	e00a      	b.n	80017f8 <DMA_CheckFifoParam+0xe8>
      break;
 80017e2:	bf00      	nop
 80017e4:	e008      	b.n	80017f8 <DMA_CheckFifoParam+0xe8>
      break;
 80017e6:	bf00      	nop
 80017e8:	e006      	b.n	80017f8 <DMA_CheckFifoParam+0xe8>
      break;
 80017ea:	bf00      	nop
 80017ec:	e004      	b.n	80017f8 <DMA_CheckFifoParam+0xe8>
      break;
 80017ee:	bf00      	nop
 80017f0:	e002      	b.n	80017f8 <DMA_CheckFifoParam+0xe8>
      break;   
 80017f2:	bf00      	nop
 80017f4:	e000      	b.n	80017f8 <DMA_CheckFifoParam+0xe8>
      break;
 80017f6:	bf00      	nop
    }
  } 
  
  return status; 
 80017f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3714      	adds	r7, #20
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop

08001808 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001808:	b480      	push	{r7}
 800180a:	b089      	sub	sp, #36	; 0x24
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001812:	2300      	movs	r3, #0
 8001814:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001816:	2300      	movs	r3, #0
 8001818:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800181a:	2300      	movs	r3, #0
 800181c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800181e:	2300      	movs	r3, #0
 8001820:	61fb      	str	r3, [r7, #28]
 8001822:	e16b      	b.n	8001afc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001824:	2201      	movs	r2, #1
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	fa02 f303 	lsl.w	r3, r2, r3
 800182c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	697a      	ldr	r2, [r7, #20]
 8001834:	4013      	ands	r3, r2
 8001836:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001838:	693a      	ldr	r2, [r7, #16]
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	429a      	cmp	r2, r3
 800183e:	f040 815a 	bne.w	8001af6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	f003 0303 	and.w	r3, r3, #3
 800184a:	2b01      	cmp	r3, #1
 800184c:	d005      	beq.n	800185a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001856:	2b02      	cmp	r3, #2
 8001858:	d130      	bne.n	80018bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001860:	69fb      	ldr	r3, [r7, #28]
 8001862:	005b      	lsls	r3, r3, #1
 8001864:	2203      	movs	r2, #3
 8001866:	fa02 f303 	lsl.w	r3, r2, r3
 800186a:	43db      	mvns	r3, r3
 800186c:	69ba      	ldr	r2, [r7, #24]
 800186e:	4013      	ands	r3, r2
 8001870:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	68da      	ldr	r2, [r3, #12]
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	005b      	lsls	r3, r3, #1
 800187a:	fa02 f303 	lsl.w	r3, r2, r3
 800187e:	69ba      	ldr	r2, [r7, #24]
 8001880:	4313      	orrs	r3, r2
 8001882:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	69ba      	ldr	r2, [r7, #24]
 8001888:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001890:	2201      	movs	r2, #1
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	fa02 f303 	lsl.w	r3, r2, r3
 8001898:	43db      	mvns	r3, r3
 800189a:	69ba      	ldr	r2, [r7, #24]
 800189c:	4013      	ands	r3, r2
 800189e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	091b      	lsrs	r3, r3, #4
 80018a6:	f003 0201 	and.w	r2, r3, #1
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	fa02 f303 	lsl.w	r3, r2, r3
 80018b0:	69ba      	ldr	r2, [r7, #24]
 80018b2:	4313      	orrs	r3, r2
 80018b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	69ba      	ldr	r2, [r7, #24]
 80018ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f003 0303 	and.w	r3, r3, #3
 80018c4:	2b03      	cmp	r3, #3
 80018c6:	d017      	beq.n	80018f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	68db      	ldr	r3, [r3, #12]
 80018cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	005b      	lsls	r3, r3, #1
 80018d2:	2203      	movs	r2, #3
 80018d4:	fa02 f303 	lsl.w	r3, r2, r3
 80018d8:	43db      	mvns	r3, r3
 80018da:	69ba      	ldr	r2, [r7, #24]
 80018dc:	4013      	ands	r3, r2
 80018de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	689a      	ldr	r2, [r3, #8]
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	005b      	lsls	r3, r3, #1
 80018e8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ec:	69ba      	ldr	r2, [r7, #24]
 80018ee:	4313      	orrs	r3, r2
 80018f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	69ba      	ldr	r2, [r7, #24]
 80018f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f003 0303 	and.w	r3, r3, #3
 8001900:	2b02      	cmp	r3, #2
 8001902:	d123      	bne.n	800194c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	08da      	lsrs	r2, r3, #3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	3208      	adds	r2, #8
 800190c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001910:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	f003 0307 	and.w	r3, r3, #7
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	220f      	movs	r2, #15
 800191c:	fa02 f303 	lsl.w	r3, r2, r3
 8001920:	43db      	mvns	r3, r3
 8001922:	69ba      	ldr	r2, [r7, #24]
 8001924:	4013      	ands	r3, r2
 8001926:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	691a      	ldr	r2, [r3, #16]
 800192c:	69fb      	ldr	r3, [r7, #28]
 800192e:	f003 0307 	and.w	r3, r3, #7
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	fa02 f303 	lsl.w	r3, r2, r3
 8001938:	69ba      	ldr	r2, [r7, #24]
 800193a:	4313      	orrs	r3, r2
 800193c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	08da      	lsrs	r2, r3, #3
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	3208      	adds	r2, #8
 8001946:	69b9      	ldr	r1, [r7, #24]
 8001948:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	005b      	lsls	r3, r3, #1
 8001956:	2203      	movs	r2, #3
 8001958:	fa02 f303 	lsl.w	r3, r2, r3
 800195c:	43db      	mvns	r3, r3
 800195e:	69ba      	ldr	r2, [r7, #24]
 8001960:	4013      	ands	r3, r2
 8001962:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f003 0203 	and.w	r2, r3, #3
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	005b      	lsls	r3, r3, #1
 8001970:	fa02 f303 	lsl.w	r3, r2, r3
 8001974:	69ba      	ldr	r2, [r7, #24]
 8001976:	4313      	orrs	r3, r2
 8001978:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	69ba      	ldr	r2, [r7, #24]
 800197e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001988:	2b00      	cmp	r3, #0
 800198a:	f000 80b4 	beq.w	8001af6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800198e:	2300      	movs	r3, #0
 8001990:	60fb      	str	r3, [r7, #12]
 8001992:	4b60      	ldr	r3, [pc, #384]	; (8001b14 <HAL_GPIO_Init+0x30c>)
 8001994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001996:	4a5f      	ldr	r2, [pc, #380]	; (8001b14 <HAL_GPIO_Init+0x30c>)
 8001998:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800199c:	6453      	str	r3, [r2, #68]	; 0x44
 800199e:	4b5d      	ldr	r3, [pc, #372]	; (8001b14 <HAL_GPIO_Init+0x30c>)
 80019a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019a6:	60fb      	str	r3, [r7, #12]
 80019a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019aa:	4a5b      	ldr	r2, [pc, #364]	; (8001b18 <HAL_GPIO_Init+0x310>)
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	089b      	lsrs	r3, r3, #2
 80019b0:	3302      	adds	r3, #2
 80019b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	f003 0303 	and.w	r3, r3, #3
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	220f      	movs	r2, #15
 80019c2:	fa02 f303 	lsl.w	r3, r2, r3
 80019c6:	43db      	mvns	r3, r3
 80019c8:	69ba      	ldr	r2, [r7, #24]
 80019ca:	4013      	ands	r3, r2
 80019cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4a52      	ldr	r2, [pc, #328]	; (8001b1c <HAL_GPIO_Init+0x314>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d02b      	beq.n	8001a2e <HAL_GPIO_Init+0x226>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4a51      	ldr	r2, [pc, #324]	; (8001b20 <HAL_GPIO_Init+0x318>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d025      	beq.n	8001a2a <HAL_GPIO_Init+0x222>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	4a50      	ldr	r2, [pc, #320]	; (8001b24 <HAL_GPIO_Init+0x31c>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d01f      	beq.n	8001a26 <HAL_GPIO_Init+0x21e>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	4a4f      	ldr	r2, [pc, #316]	; (8001b28 <HAL_GPIO_Init+0x320>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d019      	beq.n	8001a22 <HAL_GPIO_Init+0x21a>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	4a4e      	ldr	r2, [pc, #312]	; (8001b2c <HAL_GPIO_Init+0x324>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d013      	beq.n	8001a1e <HAL_GPIO_Init+0x216>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4a4d      	ldr	r2, [pc, #308]	; (8001b30 <HAL_GPIO_Init+0x328>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d00d      	beq.n	8001a1a <HAL_GPIO_Init+0x212>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4a4c      	ldr	r2, [pc, #304]	; (8001b34 <HAL_GPIO_Init+0x32c>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d007      	beq.n	8001a16 <HAL_GPIO_Init+0x20e>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4a4b      	ldr	r2, [pc, #300]	; (8001b38 <HAL_GPIO_Init+0x330>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d101      	bne.n	8001a12 <HAL_GPIO_Init+0x20a>
 8001a0e:	2307      	movs	r3, #7
 8001a10:	e00e      	b.n	8001a30 <HAL_GPIO_Init+0x228>
 8001a12:	2308      	movs	r3, #8
 8001a14:	e00c      	b.n	8001a30 <HAL_GPIO_Init+0x228>
 8001a16:	2306      	movs	r3, #6
 8001a18:	e00a      	b.n	8001a30 <HAL_GPIO_Init+0x228>
 8001a1a:	2305      	movs	r3, #5
 8001a1c:	e008      	b.n	8001a30 <HAL_GPIO_Init+0x228>
 8001a1e:	2304      	movs	r3, #4
 8001a20:	e006      	b.n	8001a30 <HAL_GPIO_Init+0x228>
 8001a22:	2303      	movs	r3, #3
 8001a24:	e004      	b.n	8001a30 <HAL_GPIO_Init+0x228>
 8001a26:	2302      	movs	r3, #2
 8001a28:	e002      	b.n	8001a30 <HAL_GPIO_Init+0x228>
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e000      	b.n	8001a30 <HAL_GPIO_Init+0x228>
 8001a2e:	2300      	movs	r3, #0
 8001a30:	69fa      	ldr	r2, [r7, #28]
 8001a32:	f002 0203 	and.w	r2, r2, #3
 8001a36:	0092      	lsls	r2, r2, #2
 8001a38:	4093      	lsls	r3, r2
 8001a3a:	69ba      	ldr	r2, [r7, #24]
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a40:	4935      	ldr	r1, [pc, #212]	; (8001b18 <HAL_GPIO_Init+0x310>)
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	089b      	lsrs	r3, r3, #2
 8001a46:	3302      	adds	r3, #2
 8001a48:	69ba      	ldr	r2, [r7, #24]
 8001a4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a4e:	4b3b      	ldr	r3, [pc, #236]	; (8001b3c <HAL_GPIO_Init+0x334>)
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	43db      	mvns	r3, r3
 8001a58:	69ba      	ldr	r2, [r7, #24]
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d003      	beq.n	8001a72 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001a6a:	69ba      	ldr	r2, [r7, #24]
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a72:	4a32      	ldr	r2, [pc, #200]	; (8001b3c <HAL_GPIO_Init+0x334>)
 8001a74:	69bb      	ldr	r3, [r7, #24]
 8001a76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a78:	4b30      	ldr	r3, [pc, #192]	; (8001b3c <HAL_GPIO_Init+0x334>)
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	43db      	mvns	r3, r3
 8001a82:	69ba      	ldr	r2, [r7, #24]
 8001a84:	4013      	ands	r3, r2
 8001a86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d003      	beq.n	8001a9c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001a94:	69ba      	ldr	r2, [r7, #24]
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a9c:	4a27      	ldr	r2, [pc, #156]	; (8001b3c <HAL_GPIO_Init+0x334>)
 8001a9e:	69bb      	ldr	r3, [r7, #24]
 8001aa0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001aa2:	4b26      	ldr	r3, [pc, #152]	; (8001b3c <HAL_GPIO_Init+0x334>)
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	43db      	mvns	r3, r3
 8001aac:	69ba      	ldr	r2, [r7, #24]
 8001aae:	4013      	ands	r3, r2
 8001ab0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d003      	beq.n	8001ac6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001abe:	69ba      	ldr	r2, [r7, #24]
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ac6:	4a1d      	ldr	r2, [pc, #116]	; (8001b3c <HAL_GPIO_Init+0x334>)
 8001ac8:	69bb      	ldr	r3, [r7, #24]
 8001aca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001acc:	4b1b      	ldr	r3, [pc, #108]	; (8001b3c <HAL_GPIO_Init+0x334>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	43db      	mvns	r3, r3
 8001ad6:	69ba      	ldr	r2, [r7, #24]
 8001ad8:	4013      	ands	r3, r2
 8001ada:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d003      	beq.n	8001af0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001ae8:	69ba      	ldr	r2, [r7, #24]
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	4313      	orrs	r3, r2
 8001aee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001af0:	4a12      	ldr	r2, [pc, #72]	; (8001b3c <HAL_GPIO_Init+0x334>)
 8001af2:	69bb      	ldr	r3, [r7, #24]
 8001af4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	3301      	adds	r3, #1
 8001afa:	61fb      	str	r3, [r7, #28]
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	2b0f      	cmp	r3, #15
 8001b00:	f67f ae90 	bls.w	8001824 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b04:	bf00      	nop
 8001b06:	bf00      	nop
 8001b08:	3724      	adds	r7, #36	; 0x24
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr
 8001b12:	bf00      	nop
 8001b14:	40023800 	.word	0x40023800
 8001b18:	40013800 	.word	0x40013800
 8001b1c:	40020000 	.word	0x40020000
 8001b20:	40020400 	.word	0x40020400
 8001b24:	40020800 	.word	0x40020800
 8001b28:	40020c00 	.word	0x40020c00
 8001b2c:	40021000 	.word	0x40021000
 8001b30:	40021400 	.word	0x40021400
 8001b34:	40021800 	.word	0x40021800
 8001b38:	40021c00 	.word	0x40021c00
 8001b3c:	40013c00 	.word	0x40013c00

08001b40 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b088      	sub	sp, #32
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d101      	bne.n	8001b52 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e128      	b.n	8001da4 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d109      	bne.n	8001b72 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2200      	movs	r2, #0
 8001b62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	4a90      	ldr	r2, [pc, #576]	; (8001dac <HAL_I2S_Init+0x26c>)
 8001b6a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f7fe fd75 	bl	800065c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2202      	movs	r2, #2
 8001b76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	69db      	ldr	r3, [r3, #28]
 8001b80:	687a      	ldr	r2, [r7, #4]
 8001b82:	6812      	ldr	r2, [r2, #0]
 8001b84:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001b88:	f023 030f 	bic.w	r3, r3, #15
 8001b8c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	2202      	movs	r2, #2
 8001b94:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	695b      	ldr	r3, [r3, #20]
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	d060      	beq.n	8001c60 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	68db      	ldr	r3, [r3, #12]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d102      	bne.n	8001bac <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8001ba6:	2310      	movs	r3, #16
 8001ba8:	617b      	str	r3, [r7, #20]
 8001baa:	e001      	b.n	8001bb0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8001bac:	2320      	movs	r3, #32
 8001bae:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	2b20      	cmp	r3, #32
 8001bb6:	d802      	bhi.n	8001bbe <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	005b      	lsls	r3, r3, #1
 8001bbc:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8001bbe:	2001      	movs	r0, #1
 8001bc0:	f001 fae0 	bl	8003184 <HAL_RCCEx_GetPeriphCLKFreq>
 8001bc4:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	691b      	ldr	r3, [r3, #16]
 8001bca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001bce:	d125      	bne.n	8001c1c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d010      	beq.n	8001bfa <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	68fa      	ldr	r2, [r7, #12]
 8001bde:	fbb2 f2f3 	udiv	r2, r2, r3
 8001be2:	4613      	mov	r3, r2
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	4413      	add	r3, r2
 8001be8:	005b      	lsls	r3, r3, #1
 8001bea:	461a      	mov	r2, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	695b      	ldr	r3, [r3, #20]
 8001bf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bf4:	3305      	adds	r3, #5
 8001bf6:	613b      	str	r3, [r7, #16]
 8001bf8:	e01f      	b.n	8001c3a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	00db      	lsls	r3, r3, #3
 8001bfe:	68fa      	ldr	r2, [r7, #12]
 8001c00:	fbb2 f2f3 	udiv	r2, r2, r3
 8001c04:	4613      	mov	r3, r2
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	4413      	add	r3, r2
 8001c0a:	005b      	lsls	r3, r3, #1
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	695b      	ldr	r3, [r3, #20]
 8001c12:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c16:	3305      	adds	r3, #5
 8001c18:	613b      	str	r3, [r7, #16]
 8001c1a:	e00e      	b.n	8001c3a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001c1c:	68fa      	ldr	r2, [r7, #12]
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	fbb2 f2f3 	udiv	r2, r2, r3
 8001c24:	4613      	mov	r3, r2
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	4413      	add	r3, r2
 8001c2a:	005b      	lsls	r3, r3, #1
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	695b      	ldr	r3, [r3, #20]
 8001c32:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c36:	3305      	adds	r3, #5
 8001c38:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	4a5c      	ldr	r2, [pc, #368]	; (8001db0 <HAL_I2S_Init+0x270>)
 8001c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c42:	08db      	lsrs	r3, r3, #3
 8001c44:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	f003 0301 	and.w	r3, r3, #1
 8001c4c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8001c4e:	693a      	ldr	r2, [r7, #16]
 8001c50:	69bb      	ldr	r3, [r7, #24]
 8001c52:	1ad3      	subs	r3, r2, r3
 8001c54:	085b      	lsrs	r3, r3, #1
 8001c56:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8001c58:	69bb      	ldr	r3, [r7, #24]
 8001c5a:	021b      	lsls	r3, r3, #8
 8001c5c:	61bb      	str	r3, [r7, #24]
 8001c5e:	e003      	b.n	8001c68 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8001c60:	2302      	movs	r3, #2
 8001c62:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8001c64:	2300      	movs	r3, #0
 8001c66:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d902      	bls.n	8001c74 <HAL_I2S_Init+0x134>
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	2bff      	cmp	r3, #255	; 0xff
 8001c72:	d907      	bls.n	8001c84 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c78:	f043 0210 	orr.w	r2, r3, #16
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e08f      	b.n	8001da4 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	691a      	ldr	r2, [r3, #16]
 8001c88:	69bb      	ldr	r3, [r7, #24]
 8001c8a:	ea42 0103 	orr.w	r1, r2, r3
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	69fa      	ldr	r2, [r7, #28]
 8001c94:	430a      	orrs	r2, r1
 8001c96:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	69db      	ldr	r3, [r3, #28]
 8001c9e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001ca2:	f023 030f 	bic.w	r3, r3, #15
 8001ca6:	687a      	ldr	r2, [r7, #4]
 8001ca8:	6851      	ldr	r1, [r2, #4]
 8001caa:	687a      	ldr	r2, [r7, #4]
 8001cac:	6892      	ldr	r2, [r2, #8]
 8001cae:	4311      	orrs	r1, r2
 8001cb0:	687a      	ldr	r2, [r7, #4]
 8001cb2:	68d2      	ldr	r2, [r2, #12]
 8001cb4:	4311      	orrs	r1, r2
 8001cb6:	687a      	ldr	r2, [r7, #4]
 8001cb8:	6992      	ldr	r2, [r2, #24]
 8001cba:	430a      	orrs	r2, r1
 8001cbc:	431a      	orrs	r2, r3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001cc6:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6a1b      	ldr	r3, [r3, #32]
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d161      	bne.n	8001d94 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	4a38      	ldr	r2, [pc, #224]	; (8001db4 <HAL_I2S_Init+0x274>)
 8001cd4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a37      	ldr	r2, [pc, #220]	; (8001db8 <HAL_I2S_Init+0x278>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d101      	bne.n	8001ce4 <HAL_I2S_Init+0x1a4>
 8001ce0:	4b36      	ldr	r3, [pc, #216]	; (8001dbc <HAL_I2S_Init+0x27c>)
 8001ce2:	e001      	b.n	8001ce8 <HAL_I2S_Init+0x1a8>
 8001ce4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001ce8:	69db      	ldr	r3, [r3, #28]
 8001cea:	687a      	ldr	r2, [r7, #4]
 8001cec:	6812      	ldr	r2, [r2, #0]
 8001cee:	4932      	ldr	r1, [pc, #200]	; (8001db8 <HAL_I2S_Init+0x278>)
 8001cf0:	428a      	cmp	r2, r1
 8001cf2:	d101      	bne.n	8001cf8 <HAL_I2S_Init+0x1b8>
 8001cf4:	4a31      	ldr	r2, [pc, #196]	; (8001dbc <HAL_I2S_Init+0x27c>)
 8001cf6:	e001      	b.n	8001cfc <HAL_I2S_Init+0x1bc>
 8001cf8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001cfc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001d00:	f023 030f 	bic.w	r3, r3, #15
 8001d04:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a2b      	ldr	r2, [pc, #172]	; (8001db8 <HAL_I2S_Init+0x278>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d101      	bne.n	8001d14 <HAL_I2S_Init+0x1d4>
 8001d10:	4b2a      	ldr	r3, [pc, #168]	; (8001dbc <HAL_I2S_Init+0x27c>)
 8001d12:	e001      	b.n	8001d18 <HAL_I2S_Init+0x1d8>
 8001d14:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001d18:	2202      	movs	r2, #2
 8001d1a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a25      	ldr	r2, [pc, #148]	; (8001db8 <HAL_I2S_Init+0x278>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d101      	bne.n	8001d2a <HAL_I2S_Init+0x1ea>
 8001d26:	4b25      	ldr	r3, [pc, #148]	; (8001dbc <HAL_I2S_Init+0x27c>)
 8001d28:	e001      	b.n	8001d2e <HAL_I2S_Init+0x1ee>
 8001d2a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001d2e:	69db      	ldr	r3, [r3, #28]
 8001d30:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d3a:	d003      	beq.n	8001d44 <HAL_I2S_Init+0x204>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d103      	bne.n	8001d4c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8001d44:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d48:	613b      	str	r3, [r7, #16]
 8001d4a:	e001      	b.n	8001d50 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	68db      	ldr	r3, [r3, #12]
 8001d62:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001d64:	4313      	orrs	r3, r2
 8001d66:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	699b      	ldr	r3, [r3, #24]
 8001d6c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	b29a      	uxth	r2, r3
 8001d72:	897b      	ldrh	r3, [r7, #10]
 8001d74:	4313      	orrs	r3, r2
 8001d76:	b29b      	uxth	r3, r3
 8001d78:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001d7c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a0d      	ldr	r2, [pc, #52]	; (8001db8 <HAL_I2S_Init+0x278>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d101      	bne.n	8001d8c <HAL_I2S_Init+0x24c>
 8001d88:	4b0c      	ldr	r3, [pc, #48]	; (8001dbc <HAL_I2S_Init+0x27c>)
 8001d8a:	e001      	b.n	8001d90 <HAL_I2S_Init+0x250>
 8001d8c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001d90:	897a      	ldrh	r2, [r7, #10]
 8001d92:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2200      	movs	r2, #0
 8001d98:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8001da2:	2300      	movs	r3, #0
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3720      	adds	r7, #32
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	080020c9 	.word	0x080020c9
 8001db0:	cccccccd 	.word	0xcccccccd
 8001db4:	080021dd 	.word	0x080021dd
 8001db8:	40003800 	.word	0x40003800
 8001dbc:	40003400 	.word	0x40003400

08001dc0 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b086      	sub	sp, #24
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	60f8      	str	r0, [r7, #12]
 8001dc8:	60b9      	str	r1, [r7, #8]
 8001dca:	4613      	mov	r3, r2
 8001dcc:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d002      	beq.n	8001dda <HAL_I2S_Receive_DMA+0x1a>
 8001dd4:	88fb      	ldrh	r3, [r7, #6]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d101      	bne.n	8001dde <HAL_I2S_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e0a1      	b.n	8001f22 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d101      	bne.n	8001dee <HAL_I2S_Receive_DMA+0x2e>
 8001dea:	2302      	movs	r3, #2
 8001dec:	e099      	b.n	8001f22 <HAL_I2S_Receive_DMA+0x162>
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	2201      	movs	r2, #1
 8001df2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d005      	beq.n	8001e0e <HAL_I2S_Receive_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	2200      	movs	r2, #0
 8001e06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 8001e0a:	2302      	movs	r3, #2
 8001e0c:	e089      	b.n	8001f22 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	2204      	movs	r2, #4
 8001e12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pRxBuffPtr = pData;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	68ba      	ldr	r2, [r7, #8]
 8001e20:	62da      	str	r2, [r3, #44]	; 0x2c

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	69db      	ldr	r3, [r3, #28]
 8001e28:	f003 0307 	and.w	r3, r3, #7
 8001e2c:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	2b03      	cmp	r3, #3
 8001e32:	d002      	beq.n	8001e3a <HAL_I2S_Receive_DMA+0x7a>
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	2b05      	cmp	r3, #5
 8001e38:	d10a      	bne.n	8001e50 <HAL_I2S_Receive_DMA+0x90>
  {
    hi2s->RxXferSize = (Size << 1U);
 8001e3a:	88fb      	ldrh	r3, [r7, #6]
 8001e3c:	005b      	lsls	r3, r3, #1
 8001e3e:	b29a      	uxth	r2, r3
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 8001e44:	88fb      	ldrh	r3, [r7, #6]
 8001e46:	005b      	lsls	r3, r3, #1
 8001e48:	b29a      	uxth	r2, r3
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	865a      	strh	r2, [r3, #50]	; 0x32
 8001e4e:	e005      	b.n	8001e5c <HAL_I2S_Receive_DMA+0x9c>
  }
  else
  {
    hi2s->RxXferSize = Size;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	88fa      	ldrh	r2, [r7, #6]
 8001e54:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	88fa      	ldrh	r2, [r7, #6]
 8001e5a:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e60:	4a32      	ldr	r2, [pc, #200]	; (8001f2c <HAL_I2S_Receive_DMA+0x16c>)
 8001e62:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e68:	4a31      	ldr	r2, [pc, #196]	; (8001f30 <HAL_I2S_Receive_DMA+0x170>)
 8001e6a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e70:	4a30      	ldr	r2, [pc, #192]	; (8001f34 <HAL_I2S_Receive_DMA+0x174>)
 8001e72:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	69db      	ldr	r3, [r3, #28]
 8001e7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e7e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001e82:	d10a      	bne.n	8001e9a <HAL_I2S_Receive_DMA+0xda>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001e84:	2300      	movs	r3, #0
 8001e86:	613b      	str	r3, [r7, #16]
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	68db      	ldr	r3, [r3, #12]
 8001e8e:	613b      	str	r3, [r7, #16]
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	613b      	str	r3, [r7, #16]
 8001e98:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	330c      	adds	r3, #12
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eaa:	461a      	mov	r2, r3
                                 hi2s->RxXferSize))
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8001eb0:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8001eb2:	f7ff f955 	bl	8001160 <HAL_DMA_Start_IT>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d00f      	beq.n	8001edc <HAL_I2S_Receive_DMA+0x11c>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ec0:	f043 0208 	orr.w	r2, r3, #8
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	2201      	movs	r2, #1
 8001ecc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e022      	b.n	8001f22 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	69db      	ldr	r3, [r3, #28]
 8001ee2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d107      	bne.n	8001efa <HAL_I2S_Receive_DMA+0x13a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	69da      	ldr	r2, [r3, #28]
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001ef8:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f003 0301 	and.w	r3, r3, #1
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d107      	bne.n	8001f18 <HAL_I2S_Receive_DMA+0x158>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	685a      	ldr	r2, [r3, #4]
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f042 0201 	orr.w	r2, r2, #1
 8001f16:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8001f20:	2300      	movs	r3, #0
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3718      	adds	r7, #24
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	08001fa7 	.word	0x08001fa7
 8001f30:	08001f65 	.word	0x08001f65
 8001f34:	08001fc3 	.word	0x08001fc3

08001f38 <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  /* Call the IrqHandler ISR set during HAL_I2S_INIT */
  hi2s->IrqHandlerISR(hi2s);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	4798      	blx	r3
}
 8001f48:	bf00      	nop
 8001f4a:	3708      	adds	r7, #8
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}

08001f50 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8001f58:	bf00      	nop
 8001f5a:	370c      	adds	r7, #12
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr

08001f64 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b084      	sub	sp, #16
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f70:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	69db      	ldr	r3, [r3, #28]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d10e      	bne.n	8001f98 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	685a      	ldr	r2, [r3, #4]
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f022 0201 	bic.w	r2, r2, #1
 8001f88:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	865a      	strh	r2, [r3, #50]	; 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	2201      	movs	r2, #1
 8001f94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8001f98:	68f8      	ldr	r0, [r7, #12]
 8001f9a:	f7fe fd2d 	bl	80009f8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8001f9e:	bf00      	nop
 8001fa0:	3710      	adds	r7, #16
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}

08001fa6 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8001fa6:	b580      	push	{r7, lr}
 8001fa8:	b084      	sub	sp, #16
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fb2:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8001fb4:	68f8      	ldr	r0, [r7, #12]
 8001fb6:	f7fe fd0f 	bl	80009d8 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8001fba:	bf00      	nop
 8001fbc:	3710      	adds	r7, #16
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}

08001fc2 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8001fc2:	b580      	push	{r7, lr}
 8001fc4:	b084      	sub	sp, #16
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fce:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	685a      	ldr	r2, [r3, #4]
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f022 0203 	bic.w	r2, r2, #3
 8001fde:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	2201      	movs	r2, #1
 8001ff0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ff8:	f043 0208 	orr.w	r2, r3, #8
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8002000:	68f8      	ldr	r0, [r7, #12]
 8002002:	f7ff ffa5 	bl	8001f50 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002006:	bf00      	nop
 8002008:	3710      	adds	r7, #16
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}

0800200e <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800200e:	b580      	push	{r7, lr}
 8002010:	b082      	sub	sp, #8
 8002012:	af00      	add	r7, sp, #0
 8002014:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800201a:	881a      	ldrh	r2, [r3, #0]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002026:	1c9a      	adds	r2, r3, #2
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002030:	b29b      	uxth	r3, r3
 8002032:	3b01      	subs	r3, #1
 8002034:	b29a      	uxth	r2, r3
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800203e:	b29b      	uxth	r3, r3
 8002040:	2b00      	cmp	r3, #0
 8002042:	d10e      	bne.n	8002062 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	685a      	ldr	r2, [r3, #4]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002052:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2201      	movs	r2, #1
 8002058:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	f7fe fcab 	bl	80009b8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002062:	bf00      	nop
 8002064:	3708      	adds	r7, #8
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}

0800206a <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800206a:	b580      	push	{r7, lr}
 800206c:	b082      	sub	sp, #8
 800206e:	af00      	add	r7, sp, #0
 8002070:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	68da      	ldr	r2, [r3, #12]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800207c:	b292      	uxth	r2, r2
 800207e:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002084:	1c9a      	adds	r2, r3, #2
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800208e:	b29b      	uxth	r3, r3
 8002090:	3b01      	subs	r3, #1
 8002092:	b29a      	uxth	r2, r3
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800209c:	b29b      	uxth	r3, r3
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d10e      	bne.n	80020c0 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	685a      	ldr	r2, [r3, #4]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80020b0:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2201      	movs	r2, #1
 80020b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f7fe fc9c 	bl	80009f8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80020c0:	bf00      	nop
 80020c2:	3708      	adds	r7, #8
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}

080020c8 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b086      	sub	sp, #24
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020de:	b2db      	uxtb	r3, r3
 80020e0:	2b04      	cmp	r3, #4
 80020e2:	d13a      	bne.n	800215a <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	f003 0301 	and.w	r3, r3, #1
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d109      	bne.n	8002102 <I2S_IRQHandler+0x3a>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020f8:	2b40      	cmp	r3, #64	; 0x40
 80020fa:	d102      	bne.n	8002102 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	f7ff ffb4 	bl	800206a <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002108:	2b40      	cmp	r3, #64	; 0x40
 800210a:	d126      	bne.n	800215a <I2S_IRQHandler+0x92>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	f003 0320 	and.w	r3, r3, #32
 8002116:	2b20      	cmp	r3, #32
 8002118:	d11f      	bne.n	800215a <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	685a      	ldr	r2, [r3, #4]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002128:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800212a:	2300      	movs	r3, #0
 800212c:	613b      	str	r3, [r7, #16]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	613b      	str	r3, [r7, #16]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	613b      	str	r3, [r7, #16]
 800213e:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2201      	movs	r2, #1
 8002144:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800214c:	f043 0202 	orr.w	r2, r3, #2
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f7ff fefb 	bl	8001f50 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002160:	b2db      	uxtb	r3, r3
 8002162:	2b03      	cmp	r3, #3
 8002164:	d136      	bne.n	80021d4 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	f003 0302 	and.w	r3, r3, #2
 800216c:	2b02      	cmp	r3, #2
 800216e:	d109      	bne.n	8002184 <I2S_IRQHandler+0xbc>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800217a:	2b80      	cmp	r3, #128	; 0x80
 800217c:	d102      	bne.n	8002184 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f7ff ff45 	bl	800200e <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	f003 0308 	and.w	r3, r3, #8
 800218a:	2b08      	cmp	r3, #8
 800218c:	d122      	bne.n	80021d4 <I2S_IRQHandler+0x10c>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f003 0320 	and.w	r3, r3, #32
 8002198:	2b20      	cmp	r3, #32
 800219a:	d11b      	bne.n	80021d4 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	685a      	ldr	r2, [r3, #4]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80021aa:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80021ac:	2300      	movs	r3, #0
 80021ae:	60fb      	str	r3, [r7, #12]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	60fb      	str	r3, [r7, #12]
 80021b8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2201      	movs	r2, #1
 80021be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021c6:	f043 0204 	orr.w	r2, r3, #4
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f7ff febe 	bl	8001f50 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80021d4:	bf00      	nop
 80021d6:	3718      	adds	r7, #24
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}

080021dc <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b088      	sub	sp, #32
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a92      	ldr	r2, [pc, #584]	; (800243c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d101      	bne.n	80021fa <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80021f6:	4b92      	ldr	r3, [pc, #584]	; (8002440 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80021f8:	e001      	b.n	80021fe <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80021fa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a8b      	ldr	r2, [pc, #556]	; (800243c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d101      	bne.n	8002218 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002214:	4b8a      	ldr	r3, [pc, #552]	; (8002440 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002216:	e001      	b.n	800221c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002218:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002228:	d004      	beq.n	8002234 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	2b00      	cmp	r3, #0
 8002230:	f040 8099 	bne.w	8002366 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	f003 0302 	and.w	r3, r3, #2
 800223a:	2b02      	cmp	r3, #2
 800223c:	d107      	bne.n	800224e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002244:	2b00      	cmp	r3, #0
 8002246:	d002      	beq.n	800224e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	f000 f925 	bl	8002498 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800224e:	69bb      	ldr	r3, [r7, #24]
 8002250:	f003 0301 	and.w	r3, r3, #1
 8002254:	2b01      	cmp	r3, #1
 8002256:	d107      	bne.n	8002268 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800225e:	2b00      	cmp	r3, #0
 8002260:	d002      	beq.n	8002268 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f000 f9c8 	bl	80025f8 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002268:	69bb      	ldr	r3, [r7, #24]
 800226a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800226e:	2b40      	cmp	r3, #64	; 0x40
 8002270:	d13a      	bne.n	80022e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	f003 0320 	and.w	r3, r3, #32
 8002278:	2b00      	cmp	r3, #0
 800227a:	d035      	beq.n	80022e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a6e      	ldr	r2, [pc, #440]	; (800243c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d101      	bne.n	800228a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8002286:	4b6e      	ldr	r3, [pc, #440]	; (8002440 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002288:	e001      	b.n	800228e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800228a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800228e:	685a      	ldr	r2, [r3, #4]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4969      	ldr	r1, [pc, #420]	; (800243c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002296:	428b      	cmp	r3, r1
 8002298:	d101      	bne.n	800229e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800229a:	4b69      	ldr	r3, [pc, #420]	; (8002440 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800229c:	e001      	b.n	80022a2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800229e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80022a2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80022a6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	685a      	ldr	r2, [r3, #4]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80022b6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80022b8:	2300      	movs	r3, #0
 80022ba:	60fb      	str	r3, [r7, #12]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	68db      	ldr	r3, [r3, #12]
 80022c2:	60fb      	str	r3, [r7, #12]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	60fb      	str	r3, [r7, #12]
 80022cc:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2201      	movs	r2, #1
 80022d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022da:	f043 0202 	orr.w	r2, r3, #2
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f7ff fe34 	bl	8001f50 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	f003 0308 	and.w	r3, r3, #8
 80022ee:	2b08      	cmp	r3, #8
 80022f0:	f040 80c3 	bne.w	800247a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	f003 0320 	and.w	r3, r3, #32
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	f000 80bd 	beq.w	800247a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	685a      	ldr	r2, [r3, #4]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800230e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a49      	ldr	r2, [pc, #292]	; (800243c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d101      	bne.n	800231e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800231a:	4b49      	ldr	r3, [pc, #292]	; (8002440 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800231c:	e001      	b.n	8002322 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800231e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002322:	685a      	ldr	r2, [r3, #4]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4944      	ldr	r1, [pc, #272]	; (800243c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800232a:	428b      	cmp	r3, r1
 800232c:	d101      	bne.n	8002332 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800232e:	4b44      	ldr	r3, [pc, #272]	; (8002440 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002330:	e001      	b.n	8002336 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8002332:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002336:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800233a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800233c:	2300      	movs	r3, #0
 800233e:	60bb      	str	r3, [r7, #8]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	60bb      	str	r3, [r7, #8]
 8002348:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2201      	movs	r2, #1
 800234e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002356:	f043 0204 	orr.w	r2, r3, #4
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f7ff fdf6 	bl	8001f50 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002364:	e089      	b.n	800247a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8002366:	69bb      	ldr	r3, [r7, #24]
 8002368:	f003 0302 	and.w	r3, r3, #2
 800236c:	2b02      	cmp	r3, #2
 800236e:	d107      	bne.n	8002380 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002376:	2b00      	cmp	r3, #0
 8002378:	d002      	beq.n	8002380 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f000 f8be 	bl	80024fc <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002380:	69fb      	ldr	r3, [r7, #28]
 8002382:	f003 0301 	and.w	r3, r3, #1
 8002386:	2b01      	cmp	r3, #1
 8002388:	d107      	bne.n	800239a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002390:	2b00      	cmp	r3, #0
 8002392:	d002      	beq.n	800239a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	f000 f8fd 	bl	8002594 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023a0:	2b40      	cmp	r3, #64	; 0x40
 80023a2:	d12f      	bne.n	8002404 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	f003 0320 	and.w	r3, r3, #32
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d02a      	beq.n	8002404 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	685a      	ldr	r2, [r3, #4]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80023bc:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a1e      	ldr	r2, [pc, #120]	; (800243c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d101      	bne.n	80023cc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80023c8:	4b1d      	ldr	r3, [pc, #116]	; (8002440 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80023ca:	e001      	b.n	80023d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80023cc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80023d0:	685a      	ldr	r2, [r3, #4]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4919      	ldr	r1, [pc, #100]	; (800243c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80023d8:	428b      	cmp	r3, r1
 80023da:	d101      	bne.n	80023e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80023dc:	4b18      	ldr	r3, [pc, #96]	; (8002440 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80023de:	e001      	b.n	80023e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80023e0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80023e4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80023e8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2201      	movs	r2, #1
 80023ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023f6:	f043 0202 	orr.w	r2, r3, #2
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f7ff fda6 	bl	8001f50 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002404:	69bb      	ldr	r3, [r7, #24]
 8002406:	f003 0308 	and.w	r3, r3, #8
 800240a:	2b08      	cmp	r3, #8
 800240c:	d136      	bne.n	800247c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	f003 0320 	and.w	r3, r3, #32
 8002414:	2b00      	cmp	r3, #0
 8002416:	d031      	beq.n	800247c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a07      	ldr	r2, [pc, #28]	; (800243c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d101      	bne.n	8002426 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8002422:	4b07      	ldr	r3, [pc, #28]	; (8002440 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002424:	e001      	b.n	800242a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8002426:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800242a:	685a      	ldr	r2, [r3, #4]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4902      	ldr	r1, [pc, #8]	; (800243c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002432:	428b      	cmp	r3, r1
 8002434:	d106      	bne.n	8002444 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8002436:	4b02      	ldr	r3, [pc, #8]	; (8002440 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002438:	e006      	b.n	8002448 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800243a:	bf00      	nop
 800243c:	40003800 	.word	0x40003800
 8002440:	40003400 	.word	0x40003400
 8002444:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002448:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800244c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	685a      	ldr	r2, [r3, #4]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800245c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2201      	movs	r2, #1
 8002462:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800246a:	f043 0204 	orr.w	r2, r3, #4
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f7ff fd6c 	bl	8001f50 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002478:	e000      	b.n	800247c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800247a:	bf00      	nop
}
 800247c:	bf00      	nop
 800247e:	3720      	adds	r7, #32
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}

08002484 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800248c:	bf00      	nop
 800248e:	370c      	adds	r7, #12
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr

08002498 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a4:	1c99      	adds	r1, r3, #2
 80024a6:	687a      	ldr	r2, [r7, #4]
 80024a8:	6251      	str	r1, [r2, #36]	; 0x24
 80024aa:	881a      	ldrh	r2, [r3, #0]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024b6:	b29b      	uxth	r3, r3
 80024b8:	3b01      	subs	r3, #1
 80024ba:	b29a      	uxth	r2, r3
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024c4:	b29b      	uxth	r3, r3
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d113      	bne.n	80024f2 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	685a      	ldr	r2, [r3, #4]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80024d8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80024de:	b29b      	uxth	r3, r3
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d106      	bne.n	80024f2 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2201      	movs	r2, #1
 80024e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	f7ff ffc9 	bl	8002484 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80024f2:	bf00      	nop
 80024f4:	3708      	adds	r7, #8
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
	...

080024fc <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002508:	1c99      	adds	r1, r3, #2
 800250a:	687a      	ldr	r2, [r7, #4]
 800250c:	6251      	str	r1, [r2, #36]	; 0x24
 800250e:	8819      	ldrh	r1, [r3, #0]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a1d      	ldr	r2, [pc, #116]	; (800258c <I2SEx_TxISR_I2SExt+0x90>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d101      	bne.n	800251e <I2SEx_TxISR_I2SExt+0x22>
 800251a:	4b1d      	ldr	r3, [pc, #116]	; (8002590 <I2SEx_TxISR_I2SExt+0x94>)
 800251c:	e001      	b.n	8002522 <I2SEx_TxISR_I2SExt+0x26>
 800251e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002522:	460a      	mov	r2, r1
 8002524:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800252a:	b29b      	uxth	r3, r3
 800252c:	3b01      	subs	r3, #1
 800252e:	b29a      	uxth	r2, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002538:	b29b      	uxth	r3, r3
 800253a:	2b00      	cmp	r3, #0
 800253c:	d121      	bne.n	8002582 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a12      	ldr	r2, [pc, #72]	; (800258c <I2SEx_TxISR_I2SExt+0x90>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d101      	bne.n	800254c <I2SEx_TxISR_I2SExt+0x50>
 8002548:	4b11      	ldr	r3, [pc, #68]	; (8002590 <I2SEx_TxISR_I2SExt+0x94>)
 800254a:	e001      	b.n	8002550 <I2SEx_TxISR_I2SExt+0x54>
 800254c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002550:	685a      	ldr	r2, [r3, #4]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	490d      	ldr	r1, [pc, #52]	; (800258c <I2SEx_TxISR_I2SExt+0x90>)
 8002558:	428b      	cmp	r3, r1
 800255a:	d101      	bne.n	8002560 <I2SEx_TxISR_I2SExt+0x64>
 800255c:	4b0c      	ldr	r3, [pc, #48]	; (8002590 <I2SEx_TxISR_I2SExt+0x94>)
 800255e:	e001      	b.n	8002564 <I2SEx_TxISR_I2SExt+0x68>
 8002560:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002564:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002568:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800256e:	b29b      	uxth	r3, r3
 8002570:	2b00      	cmp	r3, #0
 8002572:	d106      	bne.n	8002582 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2201      	movs	r2, #1
 8002578:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	f7ff ff81 	bl	8002484 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002582:	bf00      	nop
 8002584:	3708      	adds	r7, #8
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	40003800 	.word	0x40003800
 8002590:	40003400 	.word	0x40003400

08002594 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b082      	sub	sp, #8
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	68d8      	ldr	r0, [r3, #12]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a6:	1c99      	adds	r1, r3, #2
 80025a8:	687a      	ldr	r2, [r7, #4]
 80025aa:	62d1      	str	r1, [r2, #44]	; 0x2c
 80025ac:	b282      	uxth	r2, r0
 80025ae:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80025b4:	b29b      	uxth	r3, r3
 80025b6:	3b01      	subs	r3, #1
 80025b8:	b29a      	uxth	r2, r3
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80025c2:	b29b      	uxth	r3, r3
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d113      	bne.n	80025f0 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	685a      	ldr	r2, [r3, #4]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80025d6:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025dc:	b29b      	uxth	r3, r3
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d106      	bne.n	80025f0 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2201      	movs	r2, #1
 80025e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f7ff ff4a 	bl	8002484 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80025f0:	bf00      	nop
 80025f2:	3708      	adds	r7, #8
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}

080025f8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a20      	ldr	r2, [pc, #128]	; (8002688 <I2SEx_RxISR_I2SExt+0x90>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d101      	bne.n	800260e <I2SEx_RxISR_I2SExt+0x16>
 800260a:	4b20      	ldr	r3, [pc, #128]	; (800268c <I2SEx_RxISR_I2SExt+0x94>)
 800260c:	e001      	b.n	8002612 <I2SEx_RxISR_I2SExt+0x1a>
 800260e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002612:	68d8      	ldr	r0, [r3, #12]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002618:	1c99      	adds	r1, r3, #2
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	62d1      	str	r1, [r2, #44]	; 0x2c
 800261e:	b282      	uxth	r2, r0
 8002620:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002626:	b29b      	uxth	r3, r3
 8002628:	3b01      	subs	r3, #1
 800262a:	b29a      	uxth	r2, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002634:	b29b      	uxth	r3, r3
 8002636:	2b00      	cmp	r3, #0
 8002638:	d121      	bne.n	800267e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a12      	ldr	r2, [pc, #72]	; (8002688 <I2SEx_RxISR_I2SExt+0x90>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d101      	bne.n	8002648 <I2SEx_RxISR_I2SExt+0x50>
 8002644:	4b11      	ldr	r3, [pc, #68]	; (800268c <I2SEx_RxISR_I2SExt+0x94>)
 8002646:	e001      	b.n	800264c <I2SEx_RxISR_I2SExt+0x54>
 8002648:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800264c:	685a      	ldr	r2, [r3, #4]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	490d      	ldr	r1, [pc, #52]	; (8002688 <I2SEx_RxISR_I2SExt+0x90>)
 8002654:	428b      	cmp	r3, r1
 8002656:	d101      	bne.n	800265c <I2SEx_RxISR_I2SExt+0x64>
 8002658:	4b0c      	ldr	r3, [pc, #48]	; (800268c <I2SEx_RxISR_I2SExt+0x94>)
 800265a:	e001      	b.n	8002660 <I2SEx_RxISR_I2SExt+0x68>
 800265c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002660:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002664:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800266a:	b29b      	uxth	r3, r3
 800266c:	2b00      	cmp	r3, #0
 800266e:	d106      	bne.n	800267e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2201      	movs	r2, #1
 8002674:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002678:	6878      	ldr	r0, [r7, #4]
 800267a:	f7ff ff03 	bl	8002484 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800267e:	bf00      	nop
 8002680:	3708      	adds	r7, #8
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	40003800 	.word	0x40003800
 800268c:	40003400 	.word	0x40003400

08002690 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b086      	sub	sp, #24
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d101      	bne.n	80026a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e267      	b.n	8002b72 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 0301 	and.w	r3, r3, #1
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d075      	beq.n	800279a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026ae:	4b88      	ldr	r3, [pc, #544]	; (80028d0 <HAL_RCC_OscConfig+0x240>)
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	f003 030c 	and.w	r3, r3, #12
 80026b6:	2b04      	cmp	r3, #4
 80026b8:	d00c      	beq.n	80026d4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026ba:	4b85      	ldr	r3, [pc, #532]	; (80028d0 <HAL_RCC_OscConfig+0x240>)
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026c2:	2b08      	cmp	r3, #8
 80026c4:	d112      	bne.n	80026ec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026c6:	4b82      	ldr	r3, [pc, #520]	; (80028d0 <HAL_RCC_OscConfig+0x240>)
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026d2:	d10b      	bne.n	80026ec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026d4:	4b7e      	ldr	r3, [pc, #504]	; (80028d0 <HAL_RCC_OscConfig+0x240>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d05b      	beq.n	8002798 <HAL_RCC_OscConfig+0x108>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d157      	bne.n	8002798 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	e242      	b.n	8002b72 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026f4:	d106      	bne.n	8002704 <HAL_RCC_OscConfig+0x74>
 80026f6:	4b76      	ldr	r3, [pc, #472]	; (80028d0 <HAL_RCC_OscConfig+0x240>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a75      	ldr	r2, [pc, #468]	; (80028d0 <HAL_RCC_OscConfig+0x240>)
 80026fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002700:	6013      	str	r3, [r2, #0]
 8002702:	e01d      	b.n	8002740 <HAL_RCC_OscConfig+0xb0>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800270c:	d10c      	bne.n	8002728 <HAL_RCC_OscConfig+0x98>
 800270e:	4b70      	ldr	r3, [pc, #448]	; (80028d0 <HAL_RCC_OscConfig+0x240>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a6f      	ldr	r2, [pc, #444]	; (80028d0 <HAL_RCC_OscConfig+0x240>)
 8002714:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002718:	6013      	str	r3, [r2, #0]
 800271a:	4b6d      	ldr	r3, [pc, #436]	; (80028d0 <HAL_RCC_OscConfig+0x240>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a6c      	ldr	r2, [pc, #432]	; (80028d0 <HAL_RCC_OscConfig+0x240>)
 8002720:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002724:	6013      	str	r3, [r2, #0]
 8002726:	e00b      	b.n	8002740 <HAL_RCC_OscConfig+0xb0>
 8002728:	4b69      	ldr	r3, [pc, #420]	; (80028d0 <HAL_RCC_OscConfig+0x240>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a68      	ldr	r2, [pc, #416]	; (80028d0 <HAL_RCC_OscConfig+0x240>)
 800272e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002732:	6013      	str	r3, [r2, #0]
 8002734:	4b66      	ldr	r3, [pc, #408]	; (80028d0 <HAL_RCC_OscConfig+0x240>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a65      	ldr	r2, [pc, #404]	; (80028d0 <HAL_RCC_OscConfig+0x240>)
 800273a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800273e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d013      	beq.n	8002770 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002748:	f7fe fb22 	bl	8000d90 <HAL_GetTick>
 800274c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800274e:	e008      	b.n	8002762 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002750:	f7fe fb1e 	bl	8000d90 <HAL_GetTick>
 8002754:	4602      	mov	r2, r0
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	2b64      	cmp	r3, #100	; 0x64
 800275c:	d901      	bls.n	8002762 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800275e:	2303      	movs	r3, #3
 8002760:	e207      	b.n	8002b72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002762:	4b5b      	ldr	r3, [pc, #364]	; (80028d0 <HAL_RCC_OscConfig+0x240>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800276a:	2b00      	cmp	r3, #0
 800276c:	d0f0      	beq.n	8002750 <HAL_RCC_OscConfig+0xc0>
 800276e:	e014      	b.n	800279a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002770:	f7fe fb0e 	bl	8000d90 <HAL_GetTick>
 8002774:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002776:	e008      	b.n	800278a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002778:	f7fe fb0a 	bl	8000d90 <HAL_GetTick>
 800277c:	4602      	mov	r2, r0
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	2b64      	cmp	r3, #100	; 0x64
 8002784:	d901      	bls.n	800278a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002786:	2303      	movs	r3, #3
 8002788:	e1f3      	b.n	8002b72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800278a:	4b51      	ldr	r3, [pc, #324]	; (80028d0 <HAL_RCC_OscConfig+0x240>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d1f0      	bne.n	8002778 <HAL_RCC_OscConfig+0xe8>
 8002796:	e000      	b.n	800279a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002798:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0302 	and.w	r3, r3, #2
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d063      	beq.n	800286e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80027a6:	4b4a      	ldr	r3, [pc, #296]	; (80028d0 <HAL_RCC_OscConfig+0x240>)
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	f003 030c 	and.w	r3, r3, #12
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d00b      	beq.n	80027ca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027b2:	4b47      	ldr	r3, [pc, #284]	; (80028d0 <HAL_RCC_OscConfig+0x240>)
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80027ba:	2b08      	cmp	r3, #8
 80027bc:	d11c      	bne.n	80027f8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027be:	4b44      	ldr	r3, [pc, #272]	; (80028d0 <HAL_RCC_OscConfig+0x240>)
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d116      	bne.n	80027f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027ca:	4b41      	ldr	r3, [pc, #260]	; (80028d0 <HAL_RCC_OscConfig+0x240>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0302 	and.w	r3, r3, #2
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d005      	beq.n	80027e2 <HAL_RCC_OscConfig+0x152>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d001      	beq.n	80027e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e1c7      	b.n	8002b72 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027e2:	4b3b      	ldr	r3, [pc, #236]	; (80028d0 <HAL_RCC_OscConfig+0x240>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	691b      	ldr	r3, [r3, #16]
 80027ee:	00db      	lsls	r3, r3, #3
 80027f0:	4937      	ldr	r1, [pc, #220]	; (80028d0 <HAL_RCC_OscConfig+0x240>)
 80027f2:	4313      	orrs	r3, r2
 80027f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027f6:	e03a      	b.n	800286e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d020      	beq.n	8002842 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002800:	4b34      	ldr	r3, [pc, #208]	; (80028d4 <HAL_RCC_OscConfig+0x244>)
 8002802:	2201      	movs	r2, #1
 8002804:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002806:	f7fe fac3 	bl	8000d90 <HAL_GetTick>
 800280a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800280c:	e008      	b.n	8002820 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800280e:	f7fe fabf 	bl	8000d90 <HAL_GetTick>
 8002812:	4602      	mov	r2, r0
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	2b02      	cmp	r3, #2
 800281a:	d901      	bls.n	8002820 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800281c:	2303      	movs	r3, #3
 800281e:	e1a8      	b.n	8002b72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002820:	4b2b      	ldr	r3, [pc, #172]	; (80028d0 <HAL_RCC_OscConfig+0x240>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 0302 	and.w	r3, r3, #2
 8002828:	2b00      	cmp	r3, #0
 800282a:	d0f0      	beq.n	800280e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800282c:	4b28      	ldr	r3, [pc, #160]	; (80028d0 <HAL_RCC_OscConfig+0x240>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	691b      	ldr	r3, [r3, #16]
 8002838:	00db      	lsls	r3, r3, #3
 800283a:	4925      	ldr	r1, [pc, #148]	; (80028d0 <HAL_RCC_OscConfig+0x240>)
 800283c:	4313      	orrs	r3, r2
 800283e:	600b      	str	r3, [r1, #0]
 8002840:	e015      	b.n	800286e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002842:	4b24      	ldr	r3, [pc, #144]	; (80028d4 <HAL_RCC_OscConfig+0x244>)
 8002844:	2200      	movs	r2, #0
 8002846:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002848:	f7fe faa2 	bl	8000d90 <HAL_GetTick>
 800284c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800284e:	e008      	b.n	8002862 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002850:	f7fe fa9e 	bl	8000d90 <HAL_GetTick>
 8002854:	4602      	mov	r2, r0
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	2b02      	cmp	r3, #2
 800285c:	d901      	bls.n	8002862 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800285e:	2303      	movs	r3, #3
 8002860:	e187      	b.n	8002b72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002862:	4b1b      	ldr	r3, [pc, #108]	; (80028d0 <HAL_RCC_OscConfig+0x240>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 0302 	and.w	r3, r3, #2
 800286a:	2b00      	cmp	r3, #0
 800286c:	d1f0      	bne.n	8002850 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0308 	and.w	r3, r3, #8
 8002876:	2b00      	cmp	r3, #0
 8002878:	d036      	beq.n	80028e8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	695b      	ldr	r3, [r3, #20]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d016      	beq.n	80028b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002882:	4b15      	ldr	r3, [pc, #84]	; (80028d8 <HAL_RCC_OscConfig+0x248>)
 8002884:	2201      	movs	r2, #1
 8002886:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002888:	f7fe fa82 	bl	8000d90 <HAL_GetTick>
 800288c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800288e:	e008      	b.n	80028a2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002890:	f7fe fa7e 	bl	8000d90 <HAL_GetTick>
 8002894:	4602      	mov	r2, r0
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	2b02      	cmp	r3, #2
 800289c:	d901      	bls.n	80028a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800289e:	2303      	movs	r3, #3
 80028a0:	e167      	b.n	8002b72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028a2:	4b0b      	ldr	r3, [pc, #44]	; (80028d0 <HAL_RCC_OscConfig+0x240>)
 80028a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028a6:	f003 0302 	and.w	r3, r3, #2
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d0f0      	beq.n	8002890 <HAL_RCC_OscConfig+0x200>
 80028ae:	e01b      	b.n	80028e8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028b0:	4b09      	ldr	r3, [pc, #36]	; (80028d8 <HAL_RCC_OscConfig+0x248>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028b6:	f7fe fa6b 	bl	8000d90 <HAL_GetTick>
 80028ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028bc:	e00e      	b.n	80028dc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028be:	f7fe fa67 	bl	8000d90 <HAL_GetTick>
 80028c2:	4602      	mov	r2, r0
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	2b02      	cmp	r3, #2
 80028ca:	d907      	bls.n	80028dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80028cc:	2303      	movs	r3, #3
 80028ce:	e150      	b.n	8002b72 <HAL_RCC_OscConfig+0x4e2>
 80028d0:	40023800 	.word	0x40023800
 80028d4:	42470000 	.word	0x42470000
 80028d8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028dc:	4b88      	ldr	r3, [pc, #544]	; (8002b00 <HAL_RCC_OscConfig+0x470>)
 80028de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028e0:	f003 0302 	and.w	r3, r3, #2
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d1ea      	bne.n	80028be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 0304 	and.w	r3, r3, #4
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	f000 8097 	beq.w	8002a24 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028f6:	2300      	movs	r3, #0
 80028f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028fa:	4b81      	ldr	r3, [pc, #516]	; (8002b00 <HAL_RCC_OscConfig+0x470>)
 80028fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d10f      	bne.n	8002926 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002906:	2300      	movs	r3, #0
 8002908:	60bb      	str	r3, [r7, #8]
 800290a:	4b7d      	ldr	r3, [pc, #500]	; (8002b00 <HAL_RCC_OscConfig+0x470>)
 800290c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290e:	4a7c      	ldr	r2, [pc, #496]	; (8002b00 <HAL_RCC_OscConfig+0x470>)
 8002910:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002914:	6413      	str	r3, [r2, #64]	; 0x40
 8002916:	4b7a      	ldr	r3, [pc, #488]	; (8002b00 <HAL_RCC_OscConfig+0x470>)
 8002918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800291e:	60bb      	str	r3, [r7, #8]
 8002920:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002922:	2301      	movs	r3, #1
 8002924:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002926:	4b77      	ldr	r3, [pc, #476]	; (8002b04 <HAL_RCC_OscConfig+0x474>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800292e:	2b00      	cmp	r3, #0
 8002930:	d118      	bne.n	8002964 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002932:	4b74      	ldr	r3, [pc, #464]	; (8002b04 <HAL_RCC_OscConfig+0x474>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a73      	ldr	r2, [pc, #460]	; (8002b04 <HAL_RCC_OscConfig+0x474>)
 8002938:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800293c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800293e:	f7fe fa27 	bl	8000d90 <HAL_GetTick>
 8002942:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002944:	e008      	b.n	8002958 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002946:	f7fe fa23 	bl	8000d90 <HAL_GetTick>
 800294a:	4602      	mov	r2, r0
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	1ad3      	subs	r3, r2, r3
 8002950:	2b02      	cmp	r3, #2
 8002952:	d901      	bls.n	8002958 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002954:	2303      	movs	r3, #3
 8002956:	e10c      	b.n	8002b72 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002958:	4b6a      	ldr	r3, [pc, #424]	; (8002b04 <HAL_RCC_OscConfig+0x474>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002960:	2b00      	cmp	r3, #0
 8002962:	d0f0      	beq.n	8002946 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	2b01      	cmp	r3, #1
 800296a:	d106      	bne.n	800297a <HAL_RCC_OscConfig+0x2ea>
 800296c:	4b64      	ldr	r3, [pc, #400]	; (8002b00 <HAL_RCC_OscConfig+0x470>)
 800296e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002970:	4a63      	ldr	r2, [pc, #396]	; (8002b00 <HAL_RCC_OscConfig+0x470>)
 8002972:	f043 0301 	orr.w	r3, r3, #1
 8002976:	6713      	str	r3, [r2, #112]	; 0x70
 8002978:	e01c      	b.n	80029b4 <HAL_RCC_OscConfig+0x324>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	2b05      	cmp	r3, #5
 8002980:	d10c      	bne.n	800299c <HAL_RCC_OscConfig+0x30c>
 8002982:	4b5f      	ldr	r3, [pc, #380]	; (8002b00 <HAL_RCC_OscConfig+0x470>)
 8002984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002986:	4a5e      	ldr	r2, [pc, #376]	; (8002b00 <HAL_RCC_OscConfig+0x470>)
 8002988:	f043 0304 	orr.w	r3, r3, #4
 800298c:	6713      	str	r3, [r2, #112]	; 0x70
 800298e:	4b5c      	ldr	r3, [pc, #368]	; (8002b00 <HAL_RCC_OscConfig+0x470>)
 8002990:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002992:	4a5b      	ldr	r2, [pc, #364]	; (8002b00 <HAL_RCC_OscConfig+0x470>)
 8002994:	f043 0301 	orr.w	r3, r3, #1
 8002998:	6713      	str	r3, [r2, #112]	; 0x70
 800299a:	e00b      	b.n	80029b4 <HAL_RCC_OscConfig+0x324>
 800299c:	4b58      	ldr	r3, [pc, #352]	; (8002b00 <HAL_RCC_OscConfig+0x470>)
 800299e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029a0:	4a57      	ldr	r2, [pc, #348]	; (8002b00 <HAL_RCC_OscConfig+0x470>)
 80029a2:	f023 0301 	bic.w	r3, r3, #1
 80029a6:	6713      	str	r3, [r2, #112]	; 0x70
 80029a8:	4b55      	ldr	r3, [pc, #340]	; (8002b00 <HAL_RCC_OscConfig+0x470>)
 80029aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ac:	4a54      	ldr	r2, [pc, #336]	; (8002b00 <HAL_RCC_OscConfig+0x470>)
 80029ae:	f023 0304 	bic.w	r3, r3, #4
 80029b2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d015      	beq.n	80029e8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029bc:	f7fe f9e8 	bl	8000d90 <HAL_GetTick>
 80029c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029c2:	e00a      	b.n	80029da <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029c4:	f7fe f9e4 	bl	8000d90 <HAL_GetTick>
 80029c8:	4602      	mov	r2, r0
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d901      	bls.n	80029da <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80029d6:	2303      	movs	r3, #3
 80029d8:	e0cb      	b.n	8002b72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029da:	4b49      	ldr	r3, [pc, #292]	; (8002b00 <HAL_RCC_OscConfig+0x470>)
 80029dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029de:	f003 0302 	and.w	r3, r3, #2
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d0ee      	beq.n	80029c4 <HAL_RCC_OscConfig+0x334>
 80029e6:	e014      	b.n	8002a12 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029e8:	f7fe f9d2 	bl	8000d90 <HAL_GetTick>
 80029ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029ee:	e00a      	b.n	8002a06 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029f0:	f7fe f9ce 	bl	8000d90 <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d901      	bls.n	8002a06 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002a02:	2303      	movs	r3, #3
 8002a04:	e0b5      	b.n	8002b72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a06:	4b3e      	ldr	r3, [pc, #248]	; (8002b00 <HAL_RCC_OscConfig+0x470>)
 8002a08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a0a:	f003 0302 	and.w	r3, r3, #2
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d1ee      	bne.n	80029f0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a12:	7dfb      	ldrb	r3, [r7, #23]
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d105      	bne.n	8002a24 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a18:	4b39      	ldr	r3, [pc, #228]	; (8002b00 <HAL_RCC_OscConfig+0x470>)
 8002a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1c:	4a38      	ldr	r2, [pc, #224]	; (8002b00 <HAL_RCC_OscConfig+0x470>)
 8002a1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a22:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	699b      	ldr	r3, [r3, #24]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	f000 80a1 	beq.w	8002b70 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a2e:	4b34      	ldr	r3, [pc, #208]	; (8002b00 <HAL_RCC_OscConfig+0x470>)
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	f003 030c 	and.w	r3, r3, #12
 8002a36:	2b08      	cmp	r3, #8
 8002a38:	d05c      	beq.n	8002af4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	699b      	ldr	r3, [r3, #24]
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d141      	bne.n	8002ac6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a42:	4b31      	ldr	r3, [pc, #196]	; (8002b08 <HAL_RCC_OscConfig+0x478>)
 8002a44:	2200      	movs	r2, #0
 8002a46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a48:	f7fe f9a2 	bl	8000d90 <HAL_GetTick>
 8002a4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a4e:	e008      	b.n	8002a62 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a50:	f7fe f99e 	bl	8000d90 <HAL_GetTick>
 8002a54:	4602      	mov	r2, r0
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	2b02      	cmp	r3, #2
 8002a5c:	d901      	bls.n	8002a62 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002a5e:	2303      	movs	r3, #3
 8002a60:	e087      	b.n	8002b72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a62:	4b27      	ldr	r3, [pc, #156]	; (8002b00 <HAL_RCC_OscConfig+0x470>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d1f0      	bne.n	8002a50 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	69da      	ldr	r2, [r3, #28]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6a1b      	ldr	r3, [r3, #32]
 8002a76:	431a      	orrs	r2, r3
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a7c:	019b      	lsls	r3, r3, #6
 8002a7e:	431a      	orrs	r2, r3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a84:	085b      	lsrs	r3, r3, #1
 8002a86:	3b01      	subs	r3, #1
 8002a88:	041b      	lsls	r3, r3, #16
 8002a8a:	431a      	orrs	r2, r3
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a90:	061b      	lsls	r3, r3, #24
 8002a92:	491b      	ldr	r1, [pc, #108]	; (8002b00 <HAL_RCC_OscConfig+0x470>)
 8002a94:	4313      	orrs	r3, r2
 8002a96:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a98:	4b1b      	ldr	r3, [pc, #108]	; (8002b08 <HAL_RCC_OscConfig+0x478>)
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a9e:	f7fe f977 	bl	8000d90 <HAL_GetTick>
 8002aa2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002aa4:	e008      	b.n	8002ab8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002aa6:	f7fe f973 	bl	8000d90 <HAL_GetTick>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	1ad3      	subs	r3, r2, r3
 8002ab0:	2b02      	cmp	r3, #2
 8002ab2:	d901      	bls.n	8002ab8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002ab4:	2303      	movs	r3, #3
 8002ab6:	e05c      	b.n	8002b72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ab8:	4b11      	ldr	r3, [pc, #68]	; (8002b00 <HAL_RCC_OscConfig+0x470>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d0f0      	beq.n	8002aa6 <HAL_RCC_OscConfig+0x416>
 8002ac4:	e054      	b.n	8002b70 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ac6:	4b10      	ldr	r3, [pc, #64]	; (8002b08 <HAL_RCC_OscConfig+0x478>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002acc:	f7fe f960 	bl	8000d90 <HAL_GetTick>
 8002ad0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ad2:	e008      	b.n	8002ae6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ad4:	f7fe f95c 	bl	8000d90 <HAL_GetTick>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d901      	bls.n	8002ae6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	e045      	b.n	8002b72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ae6:	4b06      	ldr	r3, [pc, #24]	; (8002b00 <HAL_RCC_OscConfig+0x470>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d1f0      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x444>
 8002af2:	e03d      	b.n	8002b70 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	699b      	ldr	r3, [r3, #24]
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d107      	bne.n	8002b0c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	e038      	b.n	8002b72 <HAL_RCC_OscConfig+0x4e2>
 8002b00:	40023800 	.word	0x40023800
 8002b04:	40007000 	.word	0x40007000
 8002b08:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b0c:	4b1b      	ldr	r3, [pc, #108]	; (8002b7c <HAL_RCC_OscConfig+0x4ec>)
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	699b      	ldr	r3, [r3, #24]
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d028      	beq.n	8002b6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d121      	bne.n	8002b6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d11a      	bne.n	8002b6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b36:	68fa      	ldr	r2, [r7, #12]
 8002b38:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002b42:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d111      	bne.n	8002b6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b52:	085b      	lsrs	r3, r3, #1
 8002b54:	3b01      	subs	r3, #1
 8002b56:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d107      	bne.n	8002b6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b66:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d001      	beq.n	8002b70 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e000      	b.n	8002b72 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002b70:	2300      	movs	r3, #0
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3718      	adds	r7, #24
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	40023800 	.word	0x40023800

08002b80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b084      	sub	sp, #16
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d101      	bne.n	8002b94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e0cc      	b.n	8002d2e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b94:	4b68      	ldr	r3, [pc, #416]	; (8002d38 <HAL_RCC_ClockConfig+0x1b8>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0307 	and.w	r3, r3, #7
 8002b9c:	683a      	ldr	r2, [r7, #0]
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	d90c      	bls.n	8002bbc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ba2:	4b65      	ldr	r3, [pc, #404]	; (8002d38 <HAL_RCC_ClockConfig+0x1b8>)
 8002ba4:	683a      	ldr	r2, [r7, #0]
 8002ba6:	b2d2      	uxtb	r2, r2
 8002ba8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002baa:	4b63      	ldr	r3, [pc, #396]	; (8002d38 <HAL_RCC_ClockConfig+0x1b8>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 0307 	and.w	r3, r3, #7
 8002bb2:	683a      	ldr	r2, [r7, #0]
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d001      	beq.n	8002bbc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e0b8      	b.n	8002d2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 0302 	and.w	r3, r3, #2
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d020      	beq.n	8002c0a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 0304 	and.w	r3, r3, #4
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d005      	beq.n	8002be0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002bd4:	4b59      	ldr	r3, [pc, #356]	; (8002d3c <HAL_RCC_ClockConfig+0x1bc>)
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	4a58      	ldr	r2, [pc, #352]	; (8002d3c <HAL_RCC_ClockConfig+0x1bc>)
 8002bda:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002bde:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 0308 	and.w	r3, r3, #8
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d005      	beq.n	8002bf8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002bec:	4b53      	ldr	r3, [pc, #332]	; (8002d3c <HAL_RCC_ClockConfig+0x1bc>)
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	4a52      	ldr	r2, [pc, #328]	; (8002d3c <HAL_RCC_ClockConfig+0x1bc>)
 8002bf2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002bf6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bf8:	4b50      	ldr	r3, [pc, #320]	; (8002d3c <HAL_RCC_ClockConfig+0x1bc>)
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	494d      	ldr	r1, [pc, #308]	; (8002d3c <HAL_RCC_ClockConfig+0x1bc>)
 8002c06:	4313      	orrs	r3, r2
 8002c08:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0301 	and.w	r3, r3, #1
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d044      	beq.n	8002ca0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d107      	bne.n	8002c2e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c1e:	4b47      	ldr	r3, [pc, #284]	; (8002d3c <HAL_RCC_ClockConfig+0x1bc>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d119      	bne.n	8002c5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e07f      	b.n	8002d2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d003      	beq.n	8002c3e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c3a:	2b03      	cmp	r3, #3
 8002c3c:	d107      	bne.n	8002c4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c3e:	4b3f      	ldr	r3, [pc, #252]	; (8002d3c <HAL_RCC_ClockConfig+0x1bc>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d109      	bne.n	8002c5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e06f      	b.n	8002d2e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c4e:	4b3b      	ldr	r3, [pc, #236]	; (8002d3c <HAL_RCC_ClockConfig+0x1bc>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0302 	and.w	r3, r3, #2
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d101      	bne.n	8002c5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e067      	b.n	8002d2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c5e:	4b37      	ldr	r3, [pc, #220]	; (8002d3c <HAL_RCC_ClockConfig+0x1bc>)
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	f023 0203 	bic.w	r2, r3, #3
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	4934      	ldr	r1, [pc, #208]	; (8002d3c <HAL_RCC_ClockConfig+0x1bc>)
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c70:	f7fe f88e 	bl	8000d90 <HAL_GetTick>
 8002c74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c76:	e00a      	b.n	8002c8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c78:	f7fe f88a 	bl	8000d90 <HAL_GetTick>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d901      	bls.n	8002c8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	e04f      	b.n	8002d2e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c8e:	4b2b      	ldr	r3, [pc, #172]	; (8002d3c <HAL_RCC_ClockConfig+0x1bc>)
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	f003 020c 	and.w	r2, r3, #12
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d1eb      	bne.n	8002c78 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ca0:	4b25      	ldr	r3, [pc, #148]	; (8002d38 <HAL_RCC_ClockConfig+0x1b8>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 0307 	and.w	r3, r3, #7
 8002ca8:	683a      	ldr	r2, [r7, #0]
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d20c      	bcs.n	8002cc8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cae:	4b22      	ldr	r3, [pc, #136]	; (8002d38 <HAL_RCC_ClockConfig+0x1b8>)
 8002cb0:	683a      	ldr	r2, [r7, #0]
 8002cb2:	b2d2      	uxtb	r2, r2
 8002cb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cb6:	4b20      	ldr	r3, [pc, #128]	; (8002d38 <HAL_RCC_ClockConfig+0x1b8>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 0307 	and.w	r3, r3, #7
 8002cbe:	683a      	ldr	r2, [r7, #0]
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d001      	beq.n	8002cc8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e032      	b.n	8002d2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 0304 	and.w	r3, r3, #4
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d008      	beq.n	8002ce6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cd4:	4b19      	ldr	r3, [pc, #100]	; (8002d3c <HAL_RCC_ClockConfig+0x1bc>)
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	4916      	ldr	r1, [pc, #88]	; (8002d3c <HAL_RCC_ClockConfig+0x1bc>)
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 0308 	and.w	r3, r3, #8
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d009      	beq.n	8002d06 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002cf2:	4b12      	ldr	r3, [pc, #72]	; (8002d3c <HAL_RCC_ClockConfig+0x1bc>)
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	691b      	ldr	r3, [r3, #16]
 8002cfe:	00db      	lsls	r3, r3, #3
 8002d00:	490e      	ldr	r1, [pc, #56]	; (8002d3c <HAL_RCC_ClockConfig+0x1bc>)
 8002d02:	4313      	orrs	r3, r2
 8002d04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d06:	f000 f821 	bl	8002d4c <HAL_RCC_GetSysClockFreq>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	4b0b      	ldr	r3, [pc, #44]	; (8002d3c <HAL_RCC_ClockConfig+0x1bc>)
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	091b      	lsrs	r3, r3, #4
 8002d12:	f003 030f 	and.w	r3, r3, #15
 8002d16:	490a      	ldr	r1, [pc, #40]	; (8002d40 <HAL_RCC_ClockConfig+0x1c0>)
 8002d18:	5ccb      	ldrb	r3, [r1, r3]
 8002d1a:	fa22 f303 	lsr.w	r3, r2, r3
 8002d1e:	4a09      	ldr	r2, [pc, #36]	; (8002d44 <HAL_RCC_ClockConfig+0x1c4>)
 8002d20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002d22:	4b09      	ldr	r3, [pc, #36]	; (8002d48 <HAL_RCC_ClockConfig+0x1c8>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4618      	mov	r0, r3
 8002d28:	f7fd ffee 	bl	8000d08 <HAL_InitTick>

  return HAL_OK;
 8002d2c:	2300      	movs	r3, #0
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3710      	adds	r7, #16
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	40023c00 	.word	0x40023c00
 8002d3c:	40023800 	.word	0x40023800
 8002d40:	08006968 	.word	0x08006968
 8002d44:	20000400 	.word	0x20000400
 8002d48:	20000404 	.word	0x20000404

08002d4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d50:	b094      	sub	sp, #80	; 0x50
 8002d52:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002d54:	2300      	movs	r3, #0
 8002d56:	647b      	str	r3, [r7, #68]	; 0x44
 8002d58:	2300      	movs	r3, #0
 8002d5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002d60:	2300      	movs	r3, #0
 8002d62:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d64:	4b79      	ldr	r3, [pc, #484]	; (8002f4c <HAL_RCC_GetSysClockFreq+0x200>)
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	f003 030c 	and.w	r3, r3, #12
 8002d6c:	2b08      	cmp	r3, #8
 8002d6e:	d00d      	beq.n	8002d8c <HAL_RCC_GetSysClockFreq+0x40>
 8002d70:	2b08      	cmp	r3, #8
 8002d72:	f200 80e1 	bhi.w	8002f38 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d002      	beq.n	8002d80 <HAL_RCC_GetSysClockFreq+0x34>
 8002d7a:	2b04      	cmp	r3, #4
 8002d7c:	d003      	beq.n	8002d86 <HAL_RCC_GetSysClockFreq+0x3a>
 8002d7e:	e0db      	b.n	8002f38 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d80:	4b73      	ldr	r3, [pc, #460]	; (8002f50 <HAL_RCC_GetSysClockFreq+0x204>)
 8002d82:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002d84:	e0db      	b.n	8002f3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d86:	4b73      	ldr	r3, [pc, #460]	; (8002f54 <HAL_RCC_GetSysClockFreq+0x208>)
 8002d88:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002d8a:	e0d8      	b.n	8002f3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d8c:	4b6f      	ldr	r3, [pc, #444]	; (8002f4c <HAL_RCC_GetSysClockFreq+0x200>)
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d94:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d96:	4b6d      	ldr	r3, [pc, #436]	; (8002f4c <HAL_RCC_GetSysClockFreq+0x200>)
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d063      	beq.n	8002e6a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002da2:	4b6a      	ldr	r3, [pc, #424]	; (8002f4c <HAL_RCC_GetSysClockFreq+0x200>)
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	099b      	lsrs	r3, r3, #6
 8002da8:	2200      	movs	r2, #0
 8002daa:	63bb      	str	r3, [r7, #56]	; 0x38
 8002dac:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002db0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002db4:	633b      	str	r3, [r7, #48]	; 0x30
 8002db6:	2300      	movs	r3, #0
 8002db8:	637b      	str	r3, [r7, #52]	; 0x34
 8002dba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002dbe:	4622      	mov	r2, r4
 8002dc0:	462b      	mov	r3, r5
 8002dc2:	f04f 0000 	mov.w	r0, #0
 8002dc6:	f04f 0100 	mov.w	r1, #0
 8002dca:	0159      	lsls	r1, r3, #5
 8002dcc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002dd0:	0150      	lsls	r0, r2, #5
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	460b      	mov	r3, r1
 8002dd6:	4621      	mov	r1, r4
 8002dd8:	1a51      	subs	r1, r2, r1
 8002dda:	6139      	str	r1, [r7, #16]
 8002ddc:	4629      	mov	r1, r5
 8002dde:	eb63 0301 	sbc.w	r3, r3, r1
 8002de2:	617b      	str	r3, [r7, #20]
 8002de4:	f04f 0200 	mov.w	r2, #0
 8002de8:	f04f 0300 	mov.w	r3, #0
 8002dec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002df0:	4659      	mov	r1, fp
 8002df2:	018b      	lsls	r3, r1, #6
 8002df4:	4651      	mov	r1, sl
 8002df6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002dfa:	4651      	mov	r1, sl
 8002dfc:	018a      	lsls	r2, r1, #6
 8002dfe:	4651      	mov	r1, sl
 8002e00:	ebb2 0801 	subs.w	r8, r2, r1
 8002e04:	4659      	mov	r1, fp
 8002e06:	eb63 0901 	sbc.w	r9, r3, r1
 8002e0a:	f04f 0200 	mov.w	r2, #0
 8002e0e:	f04f 0300 	mov.w	r3, #0
 8002e12:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e16:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e1a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e1e:	4690      	mov	r8, r2
 8002e20:	4699      	mov	r9, r3
 8002e22:	4623      	mov	r3, r4
 8002e24:	eb18 0303 	adds.w	r3, r8, r3
 8002e28:	60bb      	str	r3, [r7, #8]
 8002e2a:	462b      	mov	r3, r5
 8002e2c:	eb49 0303 	adc.w	r3, r9, r3
 8002e30:	60fb      	str	r3, [r7, #12]
 8002e32:	f04f 0200 	mov.w	r2, #0
 8002e36:	f04f 0300 	mov.w	r3, #0
 8002e3a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002e3e:	4629      	mov	r1, r5
 8002e40:	024b      	lsls	r3, r1, #9
 8002e42:	4621      	mov	r1, r4
 8002e44:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002e48:	4621      	mov	r1, r4
 8002e4a:	024a      	lsls	r2, r1, #9
 8002e4c:	4610      	mov	r0, r2
 8002e4e:	4619      	mov	r1, r3
 8002e50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e52:	2200      	movs	r2, #0
 8002e54:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e56:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002e58:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002e5c:	f7fd f9b4 	bl	80001c8 <__aeabi_uldivmod>
 8002e60:	4602      	mov	r2, r0
 8002e62:	460b      	mov	r3, r1
 8002e64:	4613      	mov	r3, r2
 8002e66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e68:	e058      	b.n	8002f1c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e6a:	4b38      	ldr	r3, [pc, #224]	; (8002f4c <HAL_RCC_GetSysClockFreq+0x200>)
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	099b      	lsrs	r3, r3, #6
 8002e70:	2200      	movs	r2, #0
 8002e72:	4618      	mov	r0, r3
 8002e74:	4611      	mov	r1, r2
 8002e76:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002e7a:	623b      	str	r3, [r7, #32]
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	627b      	str	r3, [r7, #36]	; 0x24
 8002e80:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002e84:	4642      	mov	r2, r8
 8002e86:	464b      	mov	r3, r9
 8002e88:	f04f 0000 	mov.w	r0, #0
 8002e8c:	f04f 0100 	mov.w	r1, #0
 8002e90:	0159      	lsls	r1, r3, #5
 8002e92:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e96:	0150      	lsls	r0, r2, #5
 8002e98:	4602      	mov	r2, r0
 8002e9a:	460b      	mov	r3, r1
 8002e9c:	4641      	mov	r1, r8
 8002e9e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002ea2:	4649      	mov	r1, r9
 8002ea4:	eb63 0b01 	sbc.w	fp, r3, r1
 8002ea8:	f04f 0200 	mov.w	r2, #0
 8002eac:	f04f 0300 	mov.w	r3, #0
 8002eb0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002eb4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002eb8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002ebc:	ebb2 040a 	subs.w	r4, r2, sl
 8002ec0:	eb63 050b 	sbc.w	r5, r3, fp
 8002ec4:	f04f 0200 	mov.w	r2, #0
 8002ec8:	f04f 0300 	mov.w	r3, #0
 8002ecc:	00eb      	lsls	r3, r5, #3
 8002ece:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ed2:	00e2      	lsls	r2, r4, #3
 8002ed4:	4614      	mov	r4, r2
 8002ed6:	461d      	mov	r5, r3
 8002ed8:	4643      	mov	r3, r8
 8002eda:	18e3      	adds	r3, r4, r3
 8002edc:	603b      	str	r3, [r7, #0]
 8002ede:	464b      	mov	r3, r9
 8002ee0:	eb45 0303 	adc.w	r3, r5, r3
 8002ee4:	607b      	str	r3, [r7, #4]
 8002ee6:	f04f 0200 	mov.w	r2, #0
 8002eea:	f04f 0300 	mov.w	r3, #0
 8002eee:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002ef2:	4629      	mov	r1, r5
 8002ef4:	028b      	lsls	r3, r1, #10
 8002ef6:	4621      	mov	r1, r4
 8002ef8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002efc:	4621      	mov	r1, r4
 8002efe:	028a      	lsls	r2, r1, #10
 8002f00:	4610      	mov	r0, r2
 8002f02:	4619      	mov	r1, r3
 8002f04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f06:	2200      	movs	r2, #0
 8002f08:	61bb      	str	r3, [r7, #24]
 8002f0a:	61fa      	str	r2, [r7, #28]
 8002f0c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f10:	f7fd f95a 	bl	80001c8 <__aeabi_uldivmod>
 8002f14:	4602      	mov	r2, r0
 8002f16:	460b      	mov	r3, r1
 8002f18:	4613      	mov	r3, r2
 8002f1a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002f1c:	4b0b      	ldr	r3, [pc, #44]	; (8002f4c <HAL_RCC_GetSysClockFreq+0x200>)
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	0c1b      	lsrs	r3, r3, #16
 8002f22:	f003 0303 	and.w	r3, r3, #3
 8002f26:	3301      	adds	r3, #1
 8002f28:	005b      	lsls	r3, r3, #1
 8002f2a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002f2c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002f2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f30:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f34:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f36:	e002      	b.n	8002f3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f38:	4b05      	ldr	r3, [pc, #20]	; (8002f50 <HAL_RCC_GetSysClockFreq+0x204>)
 8002f3a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3750      	adds	r7, #80	; 0x50
 8002f44:	46bd      	mov	sp, r7
 8002f46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f4a:	bf00      	nop
 8002f4c:	40023800 	.word	0x40023800
 8002f50:	00f42400 	.word	0x00f42400
 8002f54:	007a1200 	.word	0x007a1200

08002f58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f5c:	4b03      	ldr	r3, [pc, #12]	; (8002f6c <HAL_RCC_GetHCLKFreq+0x14>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr
 8002f6a:	bf00      	nop
 8002f6c:	20000400 	.word	0x20000400

08002f70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002f74:	f7ff fff0 	bl	8002f58 <HAL_RCC_GetHCLKFreq>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	4b05      	ldr	r3, [pc, #20]	; (8002f90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	0a9b      	lsrs	r3, r3, #10
 8002f80:	f003 0307 	and.w	r3, r3, #7
 8002f84:	4903      	ldr	r1, [pc, #12]	; (8002f94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f86:	5ccb      	ldrb	r3, [r1, r3]
 8002f88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	bd80      	pop	{r7, pc}
 8002f90:	40023800 	.word	0x40023800
 8002f94:	08006978 	.word	0x08006978

08002f98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002f9c:	f7ff ffdc 	bl	8002f58 <HAL_RCC_GetHCLKFreq>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	4b05      	ldr	r3, [pc, #20]	; (8002fb8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	0b5b      	lsrs	r3, r3, #13
 8002fa8:	f003 0307 	and.w	r3, r3, #7
 8002fac:	4903      	ldr	r1, [pc, #12]	; (8002fbc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fae:	5ccb      	ldrb	r3, [r1, r3]
 8002fb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	bd80      	pop	{r7, pc}
 8002fb8:	40023800 	.word	0x40023800
 8002fbc:	08006978 	.word	0x08006978

08002fc0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b086      	sub	sp, #24
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 0301 	and.w	r3, r3, #1
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d105      	bne.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d035      	beq.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002fe8:	4b62      	ldr	r3, [pc, #392]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002fea:	2200      	movs	r2, #0
 8002fec:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002fee:	f7fd fecf 	bl	8000d90 <HAL_GetTick>
 8002ff2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002ff4:	e008      	b.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002ff6:	f7fd fecb 	bl	8000d90 <HAL_GetTick>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	1ad3      	subs	r3, r2, r3
 8003000:	2b02      	cmp	r3, #2
 8003002:	d901      	bls.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003004:	2303      	movs	r3, #3
 8003006:	e0b0      	b.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003008:	4b5b      	ldr	r3, [pc, #364]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003010:	2b00      	cmp	r3, #0
 8003012:	d1f0      	bne.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	019a      	lsls	r2, r3, #6
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	071b      	lsls	r3, r3, #28
 8003020:	4955      	ldr	r1, [pc, #340]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003022:	4313      	orrs	r3, r2
 8003024:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003028:	4b52      	ldr	r3, [pc, #328]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800302a:	2201      	movs	r2, #1
 800302c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800302e:	f7fd feaf 	bl	8000d90 <HAL_GetTick>
 8003032:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003034:	e008      	b.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003036:	f7fd feab 	bl	8000d90 <HAL_GetTick>
 800303a:	4602      	mov	r2, r0
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	1ad3      	subs	r3, r2, r3
 8003040:	2b02      	cmp	r3, #2
 8003042:	d901      	bls.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003044:	2303      	movs	r3, #3
 8003046:	e090      	b.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003048:	4b4b      	ldr	r3, [pc, #300]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003050:	2b00      	cmp	r3, #0
 8003052:	d0f0      	beq.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 0302 	and.w	r3, r3, #2
 800305c:	2b00      	cmp	r3, #0
 800305e:	f000 8083 	beq.w	8003168 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003062:	2300      	movs	r3, #0
 8003064:	60fb      	str	r3, [r7, #12]
 8003066:	4b44      	ldr	r3, [pc, #272]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306a:	4a43      	ldr	r2, [pc, #268]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800306c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003070:	6413      	str	r3, [r2, #64]	; 0x40
 8003072:	4b41      	ldr	r3, [pc, #260]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003076:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800307a:	60fb      	str	r3, [r7, #12]
 800307c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800307e:	4b3f      	ldr	r3, [pc, #252]	; (800317c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a3e      	ldr	r2, [pc, #248]	; (800317c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003084:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003088:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800308a:	f7fd fe81 	bl	8000d90 <HAL_GetTick>
 800308e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003090:	e008      	b.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003092:	f7fd fe7d 	bl	8000d90 <HAL_GetTick>
 8003096:	4602      	mov	r2, r0
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	2b02      	cmp	r3, #2
 800309e:	d901      	bls.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80030a0:	2303      	movs	r3, #3
 80030a2:	e062      	b.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80030a4:	4b35      	ldr	r3, [pc, #212]	; (800317c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d0f0      	beq.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80030b0:	4b31      	ldr	r3, [pc, #196]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80030b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030b8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d02f      	beq.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030c8:	693a      	ldr	r2, [r7, #16]
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d028      	beq.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80030ce:	4b2a      	ldr	r3, [pc, #168]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80030d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030d6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80030d8:	4b29      	ldr	r3, [pc, #164]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80030da:	2201      	movs	r2, #1
 80030dc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80030de:	4b28      	ldr	r3, [pc, #160]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80030e0:	2200      	movs	r2, #0
 80030e2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80030e4:	4a24      	ldr	r2, [pc, #144]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80030ea:	4b23      	ldr	r3, [pc, #140]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80030ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ee:	f003 0301 	and.w	r3, r3, #1
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d114      	bne.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80030f6:	f7fd fe4b 	bl	8000d90 <HAL_GetTick>
 80030fa:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030fc:	e00a      	b.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030fe:	f7fd fe47 	bl	8000d90 <HAL_GetTick>
 8003102:	4602      	mov	r2, r0
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	1ad3      	subs	r3, r2, r3
 8003108:	f241 3288 	movw	r2, #5000	; 0x1388
 800310c:	4293      	cmp	r3, r2
 800310e:	d901      	bls.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003110:	2303      	movs	r3, #3
 8003112:	e02a      	b.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003114:	4b18      	ldr	r3, [pc, #96]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003116:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003118:	f003 0302 	and.w	r3, r3, #2
 800311c:	2b00      	cmp	r3, #0
 800311e:	d0ee      	beq.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003128:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800312c:	d10d      	bne.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800312e:	4b12      	ldr	r3, [pc, #72]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	68db      	ldr	r3, [r3, #12]
 800313a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800313e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003142:	490d      	ldr	r1, [pc, #52]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003144:	4313      	orrs	r3, r2
 8003146:	608b      	str	r3, [r1, #8]
 8003148:	e005      	b.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800314a:	4b0b      	ldr	r3, [pc, #44]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	4a0a      	ldr	r2, [pc, #40]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003150:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003154:	6093      	str	r3, [r2, #8]
 8003156:	4b08      	ldr	r3, [pc, #32]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003158:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	68db      	ldr	r3, [r3, #12]
 800315e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003162:	4905      	ldr	r1, [pc, #20]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003164:	4313      	orrs	r3, r2
 8003166:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003168:	2300      	movs	r3, #0
}
 800316a:	4618      	mov	r0, r3
 800316c:	3718      	adds	r7, #24
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	42470068 	.word	0x42470068
 8003178:	40023800 	.word	0x40023800
 800317c:	40007000 	.word	0x40007000
 8003180:	42470e40 	.word	0x42470e40

08003184 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003184:	b480      	push	{r7}
 8003186:	b087      	sub	sp, #28
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800318c:	2300      	movs	r3, #0
 800318e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8003190:	2300      	movs	r3, #0
 8003192:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8003194:	2300      	movs	r3, #0
 8003196:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8003198:	2300      	movs	r3, #0
 800319a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d13e      	bne.n	8003220 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80031a2:	4b23      	ldr	r3, [pc, #140]	; (8003230 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80031aa:	60fb      	str	r3, [r7, #12]
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d005      	beq.n	80031be <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d12f      	bne.n	8003218 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80031b8:	4b1e      	ldr	r3, [pc, #120]	; (8003234 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80031ba:	617b      	str	r3, [r7, #20]
          break;
 80031bc:	e02f      	b.n	800321e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80031be:	4b1c      	ldr	r3, [pc, #112]	; (8003230 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031ca:	d108      	bne.n	80031de <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80031cc:	4b18      	ldr	r3, [pc, #96]	; (8003230 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031d4:	4a18      	ldr	r2, [pc, #96]	; (8003238 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80031d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80031da:	613b      	str	r3, [r7, #16]
 80031dc:	e007      	b.n	80031ee <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80031de:	4b14      	ldr	r3, [pc, #80]	; (8003230 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031e6:	4a15      	ldr	r2, [pc, #84]	; (800323c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80031e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80031ec:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80031ee:	4b10      	ldr	r3, [pc, #64]	; (8003230 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80031f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031f4:	099b      	lsrs	r3, r3, #6
 80031f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	fb02 f303 	mul.w	r3, r2, r3
 8003200:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003202:	4b0b      	ldr	r3, [pc, #44]	; (8003230 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003204:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003208:	0f1b      	lsrs	r3, r3, #28
 800320a:	f003 0307 	and.w	r3, r3, #7
 800320e:	68ba      	ldr	r2, [r7, #8]
 8003210:	fbb2 f3f3 	udiv	r3, r2, r3
 8003214:	617b      	str	r3, [r7, #20]
          break;
 8003216:	e002      	b.n	800321e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8003218:	2300      	movs	r3, #0
 800321a:	617b      	str	r3, [r7, #20]
          break;
 800321c:	bf00      	nop
        }
      }
      break;
 800321e:	bf00      	nop
    }
  }
  return frequency;
 8003220:	697b      	ldr	r3, [r7, #20]
}
 8003222:	4618      	mov	r0, r3
 8003224:	371c      	adds	r7, #28
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr
 800322e:	bf00      	nop
 8003230:	40023800 	.word	0x40023800
 8003234:	00bb8000 	.word	0x00bb8000
 8003238:	007a1200 	.word	0x007a1200
 800323c:	00f42400 	.word	0x00f42400

08003240 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b082      	sub	sp, #8
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d101      	bne.n	8003252 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e03f      	b.n	80032d2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003258:	b2db      	uxtb	r3, r3
 800325a:	2b00      	cmp	r3, #0
 800325c:	d106      	bne.n	800326c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2200      	movs	r2, #0
 8003262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f7fd fc76 	bl	8000b58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2224      	movs	r2, #36	; 0x24
 8003270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	68da      	ldr	r2, [r3, #12]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003282:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003284:	6878      	ldr	r0, [r7, #4]
 8003286:	f000 fd7b 	bl	8003d80 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	691a      	ldr	r2, [r3, #16]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003298:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	695a      	ldr	r2, [r3, #20]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80032a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	68da      	ldr	r2, [r3, #12]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80032b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2220      	movs	r2, #32
 80032c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2220      	movs	r2, #32
 80032cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80032d0:	2300      	movs	r3, #0
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3708      	adds	r7, #8
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}

080032da <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032da:	b580      	push	{r7, lr}
 80032dc:	b08a      	sub	sp, #40	; 0x28
 80032de:	af02      	add	r7, sp, #8
 80032e0:	60f8      	str	r0, [r7, #12]
 80032e2:	60b9      	str	r1, [r7, #8]
 80032e4:	603b      	str	r3, [r7, #0]
 80032e6:	4613      	mov	r3, r2
 80032e8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80032ea:	2300      	movs	r3, #0
 80032ec:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	2b20      	cmp	r3, #32
 80032f8:	d17c      	bne.n	80033f4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d002      	beq.n	8003306 <HAL_UART_Transmit+0x2c>
 8003300:	88fb      	ldrh	r3, [r7, #6]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d101      	bne.n	800330a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e075      	b.n	80033f6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003310:	2b01      	cmp	r3, #1
 8003312:	d101      	bne.n	8003318 <HAL_UART_Transmit+0x3e>
 8003314:	2302      	movs	r3, #2
 8003316:	e06e      	b.n	80033f6 <HAL_UART_Transmit+0x11c>
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2201      	movs	r2, #1
 800331c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2200      	movs	r2, #0
 8003324:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2221      	movs	r2, #33	; 0x21
 800332a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800332e:	f7fd fd2f 	bl	8000d90 <HAL_GetTick>
 8003332:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	88fa      	ldrh	r2, [r7, #6]
 8003338:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	88fa      	ldrh	r2, [r7, #6]
 800333e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003348:	d108      	bne.n	800335c <HAL_UART_Transmit+0x82>
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	691b      	ldr	r3, [r3, #16]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d104      	bne.n	800335c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003352:	2300      	movs	r3, #0
 8003354:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	61bb      	str	r3, [r7, #24]
 800335a:	e003      	b.n	8003364 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003360:	2300      	movs	r3, #0
 8003362:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2200      	movs	r2, #0
 8003368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800336c:	e02a      	b.n	80033c4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	9300      	str	r3, [sp, #0]
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	2200      	movs	r2, #0
 8003376:	2180      	movs	r1, #128	; 0x80
 8003378:	68f8      	ldr	r0, [r7, #12]
 800337a:	f000 faf9 	bl	8003970 <UART_WaitOnFlagUntilTimeout>
 800337e:	4603      	mov	r3, r0
 8003380:	2b00      	cmp	r3, #0
 8003382:	d001      	beq.n	8003388 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003384:	2303      	movs	r3, #3
 8003386:	e036      	b.n	80033f6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003388:	69fb      	ldr	r3, [r7, #28]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d10b      	bne.n	80033a6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800338e:	69bb      	ldr	r3, [r7, #24]
 8003390:	881b      	ldrh	r3, [r3, #0]
 8003392:	461a      	mov	r2, r3
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800339c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800339e:	69bb      	ldr	r3, [r7, #24]
 80033a0:	3302      	adds	r3, #2
 80033a2:	61bb      	str	r3, [r7, #24]
 80033a4:	e007      	b.n	80033b6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	781a      	ldrb	r2, [r3, #0]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80033b0:	69fb      	ldr	r3, [r7, #28]
 80033b2:	3301      	adds	r3, #1
 80033b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	3b01      	subs	r3, #1
 80033be:	b29a      	uxth	r2, r3
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80033c8:	b29b      	uxth	r3, r3
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d1cf      	bne.n	800336e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	9300      	str	r3, [sp, #0]
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	2200      	movs	r2, #0
 80033d6:	2140      	movs	r1, #64	; 0x40
 80033d8:	68f8      	ldr	r0, [r7, #12]
 80033da:	f000 fac9 	bl	8003970 <UART_WaitOnFlagUntilTimeout>
 80033de:	4603      	mov	r3, r0
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d001      	beq.n	80033e8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80033e4:	2303      	movs	r3, #3
 80033e6:	e006      	b.n	80033f6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2220      	movs	r2, #32
 80033ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80033f0:	2300      	movs	r3, #0
 80033f2:	e000      	b.n	80033f6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80033f4:	2302      	movs	r3, #2
  }
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3720      	adds	r7, #32
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}
	...

08003400 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b0ba      	sub	sp, #232	; 0xe8
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	695b      	ldr	r3, [r3, #20]
 8003422:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003426:	2300      	movs	r3, #0
 8003428:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800342c:	2300      	movs	r3, #0
 800342e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003432:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003436:	f003 030f 	and.w	r3, r3, #15
 800343a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800343e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003442:	2b00      	cmp	r3, #0
 8003444:	d10f      	bne.n	8003466 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003446:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800344a:	f003 0320 	and.w	r3, r3, #32
 800344e:	2b00      	cmp	r3, #0
 8003450:	d009      	beq.n	8003466 <HAL_UART_IRQHandler+0x66>
 8003452:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003456:	f003 0320 	and.w	r3, r3, #32
 800345a:	2b00      	cmp	r3, #0
 800345c:	d003      	beq.n	8003466 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f000 fbd3 	bl	8003c0a <UART_Receive_IT>
      return;
 8003464:	e256      	b.n	8003914 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003466:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800346a:	2b00      	cmp	r3, #0
 800346c:	f000 80de 	beq.w	800362c <HAL_UART_IRQHandler+0x22c>
 8003470:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003474:	f003 0301 	and.w	r3, r3, #1
 8003478:	2b00      	cmp	r3, #0
 800347a:	d106      	bne.n	800348a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800347c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003480:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003484:	2b00      	cmp	r3, #0
 8003486:	f000 80d1 	beq.w	800362c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800348a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800348e:	f003 0301 	and.w	r3, r3, #1
 8003492:	2b00      	cmp	r3, #0
 8003494:	d00b      	beq.n	80034ae <HAL_UART_IRQHandler+0xae>
 8003496:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800349a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d005      	beq.n	80034ae <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a6:	f043 0201 	orr.w	r2, r3, #1
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80034ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034b2:	f003 0304 	and.w	r3, r3, #4
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d00b      	beq.n	80034d2 <HAL_UART_IRQHandler+0xd2>
 80034ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80034be:	f003 0301 	and.w	r3, r3, #1
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d005      	beq.n	80034d2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ca:	f043 0202 	orr.w	r2, r3, #2
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80034d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034d6:	f003 0302 	and.w	r3, r3, #2
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d00b      	beq.n	80034f6 <HAL_UART_IRQHandler+0xf6>
 80034de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80034e2:	f003 0301 	and.w	r3, r3, #1
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d005      	beq.n	80034f6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ee:	f043 0204 	orr.w	r2, r3, #4
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80034f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034fa:	f003 0308 	and.w	r3, r3, #8
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d011      	beq.n	8003526 <HAL_UART_IRQHandler+0x126>
 8003502:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003506:	f003 0320 	and.w	r3, r3, #32
 800350a:	2b00      	cmp	r3, #0
 800350c:	d105      	bne.n	800351a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800350e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003512:	f003 0301 	and.w	r3, r3, #1
 8003516:	2b00      	cmp	r3, #0
 8003518:	d005      	beq.n	8003526 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351e:	f043 0208 	orr.w	r2, r3, #8
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352a:	2b00      	cmp	r3, #0
 800352c:	f000 81ed 	beq.w	800390a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003530:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003534:	f003 0320 	and.w	r3, r3, #32
 8003538:	2b00      	cmp	r3, #0
 800353a:	d008      	beq.n	800354e <HAL_UART_IRQHandler+0x14e>
 800353c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003540:	f003 0320 	and.w	r3, r3, #32
 8003544:	2b00      	cmp	r3, #0
 8003546:	d002      	beq.n	800354e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003548:	6878      	ldr	r0, [r7, #4]
 800354a:	f000 fb5e 	bl	8003c0a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	695b      	ldr	r3, [r3, #20]
 8003554:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003558:	2b40      	cmp	r3, #64	; 0x40
 800355a:	bf0c      	ite	eq
 800355c:	2301      	moveq	r3, #1
 800355e:	2300      	movne	r3, #0
 8003560:	b2db      	uxtb	r3, r3
 8003562:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356a:	f003 0308 	and.w	r3, r3, #8
 800356e:	2b00      	cmp	r3, #0
 8003570:	d103      	bne.n	800357a <HAL_UART_IRQHandler+0x17a>
 8003572:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003576:	2b00      	cmp	r3, #0
 8003578:	d04f      	beq.n	800361a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f000 fa66 	bl	8003a4c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	695b      	ldr	r3, [r3, #20]
 8003586:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800358a:	2b40      	cmp	r3, #64	; 0x40
 800358c:	d141      	bne.n	8003612 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	3314      	adds	r3, #20
 8003594:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003598:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800359c:	e853 3f00 	ldrex	r3, [r3]
 80035a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80035a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80035a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	3314      	adds	r3, #20
 80035b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80035ba:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80035be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80035c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80035ca:	e841 2300 	strex	r3, r2, [r1]
 80035ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80035d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d1d9      	bne.n	800358e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d013      	beq.n	800360a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035e6:	4a7d      	ldr	r2, [pc, #500]	; (80037dc <HAL_UART_IRQHandler+0x3dc>)
 80035e8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ee:	4618      	mov	r0, r3
 80035f0:	f7fd fe7e 	bl	80012f0 <HAL_DMA_Abort_IT>
 80035f4:	4603      	mov	r3, r0
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d016      	beq.n	8003628 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003600:	687a      	ldr	r2, [r7, #4]
 8003602:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003604:	4610      	mov	r0, r2
 8003606:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003608:	e00e      	b.n	8003628 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f000 f99a 	bl	8003944 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003610:	e00a      	b.n	8003628 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f000 f996 	bl	8003944 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003618:	e006      	b.n	8003628 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f000 f992 	bl	8003944 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2200      	movs	r2, #0
 8003624:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003626:	e170      	b.n	800390a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003628:	bf00      	nop
    return;
 800362a:	e16e      	b.n	800390a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003630:	2b01      	cmp	r3, #1
 8003632:	f040 814a 	bne.w	80038ca <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003636:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800363a:	f003 0310 	and.w	r3, r3, #16
 800363e:	2b00      	cmp	r3, #0
 8003640:	f000 8143 	beq.w	80038ca <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003644:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003648:	f003 0310 	and.w	r3, r3, #16
 800364c:	2b00      	cmp	r3, #0
 800364e:	f000 813c 	beq.w	80038ca <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003652:	2300      	movs	r3, #0
 8003654:	60bb      	str	r3, [r7, #8]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	60bb      	str	r3, [r7, #8]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	60bb      	str	r3, [r7, #8]
 8003666:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	695b      	ldr	r3, [r3, #20]
 800366e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003672:	2b40      	cmp	r3, #64	; 0x40
 8003674:	f040 80b4 	bne.w	80037e0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003684:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003688:	2b00      	cmp	r3, #0
 800368a:	f000 8140 	beq.w	800390e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003692:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003696:	429a      	cmp	r2, r3
 8003698:	f080 8139 	bcs.w	800390e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80036a2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036a8:	69db      	ldr	r3, [r3, #28]
 80036aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036ae:	f000 8088 	beq.w	80037c2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	330c      	adds	r3, #12
 80036b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80036c0:	e853 3f00 	ldrex	r3, [r3]
 80036c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80036c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80036cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	330c      	adds	r3, #12
 80036da:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80036de:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80036e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036e6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80036ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80036ee:	e841 2300 	strex	r3, r2, [r1]
 80036f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80036f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d1d9      	bne.n	80036b2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	3314      	adds	r3, #20
 8003704:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003706:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003708:	e853 3f00 	ldrex	r3, [r3]
 800370c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800370e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003710:	f023 0301 	bic.w	r3, r3, #1
 8003714:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	3314      	adds	r3, #20
 800371e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003722:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003726:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003728:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800372a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800372e:	e841 2300 	strex	r3, r2, [r1]
 8003732:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003734:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003736:	2b00      	cmp	r3, #0
 8003738:	d1e1      	bne.n	80036fe <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	3314      	adds	r3, #20
 8003740:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003742:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003744:	e853 3f00 	ldrex	r3, [r3]
 8003748:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800374a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800374c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003750:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	3314      	adds	r3, #20
 800375a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800375e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003760:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003762:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003764:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003766:	e841 2300 	strex	r3, r2, [r1]
 800376a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800376c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800376e:	2b00      	cmp	r3, #0
 8003770:	d1e3      	bne.n	800373a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2220      	movs	r2, #32
 8003776:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2200      	movs	r2, #0
 800377e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	330c      	adds	r3, #12
 8003786:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003788:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800378a:	e853 3f00 	ldrex	r3, [r3]
 800378e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003790:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003792:	f023 0310 	bic.w	r3, r3, #16
 8003796:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	330c      	adds	r3, #12
 80037a0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80037a4:	65ba      	str	r2, [r7, #88]	; 0x58
 80037a6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037a8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80037aa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80037ac:	e841 2300 	strex	r3, r2, [r1]
 80037b0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80037b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d1e3      	bne.n	8003780 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037bc:	4618      	mov	r0, r3
 80037be:	f7fd fd27 	bl	8001210 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80037ca:	b29b      	uxth	r3, r3
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	b29b      	uxth	r3, r3
 80037d0:	4619      	mov	r1, r3
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f000 f8c0 	bl	8003958 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80037d8:	e099      	b.n	800390e <HAL_UART_IRQHandler+0x50e>
 80037da:	bf00      	nop
 80037dc:	08003b13 	.word	0x08003b13
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80037e8:	b29b      	uxth	r3, r3
 80037ea:	1ad3      	subs	r3, r2, r3
 80037ec:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80037f4:	b29b      	uxth	r3, r3
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	f000 808b 	beq.w	8003912 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80037fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003800:	2b00      	cmp	r3, #0
 8003802:	f000 8086 	beq.w	8003912 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	330c      	adds	r3, #12
 800380c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800380e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003810:	e853 3f00 	ldrex	r3, [r3]
 8003814:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003816:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003818:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800381c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	330c      	adds	r3, #12
 8003826:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800382a:	647a      	str	r2, [r7, #68]	; 0x44
 800382c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800382e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003830:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003832:	e841 2300 	strex	r3, r2, [r1]
 8003836:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003838:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800383a:	2b00      	cmp	r3, #0
 800383c:	d1e3      	bne.n	8003806 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	3314      	adds	r3, #20
 8003844:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003848:	e853 3f00 	ldrex	r3, [r3]
 800384c:	623b      	str	r3, [r7, #32]
   return(result);
 800384e:	6a3b      	ldr	r3, [r7, #32]
 8003850:	f023 0301 	bic.w	r3, r3, #1
 8003854:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	3314      	adds	r3, #20
 800385e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003862:	633a      	str	r2, [r7, #48]	; 0x30
 8003864:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003866:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003868:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800386a:	e841 2300 	strex	r3, r2, [r1]
 800386e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003872:	2b00      	cmp	r3, #0
 8003874:	d1e3      	bne.n	800383e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2220      	movs	r2, #32
 800387a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2200      	movs	r2, #0
 8003882:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	330c      	adds	r3, #12
 800388a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	e853 3f00 	ldrex	r3, [r3]
 8003892:	60fb      	str	r3, [r7, #12]
   return(result);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f023 0310 	bic.w	r3, r3, #16
 800389a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	330c      	adds	r3, #12
 80038a4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80038a8:	61fa      	str	r2, [r7, #28]
 80038aa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038ac:	69b9      	ldr	r1, [r7, #24]
 80038ae:	69fa      	ldr	r2, [r7, #28]
 80038b0:	e841 2300 	strex	r3, r2, [r1]
 80038b4:	617b      	str	r3, [r7, #20]
   return(result);
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d1e3      	bne.n	8003884 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80038bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80038c0:	4619      	mov	r1, r3
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f000 f848 	bl	8003958 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80038c8:	e023      	b.n	8003912 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80038ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d009      	beq.n	80038ea <HAL_UART_IRQHandler+0x4ea>
 80038d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d003      	beq.n	80038ea <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f000 f929 	bl	8003b3a <UART_Transmit_IT>
    return;
 80038e8:	e014      	b.n	8003914 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80038ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d00e      	beq.n	8003914 <HAL_UART_IRQHandler+0x514>
 80038f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d008      	beq.n	8003914 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f000 f969 	bl	8003bda <UART_EndTransmit_IT>
    return;
 8003908:	e004      	b.n	8003914 <HAL_UART_IRQHandler+0x514>
    return;
 800390a:	bf00      	nop
 800390c:	e002      	b.n	8003914 <HAL_UART_IRQHandler+0x514>
      return;
 800390e:	bf00      	nop
 8003910:	e000      	b.n	8003914 <HAL_UART_IRQHandler+0x514>
      return;
 8003912:	bf00      	nop
  }
}
 8003914:	37e8      	adds	r7, #232	; 0xe8
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}
 800391a:	bf00      	nop

0800391c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800391c:	b480      	push	{r7}
 800391e:	b083      	sub	sp, #12
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003924:	bf00      	nop
 8003926:	370c      	adds	r7, #12
 8003928:	46bd      	mov	sp, r7
 800392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392e:	4770      	bx	lr

08003930 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003930:	b480      	push	{r7}
 8003932:	b083      	sub	sp, #12
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003938:	bf00      	nop
 800393a:	370c      	adds	r7, #12
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr

08003944 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003944:	b480      	push	{r7}
 8003946:	b083      	sub	sp, #12
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800394c:	bf00      	nop
 800394e:	370c      	adds	r7, #12
 8003950:	46bd      	mov	sp, r7
 8003952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003956:	4770      	bx	lr

08003958 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003958:	b480      	push	{r7}
 800395a:	b083      	sub	sp, #12
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	460b      	mov	r3, r1
 8003962:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003964:	bf00      	nop
 8003966:	370c      	adds	r7, #12
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr

08003970 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b090      	sub	sp, #64	; 0x40
 8003974:	af00      	add	r7, sp, #0
 8003976:	60f8      	str	r0, [r7, #12]
 8003978:	60b9      	str	r1, [r7, #8]
 800397a:	603b      	str	r3, [r7, #0]
 800397c:	4613      	mov	r3, r2
 800397e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003980:	e050      	b.n	8003a24 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003982:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003984:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003988:	d04c      	beq.n	8003a24 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800398a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800398c:	2b00      	cmp	r3, #0
 800398e:	d007      	beq.n	80039a0 <UART_WaitOnFlagUntilTimeout+0x30>
 8003990:	f7fd f9fe 	bl	8000d90 <HAL_GetTick>
 8003994:	4602      	mov	r2, r0
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800399c:	429a      	cmp	r2, r3
 800399e:	d241      	bcs.n	8003a24 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	330c      	adds	r3, #12
 80039a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039aa:	e853 3f00 	ldrex	r3, [r3]
 80039ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80039b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80039b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	330c      	adds	r3, #12
 80039be:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80039c0:	637a      	str	r2, [r7, #52]	; 0x34
 80039c2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039c4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80039c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80039c8:	e841 2300 	strex	r3, r2, [r1]
 80039cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80039ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d1e5      	bne.n	80039a0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	3314      	adds	r3, #20
 80039da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	e853 3f00 	ldrex	r3, [r3]
 80039e2:	613b      	str	r3, [r7, #16]
   return(result);
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	f023 0301 	bic.w	r3, r3, #1
 80039ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	3314      	adds	r3, #20
 80039f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80039f4:	623a      	str	r2, [r7, #32]
 80039f6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039f8:	69f9      	ldr	r1, [r7, #28]
 80039fa:	6a3a      	ldr	r2, [r7, #32]
 80039fc:	e841 2300 	strex	r3, r2, [r1]
 8003a00:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a02:	69bb      	ldr	r3, [r7, #24]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d1e5      	bne.n	80039d4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2220      	movs	r2, #32
 8003a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2220      	movs	r2, #32
 8003a14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003a20:	2303      	movs	r3, #3
 8003a22:	e00f      	b.n	8003a44 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	68ba      	ldr	r2, [r7, #8]
 8003a30:	429a      	cmp	r2, r3
 8003a32:	bf0c      	ite	eq
 8003a34:	2301      	moveq	r3, #1
 8003a36:	2300      	movne	r3, #0
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	461a      	mov	r2, r3
 8003a3c:	79fb      	ldrb	r3, [r7, #7]
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d09f      	beq.n	8003982 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003a42:	2300      	movs	r3, #0
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	3740      	adds	r7, #64	; 0x40
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}

08003a4c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b095      	sub	sp, #84	; 0x54
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	330c      	adds	r3, #12
 8003a5a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a5e:	e853 3f00 	ldrex	r3, [r3]
 8003a62:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a66:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003a6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	330c      	adds	r3, #12
 8003a72:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003a74:	643a      	str	r2, [r7, #64]	; 0x40
 8003a76:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a78:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003a7a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003a7c:	e841 2300 	strex	r3, r2, [r1]
 8003a80:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003a82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d1e5      	bne.n	8003a54 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	3314      	adds	r3, #20
 8003a8e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a90:	6a3b      	ldr	r3, [r7, #32]
 8003a92:	e853 3f00 	ldrex	r3, [r3]
 8003a96:	61fb      	str	r3, [r7, #28]
   return(result);
 8003a98:	69fb      	ldr	r3, [r7, #28]
 8003a9a:	f023 0301 	bic.w	r3, r3, #1
 8003a9e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	3314      	adds	r3, #20
 8003aa6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003aa8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003aaa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003aae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ab0:	e841 2300 	strex	r3, r2, [r1]
 8003ab4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d1e5      	bne.n	8003a88 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d119      	bne.n	8003af8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	330c      	adds	r3, #12
 8003aca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	e853 3f00 	ldrex	r3, [r3]
 8003ad2:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	f023 0310 	bic.w	r3, r3, #16
 8003ada:	647b      	str	r3, [r7, #68]	; 0x44
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	330c      	adds	r3, #12
 8003ae2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003ae4:	61ba      	str	r2, [r7, #24]
 8003ae6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ae8:	6979      	ldr	r1, [r7, #20]
 8003aea:	69ba      	ldr	r2, [r7, #24]
 8003aec:	e841 2300 	strex	r3, r2, [r1]
 8003af0:	613b      	str	r3, [r7, #16]
   return(result);
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d1e5      	bne.n	8003ac4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2220      	movs	r2, #32
 8003afc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2200      	movs	r2, #0
 8003b04:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003b06:	bf00      	nop
 8003b08:	3754      	adds	r7, #84	; 0x54
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr

08003b12 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003b12:	b580      	push	{r7, lr}
 8003b14:	b084      	sub	sp, #16
 8003b16:	af00      	add	r7, sp, #0
 8003b18:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b1e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2200      	movs	r2, #0
 8003b24:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003b2c:	68f8      	ldr	r0, [r7, #12]
 8003b2e:	f7ff ff09 	bl	8003944 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b32:	bf00      	nop
 8003b34:	3710      	adds	r7, #16
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}

08003b3a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003b3a:	b480      	push	{r7}
 8003b3c:	b085      	sub	sp, #20
 8003b3e:	af00      	add	r7, sp, #0
 8003b40:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	2b21      	cmp	r3, #33	; 0x21
 8003b4c:	d13e      	bne.n	8003bcc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b56:	d114      	bne.n	8003b82 <UART_Transmit_IT+0x48>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	691b      	ldr	r3, [r3, #16]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d110      	bne.n	8003b82 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6a1b      	ldr	r3, [r3, #32]
 8003b64:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	881b      	ldrh	r3, [r3, #0]
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b74:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6a1b      	ldr	r3, [r3, #32]
 8003b7a:	1c9a      	adds	r2, r3, #2
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	621a      	str	r2, [r3, #32]
 8003b80:	e008      	b.n	8003b94 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6a1b      	ldr	r3, [r3, #32]
 8003b86:	1c59      	adds	r1, r3, #1
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	6211      	str	r1, [r2, #32]
 8003b8c:	781a      	ldrb	r2, [r3, #0]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b98:	b29b      	uxth	r3, r3
 8003b9a:	3b01      	subs	r3, #1
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	687a      	ldr	r2, [r7, #4]
 8003ba0:	4619      	mov	r1, r3
 8003ba2:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d10f      	bne.n	8003bc8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	68da      	ldr	r2, [r3, #12]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003bb6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	68da      	ldr	r2, [r3, #12]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003bc6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	e000      	b.n	8003bce <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003bcc:	2302      	movs	r3, #2
  }
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3714      	adds	r7, #20
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd8:	4770      	bx	lr

08003bda <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003bda:	b580      	push	{r7, lr}
 8003bdc:	b082      	sub	sp, #8
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	68da      	ldr	r2, [r3, #12]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bf0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2220      	movs	r2, #32
 8003bf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f7ff fe8e 	bl	800391c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003c00:	2300      	movs	r3, #0
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3708      	adds	r7, #8
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}

08003c0a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003c0a:	b580      	push	{r7, lr}
 8003c0c:	b08c      	sub	sp, #48	; 0x30
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	2b22      	cmp	r3, #34	; 0x22
 8003c1c:	f040 80ab 	bne.w	8003d76 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c28:	d117      	bne.n	8003c5a <UART_Receive_IT+0x50>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	691b      	ldr	r3, [r3, #16]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d113      	bne.n	8003c5a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003c32:	2300      	movs	r3, #0
 8003c34:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c3a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	b29b      	uxth	r3, r3
 8003c44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c48:	b29a      	uxth	r2, r3
 8003c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c4c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c52:	1c9a      	adds	r2, r3, #2
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	629a      	str	r2, [r3, #40]	; 0x28
 8003c58:	e026      	b.n	8003ca8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003c60:	2300      	movs	r3, #0
 8003c62:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c6c:	d007      	beq.n	8003c7e <UART_Receive_IT+0x74>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d10a      	bne.n	8003c8c <UART_Receive_IT+0x82>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	691b      	ldr	r3, [r3, #16]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d106      	bne.n	8003c8c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	b2da      	uxtb	r2, r3
 8003c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c88:	701a      	strb	r2, [r3, #0]
 8003c8a:	e008      	b.n	8003c9e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c98:	b2da      	uxtb	r2, r3
 8003c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c9c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ca2:	1c5a      	adds	r2, r3, #1
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003cac:	b29b      	uxth	r3, r3
 8003cae:	3b01      	subs	r3, #1
 8003cb0:	b29b      	uxth	r3, r3
 8003cb2:	687a      	ldr	r2, [r7, #4]
 8003cb4:	4619      	mov	r1, r3
 8003cb6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d15a      	bne.n	8003d72 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	68da      	ldr	r2, [r3, #12]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f022 0220 	bic.w	r2, r2, #32
 8003cca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	68da      	ldr	r2, [r3, #12]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003cda:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	695a      	ldr	r2, [r3, #20]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f022 0201 	bic.w	r2, r2, #1
 8003cea:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2220      	movs	r2, #32
 8003cf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d135      	bne.n	8003d68 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	330c      	adds	r3, #12
 8003d08:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	e853 3f00 	ldrex	r3, [r3]
 8003d10:	613b      	str	r3, [r7, #16]
   return(result);
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	f023 0310 	bic.w	r3, r3, #16
 8003d18:	627b      	str	r3, [r7, #36]	; 0x24
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	330c      	adds	r3, #12
 8003d20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d22:	623a      	str	r2, [r7, #32]
 8003d24:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d26:	69f9      	ldr	r1, [r7, #28]
 8003d28:	6a3a      	ldr	r2, [r7, #32]
 8003d2a:	e841 2300 	strex	r3, r2, [r1]
 8003d2e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003d30:	69bb      	ldr	r3, [r7, #24]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d1e5      	bne.n	8003d02 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 0310 	and.w	r3, r3, #16
 8003d40:	2b10      	cmp	r3, #16
 8003d42:	d10a      	bne.n	8003d5a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003d44:	2300      	movs	r3, #0
 8003d46:	60fb      	str	r3, [r7, #12]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	60fb      	str	r3, [r7, #12]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	60fb      	str	r3, [r7, #12]
 8003d58:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003d5e:	4619      	mov	r1, r3
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	f7ff fdf9 	bl	8003958 <HAL_UARTEx_RxEventCallback>
 8003d66:	e002      	b.n	8003d6e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	f7ff fde1 	bl	8003930 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	e002      	b.n	8003d78 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003d72:	2300      	movs	r3, #0
 8003d74:	e000      	b.n	8003d78 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003d76:	2302      	movs	r3, #2
  }
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3730      	adds	r7, #48	; 0x30
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}

08003d80 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d84:	b0c0      	sub	sp, #256	; 0x100
 8003d86:	af00      	add	r7, sp, #0
 8003d88:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	691b      	ldr	r3, [r3, #16]
 8003d94:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d9c:	68d9      	ldr	r1, [r3, #12]
 8003d9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	ea40 0301 	orr.w	r3, r0, r1
 8003da8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003daa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dae:	689a      	ldr	r2, [r3, #8]
 8003db0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003db4:	691b      	ldr	r3, [r3, #16]
 8003db6:	431a      	orrs	r2, r3
 8003db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dbc:	695b      	ldr	r3, [r3, #20]
 8003dbe:	431a      	orrs	r2, r3
 8003dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dc4:	69db      	ldr	r3, [r3, #28]
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	68db      	ldr	r3, [r3, #12]
 8003dd4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003dd8:	f021 010c 	bic.w	r1, r1, #12
 8003ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003de6:	430b      	orrs	r3, r1
 8003de8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003dea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	695b      	ldr	r3, [r3, #20]
 8003df2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003df6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dfa:	6999      	ldr	r1, [r3, #24]
 8003dfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	ea40 0301 	orr.w	r3, r0, r1
 8003e06:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003e08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	4b8f      	ldr	r3, [pc, #572]	; (800404c <UART_SetConfig+0x2cc>)
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d005      	beq.n	8003e20 <UART_SetConfig+0xa0>
 8003e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	4b8d      	ldr	r3, [pc, #564]	; (8004050 <UART_SetConfig+0x2d0>)
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d104      	bne.n	8003e2a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003e20:	f7ff f8ba 	bl	8002f98 <HAL_RCC_GetPCLK2Freq>
 8003e24:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003e28:	e003      	b.n	8003e32 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003e2a:	f7ff f8a1 	bl	8002f70 <HAL_RCC_GetPCLK1Freq>
 8003e2e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e36:	69db      	ldr	r3, [r3, #28]
 8003e38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e3c:	f040 810c 	bne.w	8004058 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003e40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e44:	2200      	movs	r2, #0
 8003e46:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003e4a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003e4e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003e52:	4622      	mov	r2, r4
 8003e54:	462b      	mov	r3, r5
 8003e56:	1891      	adds	r1, r2, r2
 8003e58:	65b9      	str	r1, [r7, #88]	; 0x58
 8003e5a:	415b      	adcs	r3, r3
 8003e5c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e5e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003e62:	4621      	mov	r1, r4
 8003e64:	eb12 0801 	adds.w	r8, r2, r1
 8003e68:	4629      	mov	r1, r5
 8003e6a:	eb43 0901 	adc.w	r9, r3, r1
 8003e6e:	f04f 0200 	mov.w	r2, #0
 8003e72:	f04f 0300 	mov.w	r3, #0
 8003e76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e82:	4690      	mov	r8, r2
 8003e84:	4699      	mov	r9, r3
 8003e86:	4623      	mov	r3, r4
 8003e88:	eb18 0303 	adds.w	r3, r8, r3
 8003e8c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003e90:	462b      	mov	r3, r5
 8003e92:	eb49 0303 	adc.w	r3, r9, r3
 8003e96:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003e9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003ea6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003eaa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003eae:	460b      	mov	r3, r1
 8003eb0:	18db      	adds	r3, r3, r3
 8003eb2:	653b      	str	r3, [r7, #80]	; 0x50
 8003eb4:	4613      	mov	r3, r2
 8003eb6:	eb42 0303 	adc.w	r3, r2, r3
 8003eba:	657b      	str	r3, [r7, #84]	; 0x54
 8003ebc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003ec0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003ec4:	f7fc f980 	bl	80001c8 <__aeabi_uldivmod>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	460b      	mov	r3, r1
 8003ecc:	4b61      	ldr	r3, [pc, #388]	; (8004054 <UART_SetConfig+0x2d4>)
 8003ece:	fba3 2302 	umull	r2, r3, r3, r2
 8003ed2:	095b      	lsrs	r3, r3, #5
 8003ed4:	011c      	lsls	r4, r3, #4
 8003ed6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003eda:	2200      	movs	r2, #0
 8003edc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003ee0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003ee4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003ee8:	4642      	mov	r2, r8
 8003eea:	464b      	mov	r3, r9
 8003eec:	1891      	adds	r1, r2, r2
 8003eee:	64b9      	str	r1, [r7, #72]	; 0x48
 8003ef0:	415b      	adcs	r3, r3
 8003ef2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ef4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003ef8:	4641      	mov	r1, r8
 8003efa:	eb12 0a01 	adds.w	sl, r2, r1
 8003efe:	4649      	mov	r1, r9
 8003f00:	eb43 0b01 	adc.w	fp, r3, r1
 8003f04:	f04f 0200 	mov.w	r2, #0
 8003f08:	f04f 0300 	mov.w	r3, #0
 8003f0c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003f10:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003f14:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f18:	4692      	mov	sl, r2
 8003f1a:	469b      	mov	fp, r3
 8003f1c:	4643      	mov	r3, r8
 8003f1e:	eb1a 0303 	adds.w	r3, sl, r3
 8003f22:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003f26:	464b      	mov	r3, r9
 8003f28:	eb4b 0303 	adc.w	r3, fp, r3
 8003f2c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003f30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	2200      	movs	r2, #0
 8003f38:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003f3c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003f40:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003f44:	460b      	mov	r3, r1
 8003f46:	18db      	adds	r3, r3, r3
 8003f48:	643b      	str	r3, [r7, #64]	; 0x40
 8003f4a:	4613      	mov	r3, r2
 8003f4c:	eb42 0303 	adc.w	r3, r2, r3
 8003f50:	647b      	str	r3, [r7, #68]	; 0x44
 8003f52:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003f56:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003f5a:	f7fc f935 	bl	80001c8 <__aeabi_uldivmod>
 8003f5e:	4602      	mov	r2, r0
 8003f60:	460b      	mov	r3, r1
 8003f62:	4611      	mov	r1, r2
 8003f64:	4b3b      	ldr	r3, [pc, #236]	; (8004054 <UART_SetConfig+0x2d4>)
 8003f66:	fba3 2301 	umull	r2, r3, r3, r1
 8003f6a:	095b      	lsrs	r3, r3, #5
 8003f6c:	2264      	movs	r2, #100	; 0x64
 8003f6e:	fb02 f303 	mul.w	r3, r2, r3
 8003f72:	1acb      	subs	r3, r1, r3
 8003f74:	00db      	lsls	r3, r3, #3
 8003f76:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003f7a:	4b36      	ldr	r3, [pc, #216]	; (8004054 <UART_SetConfig+0x2d4>)
 8003f7c:	fba3 2302 	umull	r2, r3, r3, r2
 8003f80:	095b      	lsrs	r3, r3, #5
 8003f82:	005b      	lsls	r3, r3, #1
 8003f84:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003f88:	441c      	add	r4, r3
 8003f8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f8e:	2200      	movs	r2, #0
 8003f90:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003f94:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003f98:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003f9c:	4642      	mov	r2, r8
 8003f9e:	464b      	mov	r3, r9
 8003fa0:	1891      	adds	r1, r2, r2
 8003fa2:	63b9      	str	r1, [r7, #56]	; 0x38
 8003fa4:	415b      	adcs	r3, r3
 8003fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003fa8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003fac:	4641      	mov	r1, r8
 8003fae:	1851      	adds	r1, r2, r1
 8003fb0:	6339      	str	r1, [r7, #48]	; 0x30
 8003fb2:	4649      	mov	r1, r9
 8003fb4:	414b      	adcs	r3, r1
 8003fb6:	637b      	str	r3, [r7, #52]	; 0x34
 8003fb8:	f04f 0200 	mov.w	r2, #0
 8003fbc:	f04f 0300 	mov.w	r3, #0
 8003fc0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003fc4:	4659      	mov	r1, fp
 8003fc6:	00cb      	lsls	r3, r1, #3
 8003fc8:	4651      	mov	r1, sl
 8003fca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003fce:	4651      	mov	r1, sl
 8003fd0:	00ca      	lsls	r2, r1, #3
 8003fd2:	4610      	mov	r0, r2
 8003fd4:	4619      	mov	r1, r3
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	4642      	mov	r2, r8
 8003fda:	189b      	adds	r3, r3, r2
 8003fdc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003fe0:	464b      	mov	r3, r9
 8003fe2:	460a      	mov	r2, r1
 8003fe4:	eb42 0303 	adc.w	r3, r2, r3
 8003fe8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003ff8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003ffc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004000:	460b      	mov	r3, r1
 8004002:	18db      	adds	r3, r3, r3
 8004004:	62bb      	str	r3, [r7, #40]	; 0x28
 8004006:	4613      	mov	r3, r2
 8004008:	eb42 0303 	adc.w	r3, r2, r3
 800400c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800400e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004012:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004016:	f7fc f8d7 	bl	80001c8 <__aeabi_uldivmod>
 800401a:	4602      	mov	r2, r0
 800401c:	460b      	mov	r3, r1
 800401e:	4b0d      	ldr	r3, [pc, #52]	; (8004054 <UART_SetConfig+0x2d4>)
 8004020:	fba3 1302 	umull	r1, r3, r3, r2
 8004024:	095b      	lsrs	r3, r3, #5
 8004026:	2164      	movs	r1, #100	; 0x64
 8004028:	fb01 f303 	mul.w	r3, r1, r3
 800402c:	1ad3      	subs	r3, r2, r3
 800402e:	00db      	lsls	r3, r3, #3
 8004030:	3332      	adds	r3, #50	; 0x32
 8004032:	4a08      	ldr	r2, [pc, #32]	; (8004054 <UART_SetConfig+0x2d4>)
 8004034:	fba2 2303 	umull	r2, r3, r2, r3
 8004038:	095b      	lsrs	r3, r3, #5
 800403a:	f003 0207 	and.w	r2, r3, #7
 800403e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4422      	add	r2, r4
 8004046:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004048:	e105      	b.n	8004256 <UART_SetConfig+0x4d6>
 800404a:	bf00      	nop
 800404c:	40011000 	.word	0x40011000
 8004050:	40011400 	.word	0x40011400
 8004054:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004058:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800405c:	2200      	movs	r2, #0
 800405e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004062:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004066:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800406a:	4642      	mov	r2, r8
 800406c:	464b      	mov	r3, r9
 800406e:	1891      	adds	r1, r2, r2
 8004070:	6239      	str	r1, [r7, #32]
 8004072:	415b      	adcs	r3, r3
 8004074:	627b      	str	r3, [r7, #36]	; 0x24
 8004076:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800407a:	4641      	mov	r1, r8
 800407c:	1854      	adds	r4, r2, r1
 800407e:	4649      	mov	r1, r9
 8004080:	eb43 0501 	adc.w	r5, r3, r1
 8004084:	f04f 0200 	mov.w	r2, #0
 8004088:	f04f 0300 	mov.w	r3, #0
 800408c:	00eb      	lsls	r3, r5, #3
 800408e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004092:	00e2      	lsls	r2, r4, #3
 8004094:	4614      	mov	r4, r2
 8004096:	461d      	mov	r5, r3
 8004098:	4643      	mov	r3, r8
 800409a:	18e3      	adds	r3, r4, r3
 800409c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80040a0:	464b      	mov	r3, r9
 80040a2:	eb45 0303 	adc.w	r3, r5, r3
 80040a6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80040aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	2200      	movs	r2, #0
 80040b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80040b6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80040ba:	f04f 0200 	mov.w	r2, #0
 80040be:	f04f 0300 	mov.w	r3, #0
 80040c2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80040c6:	4629      	mov	r1, r5
 80040c8:	008b      	lsls	r3, r1, #2
 80040ca:	4621      	mov	r1, r4
 80040cc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80040d0:	4621      	mov	r1, r4
 80040d2:	008a      	lsls	r2, r1, #2
 80040d4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80040d8:	f7fc f876 	bl	80001c8 <__aeabi_uldivmod>
 80040dc:	4602      	mov	r2, r0
 80040de:	460b      	mov	r3, r1
 80040e0:	4b60      	ldr	r3, [pc, #384]	; (8004264 <UART_SetConfig+0x4e4>)
 80040e2:	fba3 2302 	umull	r2, r3, r3, r2
 80040e6:	095b      	lsrs	r3, r3, #5
 80040e8:	011c      	lsls	r4, r3, #4
 80040ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040ee:	2200      	movs	r2, #0
 80040f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80040f4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80040f8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80040fc:	4642      	mov	r2, r8
 80040fe:	464b      	mov	r3, r9
 8004100:	1891      	adds	r1, r2, r2
 8004102:	61b9      	str	r1, [r7, #24]
 8004104:	415b      	adcs	r3, r3
 8004106:	61fb      	str	r3, [r7, #28]
 8004108:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800410c:	4641      	mov	r1, r8
 800410e:	1851      	adds	r1, r2, r1
 8004110:	6139      	str	r1, [r7, #16]
 8004112:	4649      	mov	r1, r9
 8004114:	414b      	adcs	r3, r1
 8004116:	617b      	str	r3, [r7, #20]
 8004118:	f04f 0200 	mov.w	r2, #0
 800411c:	f04f 0300 	mov.w	r3, #0
 8004120:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004124:	4659      	mov	r1, fp
 8004126:	00cb      	lsls	r3, r1, #3
 8004128:	4651      	mov	r1, sl
 800412a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800412e:	4651      	mov	r1, sl
 8004130:	00ca      	lsls	r2, r1, #3
 8004132:	4610      	mov	r0, r2
 8004134:	4619      	mov	r1, r3
 8004136:	4603      	mov	r3, r0
 8004138:	4642      	mov	r2, r8
 800413a:	189b      	adds	r3, r3, r2
 800413c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004140:	464b      	mov	r3, r9
 8004142:	460a      	mov	r2, r1
 8004144:	eb42 0303 	adc.w	r3, r2, r3
 8004148:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800414c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	2200      	movs	r2, #0
 8004154:	67bb      	str	r3, [r7, #120]	; 0x78
 8004156:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004158:	f04f 0200 	mov.w	r2, #0
 800415c:	f04f 0300 	mov.w	r3, #0
 8004160:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004164:	4649      	mov	r1, r9
 8004166:	008b      	lsls	r3, r1, #2
 8004168:	4641      	mov	r1, r8
 800416a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800416e:	4641      	mov	r1, r8
 8004170:	008a      	lsls	r2, r1, #2
 8004172:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004176:	f7fc f827 	bl	80001c8 <__aeabi_uldivmod>
 800417a:	4602      	mov	r2, r0
 800417c:	460b      	mov	r3, r1
 800417e:	4b39      	ldr	r3, [pc, #228]	; (8004264 <UART_SetConfig+0x4e4>)
 8004180:	fba3 1302 	umull	r1, r3, r3, r2
 8004184:	095b      	lsrs	r3, r3, #5
 8004186:	2164      	movs	r1, #100	; 0x64
 8004188:	fb01 f303 	mul.w	r3, r1, r3
 800418c:	1ad3      	subs	r3, r2, r3
 800418e:	011b      	lsls	r3, r3, #4
 8004190:	3332      	adds	r3, #50	; 0x32
 8004192:	4a34      	ldr	r2, [pc, #208]	; (8004264 <UART_SetConfig+0x4e4>)
 8004194:	fba2 2303 	umull	r2, r3, r2, r3
 8004198:	095b      	lsrs	r3, r3, #5
 800419a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800419e:	441c      	add	r4, r3
 80041a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041a4:	2200      	movs	r2, #0
 80041a6:	673b      	str	r3, [r7, #112]	; 0x70
 80041a8:	677a      	str	r2, [r7, #116]	; 0x74
 80041aa:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80041ae:	4642      	mov	r2, r8
 80041b0:	464b      	mov	r3, r9
 80041b2:	1891      	adds	r1, r2, r2
 80041b4:	60b9      	str	r1, [r7, #8]
 80041b6:	415b      	adcs	r3, r3
 80041b8:	60fb      	str	r3, [r7, #12]
 80041ba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80041be:	4641      	mov	r1, r8
 80041c0:	1851      	adds	r1, r2, r1
 80041c2:	6039      	str	r1, [r7, #0]
 80041c4:	4649      	mov	r1, r9
 80041c6:	414b      	adcs	r3, r1
 80041c8:	607b      	str	r3, [r7, #4]
 80041ca:	f04f 0200 	mov.w	r2, #0
 80041ce:	f04f 0300 	mov.w	r3, #0
 80041d2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80041d6:	4659      	mov	r1, fp
 80041d8:	00cb      	lsls	r3, r1, #3
 80041da:	4651      	mov	r1, sl
 80041dc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041e0:	4651      	mov	r1, sl
 80041e2:	00ca      	lsls	r2, r1, #3
 80041e4:	4610      	mov	r0, r2
 80041e6:	4619      	mov	r1, r3
 80041e8:	4603      	mov	r3, r0
 80041ea:	4642      	mov	r2, r8
 80041ec:	189b      	adds	r3, r3, r2
 80041ee:	66bb      	str	r3, [r7, #104]	; 0x68
 80041f0:	464b      	mov	r3, r9
 80041f2:	460a      	mov	r2, r1
 80041f4:	eb42 0303 	adc.w	r3, r2, r3
 80041f8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80041fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	2200      	movs	r2, #0
 8004202:	663b      	str	r3, [r7, #96]	; 0x60
 8004204:	667a      	str	r2, [r7, #100]	; 0x64
 8004206:	f04f 0200 	mov.w	r2, #0
 800420a:	f04f 0300 	mov.w	r3, #0
 800420e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004212:	4649      	mov	r1, r9
 8004214:	008b      	lsls	r3, r1, #2
 8004216:	4641      	mov	r1, r8
 8004218:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800421c:	4641      	mov	r1, r8
 800421e:	008a      	lsls	r2, r1, #2
 8004220:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004224:	f7fb ffd0 	bl	80001c8 <__aeabi_uldivmod>
 8004228:	4602      	mov	r2, r0
 800422a:	460b      	mov	r3, r1
 800422c:	4b0d      	ldr	r3, [pc, #52]	; (8004264 <UART_SetConfig+0x4e4>)
 800422e:	fba3 1302 	umull	r1, r3, r3, r2
 8004232:	095b      	lsrs	r3, r3, #5
 8004234:	2164      	movs	r1, #100	; 0x64
 8004236:	fb01 f303 	mul.w	r3, r1, r3
 800423a:	1ad3      	subs	r3, r2, r3
 800423c:	011b      	lsls	r3, r3, #4
 800423e:	3332      	adds	r3, #50	; 0x32
 8004240:	4a08      	ldr	r2, [pc, #32]	; (8004264 <UART_SetConfig+0x4e4>)
 8004242:	fba2 2303 	umull	r2, r3, r2, r3
 8004246:	095b      	lsrs	r3, r3, #5
 8004248:	f003 020f 	and.w	r2, r3, #15
 800424c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4422      	add	r2, r4
 8004254:	609a      	str	r2, [r3, #8]
}
 8004256:	bf00      	nop
 8004258:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800425c:	46bd      	mov	sp, r7
 800425e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004262:	bf00      	nop
 8004264:	51eb851f 	.word	0x51eb851f

08004268 <D16_GENERIC>:
 8004268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800426c:	b089      	sub	sp, #36	; 0x24
 800426e:	68d4      	ldr	r4, [r2, #12]
 8004270:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8004272:	6993      	ldr	r3, [r2, #24]
 8004274:	9407      	str	r4, [sp, #28]
 8004276:	6b14      	ldr	r4, [r2, #48]	; 0x30
 8004278:	9306      	str	r3, [sp, #24]
 800427a:	9402      	str	r4, [sp, #8]
 800427c:	f8d2 a010 	ldr.w	sl, [r2, #16]
 8004280:	f8d2 b014 	ldr.w	fp, [r2, #20]
 8004284:	69d3      	ldr	r3, [r2, #28]
 8004286:	6896      	ldr	r6, [r2, #8]
 8004288:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800428a:	9103      	str	r1, [sp, #12]
 800428c:	2d00      	cmp	r5, #0
 800428e:	d066      	beq.n	800435e <D16_GENERIC+0xf6>
 8004290:	f004 0510 	and.w	r5, r4, #16
 8004294:	f004 0420 	and.w	r4, r4, #32
 8004298:	9504      	str	r5, [sp, #16]
 800429a:	4938      	ldr	r1, [pc, #224]	; (800437c <D16_GENERIC+0x114>)
 800429c:	9405      	str	r4, [sp, #20]
 800429e:	f04f 0e00 	mov.w	lr, #0
 80042a2:	4635      	mov	r5, r6
 80042a4:	e04f      	b.n	8004346 <D16_GENERIC+0xde>
 80042a6:	5d87      	ldrb	r7, [r0, r6]
 80042a8:	7804      	ldrb	r4, [r0, #0]
 80042aa:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 80042ae:	eb04 2407 	add.w	r4, r4, r7, lsl #8
 80042b2:	b2e6      	uxtb	r6, r4
 80042b4:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80042b8:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 80042bc:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 80042c0:	4433      	add	r3, r6
 80042c2:	eb04 2493 	add.w	r4, r4, r3, lsr #10
 80042c6:	f3c4 0609 	ubfx	r6, r4, #0, #10
 80042ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80042ce:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
 80042d2:	0aa3      	lsrs	r3, r4, #10
 80042d4:	4c2a      	ldr	r4, [pc, #168]	; (8004380 <D16_GENERIC+0x118>)
 80042d6:	fb26 5404 	smlad	r4, r6, r4, r5
 80042da:	4d2a      	ldr	r5, [pc, #168]	; (8004384 <D16_GENERIC+0x11c>)
 80042dc:	fb26 f505 	smuad	r5, r6, r5
 80042e0:	f5a4 6400 	sub.w	r4, r4, #2048	; 0x800
 80042e4:	eb04 080a 	add.w	r8, r4, sl
 80042e8:	eba8 080b 	sub.w	r8, r8, fp
 80042ec:	4646      	mov	r6, r8
 80042ee:	17f7      	asrs	r7, r6, #31
 80042f0:	e9cd 6700 	strd	r6, r7, [sp]
 80042f4:	9e04      	ldr	r6, [sp, #16]
 80042f6:	f10e 0c01 	add.w	ip, lr, #1
 80042fa:	b16e      	cbz	r6, 8004318 <D16_GENERIC+0xb0>
 80042fc:	6a16      	ldr	r6, [r2, #32]
 80042fe:	9f01      	ldr	r7, [sp, #4]
 8004300:	fba8 8906 	umull	r8, r9, r8, r6
 8004304:	fb06 9907 	mla	r9, r6, r7, r9
 8004308:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 800430c:	f149 0900 	adc.w	r9, r9, #0
 8004310:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 8004314:	46a3      	mov	fp, r4
 8004316:	4654      	mov	r4, sl
 8004318:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 800431a:	9f02      	ldr	r7, [sp, #8]
 800431c:	0424      	lsls	r4, r4, #16
 800431e:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8004322:	f04f 0900 	mov.w	r9, #0
 8004326:	fb0e fe06 	mul.w	lr, lr, r6
 800432a:	fbc7 8904 	smlal	r8, r9, r7, r4
 800432e:	9e03      	ldr	r6, [sp, #12]
 8004330:	464f      	mov	r7, r9
 8004332:	10bc      	asrs	r4, r7, #2
 8004334:	f304 040f 	ssat	r4, #16, r4
 8004338:	f826 401e 	strh.w	r4, [r6, lr, lsl #1]
 800433c:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 800433e:	fa1f fe8c 	uxth.w	lr, ip
 8004342:	4574      	cmp	r4, lr
 8004344:	d90a      	bls.n	800435c <D16_GENERIC+0xf4>
 8004346:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 8004348:	2c01      	cmp	r4, #1
 800434a:	b2e6      	uxtb	r6, r4
 800434c:	d1ab      	bne.n	80042a6 <D16_GENERIC+0x3e>
 800434e:	9e05      	ldr	r6, [sp, #20]
 8004350:	f850 4b02 	ldr.w	r4, [r0], #2
 8004354:	2e00      	cmp	r6, #0
 8004356:	d0ac      	beq.n	80042b2 <D16_GENERIC+0x4a>
 8004358:	ba64      	rev16	r4, r4
 800435a:	e7aa      	b.n	80042b2 <D16_GENERIC+0x4a>
 800435c:	462e      	mov	r6, r5
 800435e:	9907      	ldr	r1, [sp, #28]
 8004360:	61d3      	str	r3, [r2, #28]
 8004362:	9b06      	ldr	r3, [sp, #24]
 8004364:	6096      	str	r6, [r2, #8]
 8004366:	2000      	movs	r0, #0
 8004368:	60d1      	str	r1, [r2, #12]
 800436a:	f8c2 a010 	str.w	sl, [r2, #16]
 800436e:	f8c2 b014 	str.w	fp, [r2, #20]
 8004372:	6193      	str	r3, [r2, #24]
 8004374:	b009      	add	sp, #36	; 0x24
 8004376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800437a:	bf00      	nop
 800437c:	20000000 	.word	0x20000000
 8004380:	00030001 	.word	0x00030001
 8004384:	00010003 	.word	0x00010003

08004388 <D24_GENERIC>:
 8004388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800438c:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 800438e:	6993      	ldr	r3, [r2, #24]
 8004390:	6b15      	ldr	r5, [r2, #48]	; 0x30
 8004392:	f8d2 a010 	ldr.w	sl, [r2, #16]
 8004396:	f8d2 9014 	ldr.w	r9, [r2, #20]
 800439a:	6894      	ldr	r4, [r2, #8]
 800439c:	f8d2 b00c 	ldr.w	fp, [r2, #12]
 80043a0:	b089      	sub	sp, #36	; 0x24
 80043a2:	9307      	str	r3, [sp, #28]
 80043a4:	9503      	str	r5, [sp, #12]
 80043a6:	69d3      	ldr	r3, [r2, #28]
 80043a8:	6b55      	ldr	r5, [r2, #52]	; 0x34
 80043aa:	9104      	str	r1, [sp, #16]
 80043ac:	2e00      	cmp	r6, #0
 80043ae:	f000 8096 	beq.w	80044de <D24_GENERIC+0x156>
 80043b2:	f005 0610 	and.w	r6, r5, #16
 80043b6:	f005 0520 	and.w	r5, r5, #32
 80043ba:	4954      	ldr	r1, [pc, #336]	; (800450c <D24_GENERIC+0x184>)
 80043bc:	9605      	str	r6, [sp, #20]
 80043be:	9506      	str	r5, [sp, #24]
 80043c0:	f04f 0e00 	mov.w	lr, #0
 80043c4:	f8cd 9008 	str.w	r9, [sp, #8]
 80043c8:	e06a      	b.n	80044a0 <D24_GENERIC+0x118>
 80043ca:	f810 5016 	ldrb.w	r5, [r0, r6, lsl #1]
 80043ce:	f810 8007 	ldrb.w	r8, [r0, r7]
 80043d2:	f890 c000 	ldrb.w	ip, [r0]
 80043d6:	042d      	lsls	r5, r5, #16
 80043d8:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 80043dc:	eb05 2508 	add.w	r5, r5, r8, lsl #8
 80043e0:	44ac      	add	ip, r5
 80043e2:	4438      	add	r0, r7
 80043e4:	fa5f f68c 	uxtb.w	r6, ip
 80043e8:	f3cc 2507 	ubfx	r5, ip, #8, #8
 80043ec:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 80043f0:	f851 7025 	ldr.w	r7, [r1, r5, lsl #2]
 80043f4:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80043f8:	eb06 2693 	add.w	r6, r6, r3, lsr #10
 80043fc:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 8004400:	f851 302c 	ldr.w	r3, [r1, ip, lsl #2]
 8004404:	f3c7 0509 	ubfx	r5, r7, #0, #10
 8004408:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800440c:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 8004410:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 8004414:	4d3e      	ldr	r5, [pc, #248]	; (8004510 <D24_GENERIC+0x188>)
 8004416:	fb26 b705 	smlad	r7, r6, r5, fp
 800441a:	4d3e      	ldr	r5, [pc, #248]	; (8004514 <D24_GENERIC+0x18c>)
 800441c:	fb26 4b05 	smlad	fp, r6, r5, r4
 8004420:	f3c3 0409 	ubfx	r4, r3, #0, #10
 8004424:	eb04 0844 	add.w	r8, r4, r4, lsl #1
 8004428:	eb0b 0b48 	add.w	fp, fp, r8, lsl #1
 800442c:	2401      	movs	r4, #1
 800442e:	fb26 f604 	smuad	r6, r6, r4
 8004432:	f5a7 55d8 	sub.w	r5, r7, #6912	; 0x1b00
 8004436:	9f02      	ldr	r7, [sp, #8]
 8004438:	eb0e 0c04 	add.w	ip, lr, r4
 800443c:	eb08 0406 	add.w	r4, r8, r6
 8004440:	eb05 060a 	add.w	r6, r5, sl
 8004444:	1bf6      	subs	r6, r6, r7
 8004446:	4637      	mov	r7, r6
 8004448:	ea4f 78e6 	mov.w	r8, r6, asr #31
 800444c:	e9cd 7800 	strd	r7, r8, [sp]
 8004450:	9f05      	ldr	r7, [sp, #20]
 8004452:	b177      	cbz	r7, 8004472 <D24_GENERIC+0xea>
 8004454:	f8d2 8020 	ldr.w	r8, [r2, #32]
 8004458:	9502      	str	r5, [sp, #8]
 800445a:	fba6 9a08 	umull	r9, sl, r6, r8
 800445e:	9e01      	ldr	r6, [sp, #4]
 8004460:	fb08 aa06 	mla	sl, r8, r6, sl
 8004464:	f119 4600 	adds.w	r6, r9, #2147483648	; 0x80000000
 8004468:	f14a 0700 	adc.w	r7, sl, #0
 800446c:	ea4f 0a47 	mov.w	sl, r7, lsl #1
 8004470:	4655      	mov	r5, sl
 8004472:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 8004474:	9f03      	ldr	r7, [sp, #12]
 8004476:	03ad      	lsls	r5, r5, #14
 8004478:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800447c:	f04f 0900 	mov.w	r9, #0
 8004480:	fb0e fe06 	mul.w	lr, lr, r6
 8004484:	fbc7 8905 	smlal	r8, r9, r7, r5
 8004488:	9e04      	ldr	r6, [sp, #16]
 800448a:	464f      	mov	r7, r9
 800448c:	10bd      	asrs	r5, r7, #2
 800448e:	f305 050f 	ssat	r5, #16, r5
 8004492:	f826 501e 	strh.w	r5, [r6, lr, lsl #1]
 8004496:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8004498:	fa1f fe8c 	uxth.w	lr, ip
 800449c:	4575      	cmp	r5, lr
 800449e:	d91c      	bls.n	80044da <D24_GENERIC+0x152>
 80044a0:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 80044a2:	b2ef      	uxtb	r7, r5
 80044a4:	2d01      	cmp	r5, #1
 80044a6:	b23e      	sxth	r6, r7
 80044a8:	d18f      	bne.n	80043ca <D24_GENERIC+0x42>
 80044aa:	9d06      	ldr	r5, [sp, #24]
 80044ac:	b15d      	cbz	r5, 80044c6 <D24_GENERIC+0x13e>
 80044ae:	f01e 0f01 	tst.w	lr, #1
 80044b2:	d122      	bne.n	80044fa <D24_GENERIC+0x172>
 80044b4:	7805      	ldrb	r5, [r0, #0]
 80044b6:	78c7      	ldrb	r7, [r0, #3]
 80044b8:	7846      	ldrb	r6, [r0, #1]
 80044ba:	022d      	lsls	r5, r5, #8
 80044bc:	eb05 4c07 	add.w	ip, r5, r7, lsl #16
 80044c0:	44b4      	add	ip, r6
 80044c2:	3002      	adds	r0, #2
 80044c4:	e78e      	b.n	80043e4 <D24_GENERIC+0x5c>
 80044c6:	7846      	ldrb	r6, [r0, #1]
 80044c8:	f890 c002 	ldrb.w	ip, [r0, #2]
 80044cc:	f810 5b03 	ldrb.w	r5, [r0], #3
 80044d0:	0236      	lsls	r6, r6, #8
 80044d2:	eb06 4c0c 	add.w	ip, r6, ip, lsl #16
 80044d6:	44ac      	add	ip, r5
 80044d8:	e784      	b.n	80043e4 <D24_GENERIC+0x5c>
 80044da:	f8dd 9008 	ldr.w	r9, [sp, #8]
 80044de:	61d3      	str	r3, [r2, #28]
 80044e0:	9b07      	ldr	r3, [sp, #28]
 80044e2:	6094      	str	r4, [r2, #8]
 80044e4:	2000      	movs	r0, #0
 80044e6:	f8c2 b00c 	str.w	fp, [r2, #12]
 80044ea:	f8c2 a010 	str.w	sl, [r2, #16]
 80044ee:	f8c2 9014 	str.w	r9, [r2, #20]
 80044f2:	6193      	str	r3, [r2, #24]
 80044f4:	b009      	add	sp, #36	; 0x24
 80044f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044fa:	78c5      	ldrb	r5, [r0, #3]
 80044fc:	7887      	ldrb	r7, [r0, #2]
 80044fe:	f810 6b04 	ldrb.w	r6, [r0], #4
 8004502:	022d      	lsls	r5, r5, #8
 8004504:	eb05 4c07 	add.w	ip, r5, r7, lsl #16
 8004508:	44b4      	add	ip, r6
 800450a:	e76b      	b.n	80043e4 <D24_GENERIC+0x5c>
 800450c:	20000000 	.word	0x20000000
 8004510:	00030001 	.word	0x00030001
 8004514:	00060007 	.word	0x00060007

08004518 <D32_GENERIC>:
 8004518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800451c:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800451e:	6993      	ldr	r3, [r2, #24]
 8004520:	6b14      	ldr	r4, [r2, #48]	; 0x30
 8004522:	f8d2 a010 	ldr.w	sl, [r2, #16]
 8004526:	f8d2 9014 	ldr.w	r9, [r2, #20]
 800452a:	69d6      	ldr	r6, [r2, #28]
 800452c:	f8d2 b00c 	ldr.w	fp, [r2, #12]
 8004530:	b089      	sub	sp, #36	; 0x24
 8004532:	9307      	str	r3, [sp, #28]
 8004534:	9403      	str	r4, [sp, #12]
 8004536:	6893      	ldr	r3, [r2, #8]
 8004538:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800453a:	9104      	str	r1, [sp, #16]
 800453c:	2d00      	cmp	r5, #0
 800453e:	f000 809f 	beq.w	8004680 <D32_GENERIC+0x168>
 8004542:	f004 0510 	and.w	r5, r4, #16
 8004546:	f004 0420 	and.w	r4, r4, #32
 800454a:	9505      	str	r5, [sp, #20]
 800454c:	4953      	ldr	r1, [pc, #332]	; (800469c <D32_GENERIC+0x184>)
 800454e:	9406      	str	r4, [sp, #24]
 8004550:	f04f 0c00 	mov.w	ip, #0
 8004554:	f8cd 9008 	str.w	r9, [sp, #8]
 8004558:	461d      	mov	r5, r3
 800455a:	4617      	mov	r7, r2
 800455c:	e077      	b.n	800464e <D32_GENERIC+0x136>
 800455e:	f818 3003 	ldrb.w	r3, [r8, r3]
 8004562:	f810 800e 	ldrb.w	r8, [r0, lr]
 8004566:	f810 e002 	ldrb.w	lr, [r0, r2]
 800456a:	7800      	ldrb	r0, [r0, #0]
 800456c:	041b      	lsls	r3, r3, #16
 800456e:	eb03 6308 	add.w	r3, r3, r8, lsl #24
 8004572:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 8004576:	4403      	add	r3, r0
 8004578:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 800457c:	b2dc      	uxtb	r4, r3
 800457e:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8004582:	f3c3 4807 	ubfx	r8, r3, #16, #8
 8004586:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 800458a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800458e:	0e1b      	lsrs	r3, r3, #24
 8004590:	eb04 2496 	add.w	r4, r4, r6, lsr #10
 8004594:	f851 6028 	ldr.w	r6, [r1, r8, lsl #2]
 8004598:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800459c:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 80045a0:	eb06 2e92 	add.w	lr, r6, r2, lsr #10
 80045a4:	eb03 269e 	add.w	r6, r3, lr, lsr #10
 80045a8:	f3c6 0309 	ubfx	r3, r6, #0, #10
 80045ac:	f3c4 0409 	ubfx	r4, r4, #0, #10
 80045b0:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80045b4:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 80045b8:	ea43 4e0e 	orr.w	lr, r3, lr, lsl #16
 80045bc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80045c0:	4b37      	ldr	r3, [pc, #220]	; (80046a0 <D32_GENERIC+0x188>)
 80045c2:	fb22 b403 	smlad	r4, r2, r3, fp
 80045c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80045ca:	fb2e 4803 	smlad	r8, lr, r3, r4
 80045ce:	4b35      	ldr	r3, [pc, #212]	; (80046a4 <D32_GENERIC+0x18c>)
 80045d0:	fb22 5503 	smlad	r5, r2, r3, r5
 80045d4:	4b34      	ldr	r3, [pc, #208]	; (80046a8 <D32_GENERIC+0x190>)
 80045d6:	fb2e 5b03 	smlad	fp, lr, r3, r5
 80045da:	2301      	movs	r3, #1
 80045dc:	fb22 f203 	smuad	r2, r2, r3
 80045e0:	4b32      	ldr	r3, [pc, #200]	; (80046ac <D32_GENERIC+0x194>)
 80045e2:	fb2e 2503 	smlad	r5, lr, r3, r2
 80045e6:	9b02      	ldr	r3, [sp, #8]
 80045e8:	f5a8 4480 	sub.w	r4, r8, #16384	; 0x4000
 80045ec:	eb04 080a 	add.w	r8, r4, sl
 80045f0:	eba8 0803 	sub.w	r8, r8, r3
 80045f4:	4642      	mov	r2, r8
 80045f6:	17d3      	asrs	r3, r2, #31
 80045f8:	e9cd 2300 	strd	r2, r3, [sp]
 80045fc:	9b05      	ldr	r3, [sp, #20]
 80045fe:	f10c 0e01 	add.w	lr, ip, #1
 8004602:	b16b      	cbz	r3, 8004620 <D32_GENERIC+0x108>
 8004604:	6a3a      	ldr	r2, [r7, #32]
 8004606:	9b01      	ldr	r3, [sp, #4]
 8004608:	9402      	str	r4, [sp, #8]
 800460a:	fba8 8902 	umull	r8, r9, r8, r2
 800460e:	fb02 9903 	mla	r9, r2, r3, r9
 8004612:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 8004616:	f149 0900 	adc.w	r9, r9, #0
 800461a:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 800461e:	4654      	mov	r4, sl
 8004620:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004622:	9a04      	ldr	r2, [sp, #16]
 8004624:	fb0c fc03 	mul.w	ip, ip, r3
 8004628:	9b03      	ldr	r3, [sp, #12]
 800462a:	0364      	lsls	r4, r4, #13
 800462c:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8004630:	f04f 0900 	mov.w	r9, #0
 8004634:	fbc3 8904 	smlal	r8, r9, r3, r4
 8004638:	464b      	mov	r3, r9
 800463a:	109b      	asrs	r3, r3, #2
 800463c:	f303 030f 	ssat	r3, #16, r3
 8004640:	f822 301c 	strh.w	r3, [r2, ip, lsl #1]
 8004644:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004646:	fa1f fc8e 	uxth.w	ip, lr
 800464a:	4563      	cmp	r3, ip
 800464c:	d914      	bls.n	8004678 <D32_GENERIC+0x160>
 800464e:	8d7c      	ldrh	r4, [r7, #42]	; 0x2a
 8004650:	b2e2      	uxtb	r2, r4
 8004652:	eb02 0e42 	add.w	lr, r2, r2, lsl #1
 8004656:	eb00 080e 	add.w	r8, r0, lr
 800465a:	4253      	negs	r3, r2
 800465c:	2c01      	cmp	r4, #1
 800465e:	eb08 0403 	add.w	r4, r8, r3
 8004662:	f47f af7c 	bne.w	800455e <D32_GENERIC+0x46>
 8004666:	1d02      	adds	r2, r0, #4
 8004668:	6803      	ldr	r3, [r0, #0]
 800466a:	9806      	ldr	r0, [sp, #24]
 800466c:	b110      	cbz	r0, 8004674 <D32_GENERIC+0x15c>
 800466e:	ba5b      	rev16	r3, r3
 8004670:	4610      	mov	r0, r2
 8004672:	e783      	b.n	800457c <D32_GENERIC+0x64>
 8004674:	4610      	mov	r0, r2
 8004676:	e781      	b.n	800457c <D32_GENERIC+0x64>
 8004678:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800467c:	462b      	mov	r3, r5
 800467e:	463a      	mov	r2, r7
 8004680:	6093      	str	r3, [r2, #8]
 8004682:	9b07      	ldr	r3, [sp, #28]
 8004684:	f8c2 b00c 	str.w	fp, [r2, #12]
 8004688:	2000      	movs	r0, #0
 800468a:	61d6      	str	r6, [r2, #28]
 800468c:	f8c2 a010 	str.w	sl, [r2, #16]
 8004690:	f8c2 9014 	str.w	r9, [r2, #20]
 8004694:	6193      	str	r3, [r2, #24]
 8004696:	b009      	add	sp, #36	; 0x24
 8004698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800469c:	20000000 	.word	0x20000000
 80046a0:	00060003 	.word	0x00060003
 80046a4:	000a000c 	.word	0x000a000c
 80046a8:	000c000a 	.word	0x000c000a
 80046ac:	00030006 	.word	0x00030006

080046b0 <D48_GENERIC>:
 80046b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046b4:	b089      	sub	sp, #36	; 0x24
 80046b6:	6953      	ldr	r3, [r2, #20]
 80046b8:	68d4      	ldr	r4, [r2, #12]
 80046ba:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 80046bc:	9302      	str	r3, [sp, #8]
 80046be:	9400      	str	r4, [sp, #0]
 80046c0:	6993      	ldr	r3, [r2, #24]
 80046c2:	6b14      	ldr	r4, [r2, #48]	; 0x30
 80046c4:	9307      	str	r3, [sp, #28]
 80046c6:	9403      	str	r4, [sp, #12]
 80046c8:	f8d2 a010 	ldr.w	sl, [r2, #16]
 80046cc:	69d6      	ldr	r6, [r2, #28]
 80046ce:	6893      	ldr	r3, [r2, #8]
 80046d0:	6b54      	ldr	r4, [r2, #52]	; 0x34
 80046d2:	9104      	str	r1, [sp, #16]
 80046d4:	2d00      	cmp	r5, #0
 80046d6:	f000 80c5 	beq.w	8004864 <D48_GENERIC+0x1b4>
 80046da:	f004 0510 	and.w	r5, r4, #16
 80046de:	f004 0420 	and.w	r4, r4, #32
 80046e2:	4967      	ldr	r1, [pc, #412]	; (8004880 <D48_GENERIC+0x1d0>)
 80046e4:	9505      	str	r5, [sp, #20]
 80046e6:	9406      	str	r4, [sp, #24]
 80046e8:	f04f 0c00 	mov.w	ip, #0
 80046ec:	4657      	mov	r7, sl
 80046ee:	9301      	str	r3, [sp, #4]
 80046f0:	e09c      	b.n	800482c <D48_GENERIC+0x17c>
 80046f2:	f81b 4005 	ldrb.w	r4, [fp, r5]
 80046f6:	f810 b009 	ldrb.w	fp, [r0, r9]
 80046fa:	f81a 9009 	ldrb.w	r9, [sl, r9]
 80046fe:	f810 a00e 	ldrb.w	sl, [r0, lr]
 8004702:	7800      	ldrb	r0, [r0, #0]
 8004704:	0424      	lsls	r4, r4, #16
 8004706:	eb04 6b0b 	add.w	fp, r4, fp, lsl #24
 800470a:	f818 4005 	ldrb.w	r4, [r8, r5]
 800470e:	eb0b 2b0a 	add.w	fp, fp, sl, lsl #8
 8004712:	44a8      	add	r8, r5
 8004714:	eb04 2409 	add.w	r4, r4, r9, lsl #8
 8004718:	eb0b 0500 	add.w	r5, fp, r0
 800471c:	eb08 004e 	add.w	r0, r8, lr, lsl #1
 8004720:	fa5f f885 	uxtb.w	r8, r5
 8004724:	f3c5 2e07 	ubfx	lr, r5, #8, #8
 8004728:	f851 a028 	ldr.w	sl, [r1, r8, lsl #2]
 800472c:	f851 902e 	ldr.w	r9, [r1, lr, lsl #2]
 8004730:	f3c5 4e07 	ubfx	lr, r5, #16, #8
 8004734:	0e2d      	lsrs	r5, r5, #24
 8004736:	eb0a 2a96 	add.w	sl, sl, r6, lsr #10
 800473a:	f851 802e 	ldr.w	r8, [r1, lr, lsl #2]
 800473e:	f851 e025 	ldr.w	lr, [r1, r5, lsl #2]
 8004742:	b2e6      	uxtb	r6, r4
 8004744:	eb09 259a 	add.w	r5, r9, sl, lsr #10
 8004748:	f3c4 2407 	ubfx	r4, r4, #8, #8
 800474c:	eb08 2895 	add.w	r8, r8, r5, lsr #10
 8004750:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8004754:	f851 9024 	ldr.w	r9, [r1, r4, lsl #2]
 8004758:	eb0e 2498 	add.w	r4, lr, r8, lsr #10
 800475c:	eb06 2e94 	add.w	lr, r6, r4, lsr #10
 8004760:	eb09 269e 	add.w	r6, r9, lr, lsr #10
 8004764:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8004768:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800476c:	f3c6 0909 	ubfx	r9, r6, #0, #10
 8004770:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8004774:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8004778:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800477c:	ea45 4a0a 	orr.w	sl, r5, sl, lsl #16
 8004780:	ea44 4808 	orr.w	r8, r4, r8, lsl #16
 8004784:	ea49 4e0e 	orr.w	lr, r9, lr, lsl #16
 8004788:	4c3e      	ldr	r4, [pc, #248]	; (8004884 <D48_GENERIC+0x1d4>)
 800478a:	9d00      	ldr	r5, [sp, #0]
 800478c:	fb2a 5404 	smlad	r4, sl, r4, r5
 8004790:	4d3d      	ldr	r5, [pc, #244]	; (8004888 <D48_GENERIC+0x1d8>)
 8004792:	fb28 4405 	smlad	r4, r8, r5, r4
 8004796:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800479a:	fb2e 4b03 	smlad	fp, lr, r3, r4
 800479e:	4c3b      	ldr	r4, [pc, #236]	; (800488c <D48_GENERIC+0x1dc>)
 80047a0:	9b01      	ldr	r3, [sp, #4]
 80047a2:	fb2a 3304 	smlad	r3, sl, r4, r3
 80047a6:	f04f 141b 	mov.w	r4, #1769499	; 0x1b001b
 80047aa:	fb28 3304 	smlad	r3, r8, r4, r3
 80047ae:	4c38      	ldr	r4, [pc, #224]	; (8004890 <D48_GENERIC+0x1e0>)
 80047b0:	fb2e 3304 	smlad	r3, lr, r4, r3
 80047b4:	2501      	movs	r5, #1
 80047b6:	9300      	str	r3, [sp, #0]
 80047b8:	fb2a fa05 	smuad	sl, sl, r5
 80047bc:	4b35      	ldr	r3, [pc, #212]	; (8004894 <D48_GENERIC+0x1e4>)
 80047be:	fb28 a803 	smlad	r8, r8, r3, sl
 80047c2:	4b35      	ldr	r3, [pc, #212]	; (8004898 <D48_GENERIC+0x1e8>)
 80047c4:	fb2e 8303 	smlad	r3, lr, r3, r8
 80047c8:	f5ab 4458 	sub.w	r4, fp, #55296	; 0xd800
 80047cc:	9301      	str	r3, [sp, #4]
 80047ce:	9b02      	ldr	r3, [sp, #8]
 80047d0:	eb04 0807 	add.w	r8, r4, r7
 80047d4:	eba8 0803 	sub.w	r8, r8, r3
 80047d8:	9b05      	ldr	r3, [sp, #20]
 80047da:	4465      	add	r5, ip
 80047dc:	ea4f 7be8 	mov.w	fp, r8, asr #31
 80047e0:	b163      	cbz	r3, 80047fc <D48_GENERIC+0x14c>
 80047e2:	6a17      	ldr	r7, [r2, #32]
 80047e4:	9402      	str	r4, [sp, #8]
 80047e6:	fba8 8907 	umull	r8, r9, r8, r7
 80047ea:	fb07 990b 	mla	r9, r7, fp, r9
 80047ee:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 80047f2:	f149 0900 	adc.w	r9, r9, #0
 80047f6:	ea4f 0749 	mov.w	r7, r9, lsl #1
 80047fa:	463c      	mov	r4, r7
 80047fc:	f8b2 e028 	ldrh.w	lr, [r2, #40]	; 0x28
 8004800:	9b03      	ldr	r3, [sp, #12]
 8004802:	02e4      	lsls	r4, r4, #11
 8004804:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8004808:	f04f 0900 	mov.w	r9, #0
 800480c:	fb0c fc0e 	mul.w	ip, ip, lr
 8004810:	fbc3 8904 	smlal	r8, r9, r3, r4
 8004814:	9b04      	ldr	r3, [sp, #16]
 8004816:	ea4f 04a9 	mov.w	r4, r9, asr #2
 800481a:	f304 040f 	ssat	r4, #16, r4
 800481e:	f823 401c 	strh.w	r4, [r3, ip, lsl #1]
 8004822:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 8004824:	fa1f fc85 	uxth.w	ip, r5
 8004828:	4564      	cmp	r4, ip
 800482a:	d919      	bls.n	8004860 <D48_GENERIC+0x1b0>
 800482c:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 800482e:	fa5f fe84 	uxtb.w	lr, r4
 8004832:	eb0e 094e 	add.w	r9, lr, lr, lsl #1
 8004836:	f1ce 0500 	rsb	r5, lr, #0
 800483a:	eb00 0b09 	add.w	fp, r0, r9
 800483e:	eb0b 0a05 	add.w	sl, fp, r5
 8004842:	2c01      	cmp	r4, #1
 8004844:	eb0a 0809 	add.w	r8, sl, r9
 8004848:	f47f af53 	bne.w	80046f2 <D48_GENERIC+0x42>
 800484c:	9b06      	ldr	r3, [sp, #24]
 800484e:	6805      	ldr	r5, [r0, #0]
 8004850:	6844      	ldr	r4, [r0, #4]
 8004852:	3006      	adds	r0, #6
 8004854:	2b00      	cmp	r3, #0
 8004856:	f43f af63 	beq.w	8004720 <D48_GENERIC+0x70>
 800485a:	ba6d      	rev16	r5, r5
 800485c:	ba64      	rev16	r4, r4
 800485e:	e75f      	b.n	8004720 <D48_GENERIC+0x70>
 8004860:	9b01      	ldr	r3, [sp, #4]
 8004862:	46ba      	mov	sl, r7
 8004864:	6093      	str	r3, [r2, #8]
 8004866:	9b00      	ldr	r3, [sp, #0]
 8004868:	60d3      	str	r3, [r2, #12]
 800486a:	9b02      	ldr	r3, [sp, #8]
 800486c:	6153      	str	r3, [r2, #20]
 800486e:	9b07      	ldr	r3, [sp, #28]
 8004870:	61d6      	str	r6, [r2, #28]
 8004872:	2000      	movs	r0, #0
 8004874:	f8c2 a010 	str.w	sl, [r2, #16]
 8004878:	6193      	str	r3, [r2, #24]
 800487a:	b009      	add	sp, #36	; 0x24
 800487c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004880:	20000000 	.word	0x20000000
 8004884:	000f000a 	.word	0x000f000a
 8004888:	00060003 	.word	0x00060003
 800488c:	00150019 	.word	0x00150019
 8004890:	00190015 	.word	0x00190015
 8004894:	00030006 	.word	0x00030006
 8004898:	000a000f 	.word	0x000a000f

0800489c <D64_GENERIC>:
 800489c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048a0:	b089      	sub	sp, #36	; 0x24
 80048a2:	6913      	ldr	r3, [r2, #16]
 80048a4:	6895      	ldr	r5, [r2, #8]
 80048a6:	9303      	str	r3, [sp, #12]
 80048a8:	9501      	str	r5, [sp, #4]
 80048aa:	6953      	ldr	r3, [r2, #20]
 80048ac:	68d5      	ldr	r5, [r2, #12]
 80048ae:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 80048b0:	9304      	str	r3, [sp, #16]
 80048b2:	9500      	str	r5, [sp, #0]
 80048b4:	6993      	ldr	r3, [r2, #24]
 80048b6:	6b15      	ldr	r5, [r2, #48]	; 0x30
 80048b8:	9307      	str	r3, [sp, #28]
 80048ba:	9505      	str	r5, [sp, #20]
 80048bc:	69d3      	ldr	r3, [r2, #28]
 80048be:	9106      	str	r1, [sp, #24]
 80048c0:	2c00      	cmp	r4, #0
 80048c2:	f000 80d9 	beq.w	8004a78 <D64_GENERIC+0x1dc>
 80048c6:	6a11      	ldr	r1, [r2, #32]
 80048c8:	9102      	str	r1, [sp, #8]
 80048ca:	f8df e1ec 	ldr.w	lr, [pc, #492]	; 8004ab8 <D64_GENERIC+0x21c>
 80048ce:	f04f 0c00 	mov.w	ip, #0
 80048d2:	4681      	mov	r9, r0
 80048d4:	e0c1      	b.n	8004a5a <D64_GENERIC+0x1be>
 80048d6:	eb06 0846 	add.w	r8, r6, r6, lsl #1
 80048da:	4274      	negs	r4, r6
 80048dc:	eb09 0708 	add.w	r7, r9, r8
 80048e0:	eb07 0a44 	add.w	sl, r7, r4, lsl #1
 80048e4:	eb0a 0548 	add.w	r5, sl, r8, lsl #1
 80048e8:	5d38      	ldrb	r0, [r7, r4]
 80048ea:	5d29      	ldrb	r1, [r5, r4]
 80048ec:	f81a b018 	ldrb.w	fp, [sl, r8, lsl #1]
 80048f0:	f819 a008 	ldrb.w	sl, [r9, r8]
 80048f4:	f817 8014 	ldrb.w	r8, [r7, r4, lsl #1]
 80048f8:	f899 7000 	ldrb.w	r7, [r9]
 80048fc:	f815 9014 	ldrb.w	r9, [r5, r4, lsl #1]
 8004900:	4425      	add	r5, r4
 8004902:	0409      	lsls	r1, r1, #16
 8004904:	0400      	lsls	r0, r0, #16
 8004906:	eb01 610b 	add.w	r1, r1, fp, lsl #24
 800490a:	eb00 600a 	add.w	r0, r0, sl, lsl #24
 800490e:	f815 b014 	ldrb.w	fp, [r5, r4, lsl #1]
 8004912:	eb01 2109 	add.w	r1, r1, r9, lsl #8
 8004916:	eb05 0444 	add.w	r4, r5, r4, lsl #1
 800491a:	eb00 2008 	add.w	r0, r0, r8, lsl #8
 800491e:	4459      	add	r1, fp
 8004920:	eb04 0986 	add.w	r9, r4, r6, lsl #2
 8004924:	4438      	add	r0, r7
 8004926:	b2c5      	uxtb	r5, r0
 8004928:	f3c0 2407 	ubfx	r4, r0, #8, #8
 800492c:	f85e 6025 	ldr.w	r6, [lr, r5, lsl #2]
 8004930:	f85e 5024 	ldr.w	r5, [lr, r4, lsl #2]
 8004934:	f3c0 4407 	ubfx	r4, r0, #16, #8
 8004938:	0e00      	lsrs	r0, r0, #24
 800493a:	eb03 0806 	add.w	r8, r3, r6
 800493e:	f85e 7024 	ldr.w	r7, [lr, r4, lsl #2]
 8004942:	f85e 4020 	ldr.w	r4, [lr, r0, lsl #2]
 8004946:	f3c1 2307 	ubfx	r3, r1, #8, #8
 800494a:	b2c8      	uxtb	r0, r1
 800494c:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 8004950:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 8004954:	f85e 6020 	ldr.w	r6, [lr, r0, lsl #2]
 8004958:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 800495c:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8004960:	eb04 2497 	add.w	r4, r4, r7, lsr #10
 8004964:	0e09      	lsrs	r1, r1, #24
 8004966:	eb06 2694 	add.w	r6, r6, r4, lsr #10
 800496a:	f85e 3023 	ldr.w	r3, [lr, r3, lsl #2]
 800496e:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
 8004972:	eb00 2096 	add.w	r0, r0, r6, lsr #10
 8004976:	eb03 2a90 	add.w	sl, r3, r0, lsr #10
 800497a:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 800497e:	f3ca 0309 	ubfx	r3, sl, #0, #10
 8004982:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8004986:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800498a:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800498e:	f3c1 0a09 	ubfx	sl, r1, #0, #10
 8004992:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8004996:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800499a:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800499e:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 80049a2:	ea4a 4a03 	orr.w	sl, sl, r3, lsl #16
 80049a6:	ea45 4808 	orr.w	r8, r5, r8, lsl #16
 80049aa:	0a8b      	lsrs	r3, r1, #10
 80049ac:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80049b0:	4939      	ldr	r1, [pc, #228]	; (8004a98 <D64_GENERIC+0x1fc>)
 80049b2:	9c00      	ldr	r4, [sp, #0]
 80049b4:	fb28 4101 	smlad	r1, r8, r1, r4
 80049b8:	4c38      	ldr	r4, [pc, #224]	; (8004a9c <D64_GENERIC+0x200>)
 80049ba:	fb27 1104 	smlad	r1, r7, r4, r1
 80049be:	4c38      	ldr	r4, [pc, #224]	; (8004aa0 <D64_GENERIC+0x204>)
 80049c0:	fb20 1104 	smlad	r1, r0, r4, r1
 80049c4:	f44f 3680 	mov.w	r6, #65536	; 0x10000
 80049c8:	fb2a 1106 	smlad	r1, sl, r6, r1
 80049cc:	4c35      	ldr	r4, [pc, #212]	; (8004aa4 <D64_GENERIC+0x208>)
 80049ce:	9d01      	ldr	r5, [sp, #4]
 80049d0:	fb28 5404 	smlad	r4, r8, r4, r5
 80049d4:	4d33      	ldr	r5, [pc, #204]	; (8004aa4 <D64_GENERIC+0x208>)
 80049d6:	fb2a 4415 	smladx	r4, sl, r5, r4
 80049da:	4d33      	ldr	r5, [pc, #204]	; (8004aa8 <D64_GENERIC+0x20c>)
 80049dc:	fb27 4405 	smlad	r4, r7, r5, r4
 80049e0:	fb20 4415 	smladx	r4, r0, r5, r4
 80049e4:	2501      	movs	r5, #1
 80049e6:	9400      	str	r4, [sp, #0]
 80049e8:	fb28 f805 	smuad	r8, r8, r5
 80049ec:	4c2f      	ldr	r4, [pc, #188]	; (8004aac <D64_GENERIC+0x210>)
 80049ee:	fb27 8704 	smlad	r7, r7, r4, r8
 80049f2:	4c2f      	ldr	r4, [pc, #188]	; (8004ab0 <D64_GENERIC+0x214>)
 80049f4:	fb20 7004 	smlad	r0, r0, r4, r7
 80049f8:	4c2e      	ldr	r4, [pc, #184]	; (8004ab4 <D64_GENERIC+0x218>)
 80049fa:	fb2a 0004 	smlad	r0, sl, r4, r0
 80049fe:	f5a1 3600 	sub.w	r6, r1, #131072	; 0x20000
 8004a02:	9902      	ldr	r1, [sp, #8]
 8004a04:	9001      	str	r0, [sp, #4]
 8004a06:	b189      	cbz	r1, 8004a2c <D64_GENERIC+0x190>
 8004a08:	9803      	ldr	r0, [sp, #12]
 8004a0a:	9c04      	ldr	r4, [sp, #16]
 8004a0c:	9604      	str	r6, [sp, #16]
 8004a0e:	4430      	add	r0, r6
 8004a10:	1b00      	subs	r0, r0, r4
 8004a12:	17c5      	asrs	r5, r0, #31
 8004a14:	460f      	mov	r7, r1
 8004a16:	fba0 0101 	umull	r0, r1, r0, r1
 8004a1a:	fb07 1105 	mla	r1, r7, r5, r1
 8004a1e:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 8004a22:	f141 0100 	adc.w	r1, r1, #0
 8004a26:	0049      	lsls	r1, r1, #1
 8004a28:	9103      	str	r1, [sp, #12]
 8004a2a:	460e      	mov	r6, r1
 8004a2c:	8d14      	ldrh	r4, [r2, #40]	; 0x28
 8004a2e:	9905      	ldr	r1, [sp, #20]
 8004a30:	9806      	ldr	r0, [sp, #24]
 8004a32:	02b6      	lsls	r6, r6, #10
 8004a34:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 8004a38:	f04f 0800 	mov.w	r8, #0
 8004a3c:	fb0c f404 	mul.w	r4, ip, r4
 8004a40:	fbc1 7806 	smlal	r7, r8, r1, r6
 8004a44:	4641      	mov	r1, r8
 8004a46:	1089      	asrs	r1, r1, #2
 8004a48:	f301 010f 	ssat	r1, #16, r1
 8004a4c:	f820 1014 	strh.w	r1, [r0, r4, lsl #1]
 8004a50:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
 8004a52:	f10c 0c01 	add.w	ip, ip, #1
 8004a56:	4561      	cmp	r1, ip
 8004a58:	dd0e      	ble.n	8004a78 <D64_GENERIC+0x1dc>
 8004a5a:	8d56      	ldrh	r6, [r2, #42]	; 0x2a
 8004a5c:	2e01      	cmp	r6, #1
 8004a5e:	f47f af3a 	bne.w	80048d6 <D64_GENERIC+0x3a>
 8004a62:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8004a64:	06b4      	lsls	r4, r6, #26
 8004a66:	e899 0003 	ldmia.w	r9, {r0, r1}
 8004a6a:	f109 0908 	add.w	r9, r9, #8
 8004a6e:	f57f af5a 	bpl.w	8004926 <D64_GENERIC+0x8a>
 8004a72:	ba40      	rev16	r0, r0
 8004a74:	ba49      	rev16	r1, r1
 8004a76:	e756      	b.n	8004926 <D64_GENERIC+0x8a>
 8004a78:	61d3      	str	r3, [r2, #28]
 8004a7a:	9b03      	ldr	r3, [sp, #12]
 8004a7c:	9901      	ldr	r1, [sp, #4]
 8004a7e:	6113      	str	r3, [r2, #16]
 8004a80:	9b04      	ldr	r3, [sp, #16]
 8004a82:	6091      	str	r1, [r2, #8]
 8004a84:	6153      	str	r3, [r2, #20]
 8004a86:	9900      	ldr	r1, [sp, #0]
 8004a88:	9b07      	ldr	r3, [sp, #28]
 8004a8a:	60d1      	str	r1, [r2, #12]
 8004a8c:	2000      	movs	r0, #0
 8004a8e:	6193      	str	r3, [r2, #24]
 8004a90:	b009      	add	sp, #36	; 0x24
 8004a92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a96:	bf00      	nop
 8004a98:	001c0015 	.word	0x001c0015
 8004a9c:	000f000a 	.word	0x000f000a
 8004aa0:	00060003 	.word	0x00060003
 8004aa4:	0024002a 	.word	0x0024002a
 8004aa8:	002e0030 	.word	0x002e0030
 8004aac:	00030006 	.word	0x00030006
 8004ab0:	000a000f 	.word	0x000a000f
 8004ab4:	0015001c 	.word	0x0015001c
 8004ab8:	20000000 	.word	0x20000000

08004abc <D80_GENERIC>:
 8004abc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ac0:	b08b      	sub	sp, #44	; 0x2c
 8004ac2:	6914      	ldr	r4, [r2, #16]
 8004ac4:	9404      	str	r4, [sp, #16]
 8004ac6:	6954      	ldr	r4, [r2, #20]
 8004ac8:	9405      	str	r4, [sp, #20]
 8004aca:	6994      	ldr	r4, [r2, #24]
 8004acc:	9409      	str	r4, [sp, #36]	; 0x24
 8004ace:	6894      	ldr	r4, [r2, #8]
 8004ad0:	9402      	str	r4, [sp, #8]
 8004ad2:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8004ad4:	68d4      	ldr	r4, [r2, #12]
 8004ad6:	9401      	str	r4, [sp, #4]
 8004ad8:	6b14      	ldr	r4, [r2, #48]	; 0x30
 8004ada:	f8d2 b01c 	ldr.w	fp, [r2, #28]
 8004ade:	9406      	str	r4, [sp, #24]
 8004ae0:	9107      	str	r1, [sp, #28]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	f000 810f 	beq.w	8004d06 <D80_GENERIC+0x24a>
 8004ae8:	6a13      	ldr	r3, [r2, #32]
 8004aea:	9308      	str	r3, [sp, #32]
 8004aec:	2300      	movs	r3, #0
 8004aee:	9200      	str	r2, [sp, #0]
 8004af0:	f8df 9264 	ldr.w	r9, [pc, #612]	; 8004d58 <D80_GENERIC+0x29c>
 8004af4:	f8cd b00c 	str.w	fp, [sp, #12]
 8004af8:	461a      	mov	r2, r3
 8004afa:	e0ed      	b.n	8004cd8 <D80_GENERIC+0x21c>
 8004afc:	fa5f fc8c 	uxtb.w	ip, ip
 8004b00:	fa0f f48c 	sxth.w	r4, ip
 8004b04:	0066      	lsls	r6, r4, #1
 8004b06:	eb06 0804 	add.w	r8, r6, r4
 8004b0a:	f1cc 0500 	rsb	r5, ip, #0
 8004b0e:	eb00 0108 	add.w	r1, r0, r8
 8004b12:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8004b16:	194b      	adds	r3, r1, r5
 8004b18:	5d49      	ldrb	r1, [r1, r5]
 8004b1a:	f810 a008 	ldrb.w	sl, [r0, r8]
 8004b1e:	f813 b004 	ldrb.w	fp, [r3, r4]
 8004b22:	f810 c00c 	ldrb.w	ip, [r0, ip]
 8004b26:	f890 8000 	ldrb.w	r8, [r0]
 8004b2a:	eb03 0e04 	add.w	lr, r3, r4
 8004b2e:	eb0e 0705 	add.w	r7, lr, r5
 8004b32:	0409      	lsls	r1, r1, #16
 8004b34:	f81e 3005 	ldrb.w	r3, [lr, r5]
 8004b38:	f81e e015 	ldrb.w	lr, [lr, r5, lsl #1]
 8004b3c:	eb01 610a 	add.w	r1, r1, sl, lsl #24
 8004b40:	eb07 0a45 	add.w	sl, r7, r5, lsl #1
 8004b44:	eb0a 0004 	add.w	r0, sl, r4
 8004b48:	041b      	lsls	r3, r3, #16
 8004b4a:	f81a a004 	ldrb.w	sl, [sl, r4]
 8004b4e:	f817 7015 	ldrb.w	r7, [r7, r5, lsl #1]
 8004b52:	5d44      	ldrb	r4, [r0, r5]
 8004b54:	eb03 630b 	add.w	r3, r3, fp, lsl #24
 8004b58:	eb01 210c 	add.w	r1, r1, ip, lsl #8
 8004b5c:	4428      	add	r0, r5
 8004b5e:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 8004b62:	4441      	add	r1, r8
 8004b64:	4430      	add	r0, r6
 8004b66:	eb04 240a 	add.w	r4, r4, sl, lsl #8
 8004b6a:	441f      	add	r7, r3
 8004b6c:	b2cd      	uxtb	r5, r1
 8004b6e:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8004b72:	f859 6025 	ldr.w	r6, [r9, r5, lsl #2]
 8004b76:	f859 e023 	ldr.w	lr, [r9, r3, lsl #2]
 8004b7a:	9b03      	ldr	r3, [sp, #12]
 8004b7c:	f3c1 4507 	ubfx	r5, r1, #16, #8
 8004b80:	0e09      	lsrs	r1, r1, #24
 8004b82:	4433      	add	r3, r6
 8004b84:	f859 8025 	ldr.w	r8, [r9, r5, lsl #2]
 8004b88:	f859 6021 	ldr.w	r6, [r9, r1, lsl #2]
 8004b8c:	b2fd      	uxtb	r5, r7
 8004b8e:	eb0e 2193 	add.w	r1, lr, r3, lsr #10
 8004b92:	469b      	mov	fp, r3
 8004b94:	f3c7 2307 	ubfx	r3, r7, #8, #8
 8004b98:	eb08 2891 	add.w	r8, r8, r1, lsr #10
 8004b9c:	f859 c025 	ldr.w	ip, [r9, r5, lsl #2]
 8004ba0:	f859 5023 	ldr.w	r5, [r9, r3, lsl #2]
 8004ba4:	f3c7 4e07 	ubfx	lr, r7, #16, #8
 8004ba8:	eb06 2698 	add.w	r6, r6, r8, lsr #10
 8004bac:	0e3b      	lsrs	r3, r7, #24
 8004bae:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 8004bb2:	f859 702e 	ldr.w	r7, [r9, lr, lsl #2]
 8004bb6:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8004bba:	fa5f fe84 	uxtb.w	lr, r4
 8004bbe:	eb05 259c 	add.w	r5, r5, ip, lsr #10
 8004bc2:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8004bc6:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 8004bca:	f859 e02e 	ldr.w	lr, [r9, lr, lsl #2]
 8004bce:	f859 4024 	ldr.w	r4, [r9, r4, lsl #2]
 8004bd2:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 8004bd6:	eb0e 2e93 	add.w	lr, lr, r3, lsr #10
 8004bda:	eb04 249e 	add.w	r4, r4, lr, lsr #10
 8004bde:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8004be2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004be6:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8004bea:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8004bee:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8004bf2:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8004bf6:	ea41 4b0b 	orr.w	fp, r1, fp, lsl #16
 8004bfa:	ea43 4707 	orr.w	r7, r3, r7, lsl #16
 8004bfe:	f3c4 0109 	ubfx	r1, r4, #0, #10
 8004c02:	0aa3      	lsrs	r3, r4, #10
 8004c04:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8004c08:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8004c0c:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8004c10:	ea41 4e0e 	orr.w	lr, r1, lr, lsl #16
 8004c14:	9303      	str	r3, [sp, #12]
 8004c16:	ea46 4808 	orr.w	r8, r6, r8, lsl #16
 8004c1a:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
 8004c1e:	4b42      	ldr	r3, [pc, #264]	; (8004d28 <D80_GENERIC+0x26c>)
 8004c20:	9901      	ldr	r1, [sp, #4]
 8004c22:	fb2b 1303 	smlad	r3, fp, r3, r1
 8004c26:	4941      	ldr	r1, [pc, #260]	; (8004d2c <D80_GENERIC+0x270>)
 8004c28:	fb28 3301 	smlad	r3, r8, r1, r3
 8004c2c:	4940      	ldr	r1, [pc, #256]	; (8004d30 <D80_GENERIC+0x274>)
 8004c2e:	fb2c 3301 	smlad	r3, ip, r1, r3
 8004c32:	4940      	ldr	r1, [pc, #256]	; (8004d34 <D80_GENERIC+0x278>)
 8004c34:	fb27 3301 	smlad	r3, r7, r1, r3
 8004c38:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8004c3c:	fb2e 3301 	smlad	r3, lr, r1, r3
 8004c40:	493d      	ldr	r1, [pc, #244]	; (8004d38 <D80_GENERIC+0x27c>)
 8004c42:	9c02      	ldr	r4, [sp, #8]
 8004c44:	fb2b 4401 	smlad	r4, fp, r1, r4
 8004c48:	493c      	ldr	r1, [pc, #240]	; (8004d3c <D80_GENERIC+0x280>)
 8004c4a:	fb28 4401 	smlad	r4, r8, r1, r4
 8004c4e:	f04f 114b 	mov.w	r1, #4915275	; 0x4b004b
 8004c52:	fb2c 4101 	smlad	r1, ip, r1, r4
 8004c56:	4c3a      	ldr	r4, [pc, #232]	; (8004d40 <D80_GENERIC+0x284>)
 8004c58:	fb27 1104 	smlad	r1, r7, r4, r1
 8004c5c:	4c39      	ldr	r4, [pc, #228]	; (8004d44 <D80_GENERIC+0x288>)
 8004c5e:	fb2e 1104 	smlad	r1, lr, r4, r1
 8004c62:	9101      	str	r1, [sp, #4]
 8004c64:	2101      	movs	r1, #1
 8004c66:	fb2b fb01 	smuad	fp, fp, r1
 8004c6a:	4937      	ldr	r1, [pc, #220]	; (8004d48 <D80_GENERIC+0x28c>)
 8004c6c:	fb28 b801 	smlad	r8, r8, r1, fp
 8004c70:	4d36      	ldr	r5, [pc, #216]	; (8004d4c <D80_GENERIC+0x290>)
 8004c72:	fb2c 8c05 	smlad	ip, ip, r5, r8
 8004c76:	4d36      	ldr	r5, [pc, #216]	; (8004d50 <D80_GENERIC+0x294>)
 8004c78:	fb27 c705 	smlad	r7, r7, r5, ip
 8004c7c:	4d35      	ldr	r5, [pc, #212]	; (8004d54 <D80_GENERIC+0x298>)
 8004c7e:	fb2e 7105 	smlad	r1, lr, r5, r7
 8004c82:	9102      	str	r1, [sp, #8]
 8004c84:	9908      	ldr	r1, [sp, #32]
 8004c86:	f5a3 337a 	sub.w	r3, r3, #256000	; 0x3e800
 8004c8a:	b181      	cbz	r1, 8004cae <D80_GENERIC+0x1f2>
 8004c8c:	9c04      	ldr	r4, [sp, #16]
 8004c8e:	9d05      	ldr	r5, [sp, #20]
 8004c90:	9305      	str	r3, [sp, #20]
 8004c92:	441c      	add	r4, r3
 8004c94:	1b64      	subs	r4, r4, r5
 8004c96:	17e7      	asrs	r7, r4, #31
 8004c98:	fba4 4501 	umull	r4, r5, r4, r1
 8004c9c:	fb01 5507 	mla	r5, r1, r7, r5
 8004ca0:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 8004ca4:	f145 0500 	adc.w	r5, r5, #0
 8004ca8:	0069      	lsls	r1, r5, #1
 8004caa:	9104      	str	r1, [sp, #16]
 8004cac:	460b      	mov	r3, r1
 8004cae:	9e00      	ldr	r6, [sp, #0]
 8004cb0:	9f06      	ldr	r7, [sp, #24]
 8004cb2:	8d31      	ldrh	r1, [r6, #40]	; 0x28
 8004cb4:	025b      	lsls	r3, r3, #9
 8004cb6:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8004cba:	2500      	movs	r5, #0
 8004cbc:	fb02 f101 	mul.w	r1, r2, r1
 8004cc0:	fbc7 4503 	smlal	r4, r5, r7, r3
 8004cc4:	9c07      	ldr	r4, [sp, #28]
 8004cc6:	10ab      	asrs	r3, r5, #2
 8004cc8:	f303 030f 	ssat	r3, #16, r3
 8004ccc:	f824 3011 	strh.w	r3, [r4, r1, lsl #1]
 8004cd0:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
 8004cd2:	3201      	adds	r2, #1
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	dd13      	ble.n	8004d00 <D80_GENERIC+0x244>
 8004cd8:	9b00      	ldr	r3, [sp, #0]
 8004cda:	f8b3 c02a 	ldrh.w	ip, [r3, #42]	; 0x2a
 8004cde:	f1bc 0f01 	cmp.w	ip, #1
 8004ce2:	f47f af0b 	bne.w	8004afc <D80_GENERIC+0x40>
 8004ce6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ce8:	6884      	ldr	r4, [r0, #8]
 8004cea:	069b      	lsls	r3, r3, #26
 8004cec:	e890 0082 	ldmia.w	r0, {r1, r7}
 8004cf0:	f100 000a 	add.w	r0, r0, #10
 8004cf4:	f57f af3a 	bpl.w	8004b6c <D80_GENERIC+0xb0>
 8004cf8:	ba49      	rev16	r1, r1
 8004cfa:	ba7f      	rev16	r7, r7
 8004cfc:	ba64      	rev16	r4, r4
 8004cfe:	e735      	b.n	8004b6c <D80_GENERIC+0xb0>
 8004d00:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8004d04:	4632      	mov	r2, r6
 8004d06:	9b02      	ldr	r3, [sp, #8]
 8004d08:	6093      	str	r3, [r2, #8]
 8004d0a:	9b01      	ldr	r3, [sp, #4]
 8004d0c:	60d3      	str	r3, [r2, #12]
 8004d0e:	9b04      	ldr	r3, [sp, #16]
 8004d10:	6113      	str	r3, [r2, #16]
 8004d12:	9b05      	ldr	r3, [sp, #20]
 8004d14:	6153      	str	r3, [r2, #20]
 8004d16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d18:	f8c2 b01c 	str.w	fp, [r2, #28]
 8004d1c:	2000      	movs	r0, #0
 8004d1e:	6193      	str	r3, [r2, #24]
 8004d20:	b00b      	add	sp, #44	; 0x2c
 8004d22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d26:	bf00      	nop
 8004d28:	002d0024 	.word	0x002d0024
 8004d2c:	001c0015 	.word	0x001c0015
 8004d30:	000f000a 	.word	0x000f000a
 8004d34:	00060003 	.word	0x00060003
 8004d38:	0037003f 	.word	0x0037003f
 8004d3c:	00450049 	.word	0x00450049
 8004d40:	00490045 	.word	0x00490045
 8004d44:	003f0037 	.word	0x003f0037
 8004d48:	00030006 	.word	0x00030006
 8004d4c:	000a000f 	.word	0x000a000f
 8004d50:	0015001c 	.word	0x0015001c
 8004d54:	0024002d 	.word	0x0024002d
 8004d58:	20000000 	.word	0x20000000

08004d5c <D128_GENERIC>:
 8004d5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d60:	b093      	sub	sp, #76	; 0x4c
 8004d62:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8004d64:	9005      	str	r0, [sp, #20]
 8004d66:	4610      	mov	r0, r2
 8004d68:	9201      	str	r2, [sp, #4]
 8004d6a:	6912      	ldr	r2, [r2, #16]
 8004d6c:	920c      	str	r2, [sp, #48]	; 0x30
 8004d6e:	4602      	mov	r2, r0
 8004d70:	6940      	ldr	r0, [r0, #20]
 8004d72:	900d      	str	r0, [sp, #52]	; 0x34
 8004d74:	4610      	mov	r0, r2
 8004d76:	4614      	mov	r4, r2
 8004d78:	6992      	ldr	r2, [r2, #24]
 8004d7a:	9211      	str	r2, [sp, #68]	; 0x44
 8004d7c:	69c2      	ldr	r2, [r0, #28]
 8004d7e:	9202      	str	r2, [sp, #8]
 8004d80:	68e2      	ldr	r2, [r4, #12]
 8004d82:	6880      	ldr	r0, [r0, #8]
 8004d84:	9203      	str	r2, [sp, #12]
 8004d86:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004d88:	9004      	str	r0, [sp, #16]
 8004d8a:	920e      	str	r2, [sp, #56]	; 0x38
 8004d8c:	910f      	str	r1, [sp, #60]	; 0x3c
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	f000 819b 	beq.w	80050ca <D128_GENERIC+0x36e>
 8004d94:	6a23      	ldr	r3, [r4, #32]
 8004d96:	9310      	str	r3, [sp, #64]	; 0x40
 8004d98:	2300      	movs	r3, #0
 8004d9a:	f8df 93a8 	ldr.w	r9, [pc, #936]	; 8005144 <D128_GENERIC+0x3e8>
 8004d9e:	9306      	str	r3, [sp, #24]
 8004da0:	e17a      	b.n	8005098 <D128_GENERIC+0x33c>
 8004da2:	b2d2      	uxtb	r2, r2
 8004da4:	9d05      	ldr	r5, [sp, #20]
 8004da6:	b214      	sxth	r4, r2
 8004da8:	eb04 0a44 	add.w	sl, r4, r4, lsl #1
 8004dac:	4250      	negs	r0, r2
 8004dae:	eb05 010a 	add.w	r1, r5, sl
 8004db2:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004db6:	eb01 0800 	add.w	r8, r1, r0
 8004dba:	eb0b 0c04 	add.w	ip, fp, r4
 8004dbe:	eb08 070c 	add.w	r7, r8, ip
 8004dc2:	183b      	adds	r3, r7, r0
 8004dc4:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 8004dc8:	eb03 0e40 	add.w	lr, r3, r0, lsl #1
 8004dcc:	eb0e 0604 	add.w	r6, lr, r4
 8004dd0:	9307      	str	r3, [sp, #28]
 8004dd2:	1833      	adds	r3, r6, r0
 8004dd4:	9305      	str	r3, [sp, #20]
 8004dd6:	462b      	mov	r3, r5
 8004dd8:	f815 a00a 	ldrb.w	sl, [r5, sl]
 8004ddc:	f8cd a020 	str.w	sl, [sp, #32]
 8004de0:	f818 a00c 	ldrb.w	sl, [r8, ip]
 8004de4:	f813 c002 	ldrb.w	ip, [r3, r2]
 8004de8:	f81e 8004 	ldrb.w	r8, [lr, r4]
 8004dec:	5c3a      	ldrb	r2, [r7, r0]
 8004dee:	f817 e010 	ldrb.w	lr, [r7, r0, lsl #1]
 8004df2:	781f      	ldrb	r7, [r3, #0]
 8004df4:	9b07      	ldr	r3, [sp, #28]
 8004df6:	9d05      	ldr	r5, [sp, #20]
 8004df8:	f813 3010 	ldrb.w	r3, [r3, r0, lsl #1]
 8004dfc:	5c09      	ldrb	r1, [r1, r0]
 8004dfe:	9709      	str	r7, [sp, #36]	; 0x24
 8004e00:	9307      	str	r3, [sp, #28]
 8004e02:	f816 7010 	ldrb.w	r7, [r6, r0, lsl #1]
 8004e06:	5c33      	ldrb	r3, [r6, r0]
 8004e08:	0412      	lsls	r2, r2, #16
 8004e0a:	eb05 0640 	add.w	r6, r5, r0, lsl #1
 8004e0e:	eb02 620a 	add.w	r2, r2, sl, lsl #24
 8004e12:	9d08      	ldr	r5, [sp, #32]
 8004e14:	eb06 0a04 	add.w	sl, r6, r4
 8004e18:	0409      	lsls	r1, r1, #16
 8004e1a:	eb01 6105 	add.w	r1, r1, r5, lsl #24
 8004e1e:	f81a 5000 	ldrb.w	r5, [sl, r0]
 8004e22:	5d36      	ldrb	r6, [r6, r4]
 8004e24:	9c05      	ldr	r4, [sp, #20]
 8004e26:	042d      	lsls	r5, r5, #16
 8004e28:	eb05 6606 	add.w	r6, r5, r6, lsl #24
 8004e2c:	eb01 210c 	add.w	r1, r1, ip, lsl #8
 8004e30:	f81a 5010 	ldrb.w	r5, [sl, r0, lsl #1]
 8004e34:	f814 4010 	ldrb.w	r4, [r4, r0, lsl #1]
 8004e38:	eb0a 0c00 	add.w	ip, sl, r0
 8004e3c:	041b      	lsls	r3, r3, #16
 8004e3e:	eb03 6308 	add.w	r3, r3, r8, lsl #24
 8004e42:	eb06 2605 	add.w	r6, r6, r5, lsl #8
 8004e46:	f81c a010 	ldrb.w	sl, [ip, r0, lsl #1]
 8004e4a:	9d07      	ldr	r5, [sp, #28]
 8004e4c:	eb03 2307 	add.w	r3, r3, r7, lsl #8
 8004e50:	eb0c 0040 	add.w	r0, ip, r0, lsl #1
 8004e54:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8004e56:	4458      	add	r0, fp
 8004e58:	eb02 220e 	add.w	r2, r2, lr, lsl #8
 8004e5c:	9005      	str	r0, [sp, #20]
 8004e5e:	4439      	add	r1, r7
 8004e60:	442a      	add	r2, r5
 8004e62:	44b2      	add	sl, r6
 8004e64:	1918      	adds	r0, r3, r4
 8004e66:	b2cb      	uxtb	r3, r1
 8004e68:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8004e6c:	9e02      	ldr	r6, [sp, #8]
 8004e6e:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8004e72:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
 8004e76:	f3c1 4407 	ubfx	r4, r1, #16, #8
 8004e7a:	441e      	add	r6, r3
 8004e7c:	0e09      	lsrs	r1, r1, #24
 8004e7e:	4633      	mov	r3, r6
 8004e80:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 8004e84:	f859 7021 	ldr.w	r7, [r9, r1, lsl #2]
 8004e88:	b2d4      	uxtb	r4, r2
 8004e8a:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 8004e8e:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8004e92:	eb06 2b95 	add.w	fp, r6, r5, lsr #10
 8004e96:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 8004e9a:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8004e9e:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8004ea2:	0e12      	lsrs	r2, r2, #24
 8004ea4:	eb07 279b 	add.w	r7, r7, fp, lsr #10
 8004ea8:	eb06 2897 	add.w	r8, r6, r7, lsr #10
 8004eac:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 8004eb0:	f859 4022 	ldr.w	r4, [r9, r2, lsl #2]
 8004eb4:	9702      	str	r7, [sp, #8]
 8004eb6:	b2c2      	uxtb	r2, r0
 8004eb8:	eb01 2198 	add.w	r1, r1, r8, lsr #10
 8004ebc:	eb06 2c91 	add.w	ip, r6, r1, lsr #10
 8004ec0:	f859 6022 	ldr.w	r6, [r9, r2, lsl #2]
 8004ec4:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 8004ec8:	f3c0 2207 	ubfx	r2, r0, #8, #8
 8004ecc:	eb06 2e94 	add.w	lr, r6, r4, lsr #10
 8004ed0:	f3c0 4607 	ubfx	r6, r0, #16, #8
 8004ed4:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 8004ed8:	f859 7026 	ldr.w	r7, [r9, r6, lsl #2]
 8004edc:	0e00      	lsrs	r0, r0, #24
 8004ede:	fa5f f68a 	uxtb.w	r6, sl
 8004ee2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ee6:	9309      	str	r3, [sp, #36]	; 0x24
 8004ee8:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 8004eec:	f859 6026 	ldr.w	r6, [r9, r6, lsl #2]
 8004ef0:	eb02 229e 	add.w	r2, r2, lr, lsr #10
 8004ef4:	f3ca 2307 	ubfx	r3, sl, #8, #8
 8004ef8:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8004efc:	950a      	str	r5, [sp, #40]	; 0x28
 8004efe:	eb07 2792 	add.w	r7, r7, r2, lsr #10
 8004f02:	f3ca 4507 	ubfx	r5, sl, #16, #8
 8004f06:	eb00 2097 	add.w	r0, r0, r7, lsr #10
 8004f0a:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8004f0e:	f859 5025 	ldr.w	r5, [r9, r5, lsl #2]
 8004f12:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8004f16:	920b      	str	r2, [sp, #44]	; 0x2c
 8004f18:	eb06 2690 	add.w	r6, r6, r0, lsr #10
 8004f1c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004f1e:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 8004f22:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8004f26:	9307      	str	r3, [sp, #28]
 8004f28:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 8004f2c:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 8004f30:	9b02      	ldr	r3, [sp, #8]
 8004f32:	f8cd c008 	str.w	ip, [sp, #8]
 8004f36:	4694      	mov	ip, r2
 8004f38:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004f3a:	f859 a02a 	ldr.w	sl, [r9, sl, lsl #2]
 8004f3e:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8004f42:	9a02      	ldr	r2, [sp, #8]
 8004f44:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8004f48:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 8004f4c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8004f50:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004f52:	f8cd a020 	str.w	sl, [sp, #32]
 8004f56:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8004f5a:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8004f5e:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8004f62:	9b07      	ldr	r3, [sp, #28]
 8004f64:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8004f68:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8004f6c:	ea42 480e 	orr.w	r8, r2, lr, lsl #16
 8004f70:	9a08      	ldr	r2, [sp, #32]
 8004f72:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8004f76:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f7a:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8004f7e:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8004f82:	f3c2 0e09 	ubfx	lr, r2, #0, #10
 8004f86:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8004f8a:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8004f8e:	0a96      	lsrs	r6, r2, #10
 8004f90:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8004f94:	9602      	str	r6, [sp, #8]
 8004f96:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8004f9a:	ea4a 4a0b 	orr.w	sl, sl, fp, lsl #16
 8004f9e:	ea4e 4505 	orr.w	r5, lr, r5, lsl #16
 8004fa2:	4e53      	ldr	r6, [pc, #332]	; (80050f0 <D128_GENERIC+0x394>)
 8004fa4:	9f03      	ldr	r7, [sp, #12]
 8004fa6:	fb2c 7606 	smlad	r6, ip, r6, r7
 8004faa:	4f52      	ldr	r7, [pc, #328]	; (80050f4 <D128_GENERIC+0x398>)
 8004fac:	fb2a 6607 	smlad	r6, sl, r7, r6
 8004fb0:	4f51      	ldr	r7, [pc, #324]	; (80050f8 <D128_GENERIC+0x39c>)
 8004fb2:	fb21 6607 	smlad	r6, r1, r7, r6
 8004fb6:	4f51      	ldr	r7, [pc, #324]	; (80050fc <D128_GENERIC+0x3a0>)
 8004fb8:	fb24 6607 	smlad	r6, r4, r7, r6
 8004fbc:	4f50      	ldr	r7, [pc, #320]	; (8005100 <D128_GENERIC+0x3a4>)
 8004fbe:	fb28 6607 	smlad	r6, r8, r7, r6
 8004fc2:	4f50      	ldr	r7, [pc, #320]	; (8005104 <D128_GENERIC+0x3a8>)
 8004fc4:	fb20 6607 	smlad	r6, r0, r7, r6
 8004fc8:	4f4f      	ldr	r7, [pc, #316]	; (8005108 <D128_GENERIC+0x3ac>)
 8004fca:	fb23 6607 	smlad	r6, r3, r7, r6
 8004fce:	f44f 3780 	mov.w	r7, #65536	; 0x10000
 8004fd2:	fb25 6607 	smlad	r6, r5, r7, r6
 8004fd6:	4f4d      	ldr	r7, [pc, #308]	; (800510c <D128_GENERIC+0x3b0>)
 8004fd8:	9a04      	ldr	r2, [sp, #16]
 8004fda:	fb2c 2e07 	smlad	lr, ip, r7, r2
 8004fde:	4a4c      	ldr	r2, [pc, #304]	; (8005110 <D128_GENERIC+0x3b4>)
 8004fe0:	fb2a ee02 	smlad	lr, sl, r2, lr
 8004fe4:	4f4b      	ldr	r7, [pc, #300]	; (8005114 <D128_GENERIC+0x3b8>)
 8004fe6:	fb21 ee07 	smlad	lr, r1, r7, lr
 8004fea:	4f4b      	ldr	r7, [pc, #300]	; (8005118 <D128_GENERIC+0x3bc>)
 8004fec:	fb24 ee07 	smlad	lr, r4, r7, lr
 8004ff0:	4f4a      	ldr	r7, [pc, #296]	; (800511c <D128_GENERIC+0x3c0>)
 8004ff2:	fb28 ee07 	smlad	lr, r8, r7, lr
 8004ff6:	4f4a      	ldr	r7, [pc, #296]	; (8005120 <D128_GENERIC+0x3c4>)
 8004ff8:	fb20 ee07 	smlad	lr, r0, r7, lr
 8004ffc:	4f49      	ldr	r7, [pc, #292]	; (8005124 <D128_GENERIC+0x3c8>)
 8004ffe:	fb23 e707 	smlad	r7, r3, r7, lr
 8005002:	f8df e144 	ldr.w	lr, [pc, #324]	; 8005148 <D128_GENERIC+0x3ec>
 8005006:	fb25 720e 	smlad	r2, r5, lr, r7
 800500a:	f04f 0b01 	mov.w	fp, #1
 800500e:	9203      	str	r2, [sp, #12]
 8005010:	fb2c fb0b 	smuad	fp, ip, fp
 8005014:	4f44      	ldr	r7, [pc, #272]	; (8005128 <D128_GENERIC+0x3cc>)
 8005016:	fb2a ba07 	smlad	sl, sl, r7, fp
 800501a:	4f44      	ldr	r7, [pc, #272]	; (800512c <D128_GENERIC+0x3d0>)
 800501c:	fb21 aa07 	smlad	sl, r1, r7, sl
 8005020:	4f43      	ldr	r7, [pc, #268]	; (8005130 <D128_GENERIC+0x3d4>)
 8005022:	fb24 aa07 	smlad	sl, r4, r7, sl
 8005026:	4f43      	ldr	r7, [pc, #268]	; (8005134 <D128_GENERIC+0x3d8>)
 8005028:	fb28 a707 	smlad	r7, r8, r7, sl
 800502c:	4a42      	ldr	r2, [pc, #264]	; (8005138 <D128_GENERIC+0x3dc>)
 800502e:	fb20 7702 	smlad	r7, r0, r2, r7
 8005032:	4a42      	ldr	r2, [pc, #264]	; (800513c <D128_GENERIC+0x3e0>)
 8005034:	fb23 7702 	smlad	r7, r3, r2, r7
 8005038:	4b41      	ldr	r3, [pc, #260]	; (8005140 <D128_GENERIC+0x3e4>)
 800503a:	fb25 7303 	smlad	r3, r5, r3, r7
 800503e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005040:	9304      	str	r3, [sp, #16]
 8005042:	f5a6 1680 	sub.w	r6, r6, #1048576	; 0x100000
 8005046:	b185      	cbz	r5, 800506a <D128_GENERIC+0x30e>
 8005048:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800504a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800504c:	960d      	str	r6, [sp, #52]	; 0x34
 800504e:	4432      	add	r2, r6
 8005050:	1a52      	subs	r2, r2, r1
 8005052:	17d1      	asrs	r1, r2, #31
 8005054:	fba2 2305 	umull	r2, r3, r2, r5
 8005058:	fb05 3301 	mla	r3, r5, r1, r3
 800505c:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 8005060:	f143 0300 	adc.w	r3, r3, #0
 8005064:	005b      	lsls	r3, r3, #1
 8005066:	930c      	str	r3, [sp, #48]	; 0x30
 8005068:	461e      	mov	r6, r3
 800506a:	9801      	ldr	r0, [sp, #4]
 800506c:	9c06      	ldr	r4, [sp, #24]
 800506e:	8d01      	ldrh	r1, [r0, #40]	; 0x28
 8005070:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8005072:	01f6      	lsls	r6, r6, #7
 8005074:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005078:	2300      	movs	r3, #0
 800507a:	fbc5 2306 	smlal	r2, r3, r5, r6
 800507e:	fb04 f101 	mul.w	r1, r4, r1
 8005082:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005084:	109b      	asrs	r3, r3, #2
 8005086:	f303 030f 	ssat	r3, #16, r3
 800508a:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
 800508e:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 8005090:	1c62      	adds	r2, r4, #1
 8005092:	4293      	cmp	r3, r2
 8005094:	9206      	str	r2, [sp, #24]
 8005096:	dd18      	ble.n	80050ca <D128_GENERIC+0x36e>
 8005098:	9b01      	ldr	r3, [sp, #4]
 800509a:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800509c:	2a01      	cmp	r2, #1
 800509e:	f47f ae80 	bne.w	8004da2 <D128_GENERIC+0x46>
 80050a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050a4:	9d05      	ldr	r5, [sp, #20]
 80050a6:	069b      	lsls	r3, r3, #26
 80050a8:	6829      	ldr	r1, [r5, #0]
 80050aa:	686a      	ldr	r2, [r5, #4]
 80050ac:	68a8      	ldr	r0, [r5, #8]
 80050ae:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 80050b2:	f105 0410 	add.w	r4, r5, #16
 80050b6:	d506      	bpl.n	80050c6 <D128_GENERIC+0x36a>
 80050b8:	ba49      	rev16	r1, r1
 80050ba:	ba52      	rev16	r2, r2
 80050bc:	ba40      	rev16	r0, r0
 80050be:	fa9a fa9a 	rev16.w	sl, sl
 80050c2:	9405      	str	r4, [sp, #20]
 80050c4:	e6cf      	b.n	8004e66 <D128_GENERIC+0x10a>
 80050c6:	9405      	str	r4, [sp, #20]
 80050c8:	e6cd      	b.n	8004e66 <D128_GENERIC+0x10a>
 80050ca:	9a01      	ldr	r2, [sp, #4]
 80050cc:	9904      	ldr	r1, [sp, #16]
 80050ce:	6091      	str	r1, [r2, #8]
 80050d0:	9903      	ldr	r1, [sp, #12]
 80050d2:	60d1      	str	r1, [r2, #12]
 80050d4:	9b02      	ldr	r3, [sp, #8]
 80050d6:	61d3      	str	r3, [r2, #28]
 80050d8:	4611      	mov	r1, r2
 80050da:	4613      	mov	r3, r2
 80050dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80050de:	610a      	str	r2, [r1, #16]
 80050e0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80050e2:	6159      	str	r1, [r3, #20]
 80050e4:	9911      	ldr	r1, [sp, #68]	; 0x44
 80050e6:	6199      	str	r1, [r3, #24]
 80050e8:	2000      	movs	r0, #0
 80050ea:	b013      	add	sp, #76	; 0x4c
 80050ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050f0:	00780069 	.word	0x00780069
 80050f4:	005b004e 	.word	0x005b004e
 80050f8:	00420037 	.word	0x00420037
 80050fc:	002d0024 	.word	0x002d0024
 8005100:	001c0015 	.word	0x001c0015
 8005104:	000f000a 	.word	0x000f000a
 8005108:	00060003 	.word	0x00060003
 800510c:	00880096 	.word	0x00880096
 8005110:	00a200ac 	.word	0x00a200ac
 8005114:	00b400ba 	.word	0x00b400ba
 8005118:	00be00c0 	.word	0x00be00c0
 800511c:	00c000be 	.word	0x00c000be
 8005120:	00ba00b4 	.word	0x00ba00b4
 8005124:	00ac00a2 	.word	0x00ac00a2
 8005128:	00030006 	.word	0x00030006
 800512c:	000a000f 	.word	0x000a000f
 8005130:	0015001c 	.word	0x0015001c
 8005134:	0024002d 	.word	0x0024002d
 8005138:	00370042 	.word	0x00370042
 800513c:	004e005b 	.word	0x004e005b
 8005140:	00690078 	.word	0x00690078
 8005144:	20000000 	.word	0x20000000
 8005148:	00960088 	.word	0x00960088

0800514c <D16_1CH_HTONS_VOL_HP>:
 800514c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005150:	4691      	mov	r9, r2
 8005152:	b083      	sub	sp, #12
 8005154:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 8005156:	f8d9 3018 	ldr.w	r3, [r9, #24]
 800515a:	f8d9 400c 	ldr.w	r4, [r9, #12]
 800515e:	9300      	str	r3, [sp, #0]
 8005160:	4680      	mov	r8, r0
 8005162:	f8d9 7014 	ldr.w	r7, [r9, #20]
 8005166:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800516a:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800516e:	f8d9 5008 	ldr.w	r5, [r9, #8]
 8005172:	9401      	str	r4, [sp, #4]
 8005174:	f8d9 a030 	ldr.w	sl, [r9, #48]	; 0x30
 8005178:	f8d9 e020 	ldr.w	lr, [r9, #32]
 800517c:	2a00      	cmp	r2, #0
 800517e:	d04e      	beq.n	800521e <D16_1CH_HTONS_VOL_HP+0xd2>
 8005180:	f8df c0a8 	ldr.w	ip, [pc, #168]	; 800522c <D16_1CH_HTONS_VOL_HP+0xe0>
 8005184:	1e8c      	subs	r4, r1, #2
 8005186:	eb08 0b42 	add.w	fp, r8, r2, lsl #1
 800518a:	f858 2b02 	ldr.w	r2, [r8], #2
 800518e:	ba52      	rev16	r2, r2
 8005190:	b2d6      	uxtb	r6, r2
 8005192:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8005196:	f85c 2026 	ldr.w	r2, [ip, r6, lsl #2]
 800519a:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
 800519e:	4413      	add	r3, r2
 80051a0:	eb01 2293 	add.w	r2, r1, r3, lsr #10
 80051a4:	f3c2 0109 	ubfx	r1, r2, #0, #10
 80051a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80051ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80051b0:	0a93      	lsrs	r3, r2, #10
 80051b2:	4a1c      	ldr	r2, [pc, #112]	; (8005224 <D16_1CH_HTONS_VOL_HP+0xd8>)
 80051b4:	fb21 5202 	smlad	r2, r1, r2, r5
 80051b8:	4d1b      	ldr	r5, [pc, #108]	; (8005228 <D16_1CH_HTONS_VOL_HP+0xdc>)
 80051ba:	fb21 f505 	smuad	r5, r1, r5
 80051be:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
 80051c2:	4410      	add	r0, r2
 80051c4:	1bc0      	subs	r0, r0, r7
 80051c6:	17c7      	asrs	r7, r0, #31
 80051c8:	fba0 010e 	umull	r0, r1, r0, lr
 80051cc:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 80051d0:	fb0e 1107 	mla	r1, lr, r7, r1
 80051d4:	f141 0100 	adc.w	r1, r1, #0
 80051d8:	0448      	lsls	r0, r1, #17
 80051da:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80051de:	2700      	movs	r7, #0
 80051e0:	fbc0 670a 	smlal	r6, r7, r0, sl
 80051e4:	45d8      	cmp	r8, fp
 80051e6:	ea4f 0041 	mov.w	r0, r1, lsl #1
 80051ea:	ea4f 01a7 	mov.w	r1, r7, asr #2
 80051ee:	4617      	mov	r7, r2
 80051f0:	f301 010f 	ssat	r1, #16, r1
 80051f4:	f824 1f02 	strh.w	r1, [r4, #2]!
 80051f8:	d1c7      	bne.n	800518a <D16_1CH_HTONS_VOL_HP+0x3e>
 80051fa:	9901      	ldr	r1, [sp, #4]
 80051fc:	f8c9 301c 	str.w	r3, [r9, #28]
 8005200:	9b00      	ldr	r3, [sp, #0]
 8005202:	f8c9 0010 	str.w	r0, [r9, #16]
 8005206:	2000      	movs	r0, #0
 8005208:	f8c9 5008 	str.w	r5, [r9, #8]
 800520c:	f8c9 100c 	str.w	r1, [r9, #12]
 8005210:	f8c9 2014 	str.w	r2, [r9, #20]
 8005214:	f8c9 3018 	str.w	r3, [r9, #24]
 8005218:	b003      	add	sp, #12
 800521a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800521e:	463a      	mov	r2, r7
 8005220:	4621      	mov	r1, r4
 8005222:	e7eb      	b.n	80051fc <D16_1CH_HTONS_VOL_HP+0xb0>
 8005224:	00030001 	.word	0x00030001
 8005228:	00010003 	.word	0x00010003
 800522c:	20000000 	.word	0x20000000

08005230 <D24_1CH_HTONS_VOL_HP>:
 8005230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005234:	b089      	sub	sp, #36	; 0x24
 8005236:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8005238:	6996      	ldr	r6, [r2, #24]
 800523a:	9304      	str	r3, [sp, #16]
 800523c:	6b17      	ldr	r7, [r2, #48]	; 0x30
 800523e:	9207      	str	r2, [sp, #28]
 8005240:	6915      	ldr	r5, [r2, #16]
 8005242:	6954      	ldr	r4, [r2, #20]
 8005244:	9606      	str	r6, [sp, #24]
 8005246:	6893      	ldr	r3, [r2, #8]
 8005248:	69d6      	ldr	r6, [r2, #28]
 800524a:	f8d2 c00c 	ldr.w	ip, [r2, #12]
 800524e:	f8d2 a020 	ldr.w	sl, [r2, #32]
 8005252:	9a04      	ldr	r2, [sp, #16]
 8005254:	9705      	str	r7, [sp, #20]
 8005256:	2a00      	cmp	r2, #0
 8005258:	d07e      	beq.n	8005358 <D24_1CH_HTONS_VOL_HP+0x128>
 800525a:	f1a1 0b02 	sub.w	fp, r1, #2
 800525e:	2700      	movs	r7, #0
 8005260:	46a8      	mov	r8, r5
 8005262:	f8cd b004 	str.w	fp, [sp, #4]
 8005266:	4655      	mov	r5, sl
 8005268:	46e3      	mov	fp, ip
 800526a:	f8df e0f8 	ldr.w	lr, [pc, #248]	; 8005364 <D24_1CH_HTONS_VOL_HP+0x134>
 800526e:	46ba      	mov	sl, r7
 8005270:	469c      	mov	ip, r3
 8005272:	e055      	b.n	8005320 <D24_1CH_HTONS_VOL_HP+0xf0>
 8005274:	7802      	ldrb	r2, [r0, #0]
 8005276:	78c3      	ldrb	r3, [r0, #3]
 8005278:	7841      	ldrb	r1, [r0, #1]
 800527a:	0212      	lsls	r2, r2, #8
 800527c:	eb02 4303 	add.w	r3, r2, r3, lsl #16
 8005280:	440b      	add	r3, r1
 8005282:	3002      	adds	r0, #2
 8005284:	b2d9      	uxtb	r1, r3
 8005286:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800528a:	f85e 7021 	ldr.w	r7, [lr, r1, lsl #2]
 800528e:	f85e 2022 	ldr.w	r2, [lr, r2, lsl #2]
 8005292:	0c1b      	lsrs	r3, r3, #16
 8005294:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 8005298:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 800529c:	f85e 6023 	ldr.w	r6, [lr, r3, lsl #2]
 80052a0:	f3c7 0309 	ubfx	r3, r7, #0, #10
 80052a4:	f3c2 0709 	ubfx	r7, r2, #0, #10
 80052a8:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 80052ac:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 80052b0:	4a2a      	ldr	r2, [pc, #168]	; (800535c <D24_1CH_HTONS_VOL_HP+0x12c>)
 80052b2:	fb23 b102 	smlad	r1, r3, r2, fp
 80052b6:	4a2a      	ldr	r2, [pc, #168]	; (8005360 <D24_1CH_HTONS_VOL_HP+0x130>)
 80052b8:	fb23 cb02 	smlad	fp, r3, r2, ip
 80052bc:	f3c6 0c09 	ubfx	ip, r6, #0, #10
 80052c0:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80052c4:	eb0b 0b4c 	add.w	fp, fp, ip, lsl #1
 80052c8:	2201      	movs	r2, #1
 80052ca:	fb23 f702 	smuad	r7, r3, r2
 80052ce:	f5a1 51d8 	sub.w	r1, r1, #6912	; 0x1b00
 80052d2:	eb01 0208 	add.w	r2, r1, r8
 80052d6:	1b12      	subs	r2, r2, r4
 80052d8:	17d4      	asrs	r4, r2, #31
 80052da:	fba2 2305 	umull	r2, r3, r2, r5
 80052de:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 80052e2:	fb05 3304 	mla	r3, r5, r4, r3
 80052e6:	f143 0300 	adc.w	r3, r3, #0
 80052ea:	9c05      	ldr	r4, [sp, #20]
 80052ec:	03da      	lsls	r2, r3, #15
 80052ee:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 80052f2:	f04f 0900 	mov.w	r9, #0
 80052f6:	fbc4 8902 	smlal	r8, r9, r4, r2
 80052fa:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80052fe:	9a01      	ldr	r2, [sp, #4]
 8005300:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8005304:	9b03      	ldr	r3, [sp, #12]
 8005306:	109b      	asrs	r3, r3, #2
 8005308:	f303 030f 	ssat	r3, #16, r3
 800530c:	f822 3f02 	strh.w	r3, [r2, #2]!
 8005310:	9b04      	ldr	r3, [sp, #16]
 8005312:	9201      	str	r2, [sp, #4]
 8005314:	f10a 0a01 	add.w	sl, sl, #1
 8005318:	459a      	cmp	sl, r3
 800531a:	44bc      	add	ip, r7
 800531c:	460c      	mov	r4, r1
 800531e:	d00b      	beq.n	8005338 <D24_1CH_HTONS_VOL_HP+0x108>
 8005320:	f01a 0f01 	tst.w	sl, #1
 8005324:	d0a6      	beq.n	8005274 <D24_1CH_HTONS_VOL_HP+0x44>
 8005326:	78c2      	ldrb	r2, [r0, #3]
 8005328:	7883      	ldrb	r3, [r0, #2]
 800532a:	f810 1b04 	ldrb.w	r1, [r0], #4
 800532e:	0212      	lsls	r2, r2, #8
 8005330:	eb02 4303 	add.w	r3, r2, r3, lsl #16
 8005334:	440b      	add	r3, r1
 8005336:	e7a5      	b.n	8005284 <D24_1CH_HTONS_VOL_HP+0x54>
 8005338:	4663      	mov	r3, ip
 800533a:	4645      	mov	r5, r8
 800533c:	46dc      	mov	ip, fp
 800533e:	9807      	ldr	r0, [sp, #28]
 8005340:	6141      	str	r1, [r0, #20]
 8005342:	9906      	ldr	r1, [sp, #24]
 8005344:	6083      	str	r3, [r0, #8]
 8005346:	f8c0 c00c 	str.w	ip, [r0, #12]
 800534a:	61c6      	str	r6, [r0, #28]
 800534c:	6105      	str	r5, [r0, #16]
 800534e:	6181      	str	r1, [r0, #24]
 8005350:	2000      	movs	r0, #0
 8005352:	b009      	add	sp, #36	; 0x24
 8005354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005358:	4621      	mov	r1, r4
 800535a:	e7f0      	b.n	800533e <D24_1CH_HTONS_VOL_HP+0x10e>
 800535c:	00030001 	.word	0x00030001
 8005360:	00060007 	.word	0x00060007
 8005364:	20000000 	.word	0x20000000

08005368 <D32_1CH_HTONS_VOL_HP>:
 8005368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800536c:	4692      	mov	sl, r2
 800536e:	b087      	sub	sp, #28
 8005370:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 8005372:	f8da 3018 	ldr.w	r3, [sl, #24]
 8005376:	f8da 5030 	ldr.w	r5, [sl, #48]	; 0x30
 800537a:	9304      	str	r3, [sp, #16]
 800537c:	f8da 4010 	ldr.w	r4, [sl, #16]
 8005380:	f8da 8014 	ldr.w	r8, [sl, #20]
 8005384:	f8da 601c 	ldr.w	r6, [sl, #28]
 8005388:	f8da 3008 	ldr.w	r3, [sl, #8]
 800538c:	f8da e00c 	ldr.w	lr, [sl, #12]
 8005390:	9501      	str	r5, [sp, #4]
 8005392:	f8da c020 	ldr.w	ip, [sl, #32]
 8005396:	2a00      	cmp	r2, #0
 8005398:	d07b      	beq.n	8005492 <D32_1CH_HTONS_VOL_HP+0x12a>
 800539a:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800539e:	4f3e      	ldr	r7, [pc, #248]	; (8005498 <D32_1CH_HTONS_VOL_HP+0x130>)
 80053a0:	f8cd c00c 	str.w	ip, [sp, #12]
 80053a4:	9202      	str	r2, [sp, #8]
 80053a6:	460d      	mov	r5, r1
 80053a8:	46a1      	mov	r9, r4
 80053aa:	4684      	mov	ip, r0
 80053ac:	f8cd a014 	str.w	sl, [sp, #20]
 80053b0:	f85c 1b04 	ldr.w	r1, [ip], #4
 80053b4:	ba49      	rev16	r1, r1
 80053b6:	b2c8      	uxtb	r0, r1
 80053b8:	f3c1 2207 	ubfx	r2, r1, #8, #8
 80053bc:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 80053c0:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 80053c4:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 80053c8:	0e09      	lsrs	r1, r1, #24
 80053ca:	eb00 2096 	add.w	r0, r0, r6, lsr #10
 80053ce:	f857 602a 	ldr.w	r6, [r7, sl, lsl #2]
 80053d2:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 80053d6:	eb02 2290 	add.w	r2, r2, r0, lsr #10
 80053da:	eb06 2a92 	add.w	sl, r6, r2, lsr #10
 80053de:	eb01 269a 	add.w	r6, r1, sl, lsr #10
 80053e2:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80053e6:	f3c6 0109 	ubfx	r1, r6, #0, #10
 80053ea:	f3c0 0009 	ubfx	r0, r0, #0, #10
 80053ee:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 80053f2:	ea42 4000 	orr.w	r0, r2, r0, lsl #16
 80053f6:	ea41 4a0a 	orr.w	sl, r1, sl, lsl #16
 80053fa:	4a28      	ldr	r2, [pc, #160]	; (800549c <D32_1CH_HTONS_VOL_HP+0x134>)
 80053fc:	fb20 e202 	smlad	r2, r0, r2, lr
 8005400:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8005404:	fb2a 2101 	smlad	r1, sl, r1, r2
 8005408:	4a25      	ldr	r2, [pc, #148]	; (80054a0 <D32_1CH_HTONS_VOL_HP+0x138>)
 800540a:	fb20 3302 	smlad	r3, r0, r2, r3
 800540e:	4a25      	ldr	r2, [pc, #148]	; (80054a4 <D32_1CH_HTONS_VOL_HP+0x13c>)
 8005410:	fb2a 3e02 	smlad	lr, sl, r2, r3
 8005414:	2301      	movs	r3, #1
 8005416:	fb20 f003 	smuad	r0, r0, r3
 800541a:	4b23      	ldr	r3, [pc, #140]	; (80054a8 <D32_1CH_HTONS_VOL_HP+0x140>)
 800541c:	fb2a 0303 	smlad	r3, sl, r3, r0
 8005420:	f5a1 4280 	sub.w	r2, r1, #16384	; 0x4000
 8005424:	9c03      	ldr	r4, [sp, #12]
 8005426:	eb02 0009 	add.w	r0, r2, r9
 800542a:	eba0 0008 	sub.w	r0, r0, r8
 800542e:	ea4f 7be0 	mov.w	fp, r0, asr #31
 8005432:	fba0 0104 	umull	r0, r1, r0, r4
 8005436:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 800543a:	fb04 110b 	mla	r1, r4, fp, r1
 800543e:	f141 0100 	adc.w	r1, r1, #0
 8005442:	9c01      	ldr	r4, [sp, #4]
 8005444:	0388      	lsls	r0, r1, #14
 8005446:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800544a:	f04f 0900 	mov.w	r9, #0
 800544e:	fbc0 8904 	smlal	r8, r9, r0, r4
 8005452:	ea4f 00a9 	mov.w	r0, r9, asr #2
 8005456:	ea4f 0941 	mov.w	r9, r1, lsl #1
 800545a:	f300 000f 	ssat	r0, #16, r0
 800545e:	9902      	ldr	r1, [sp, #8]
 8005460:	f825 0b02 	strh.w	r0, [r5], #2
 8005464:	428d      	cmp	r5, r1
 8005466:	4690      	mov	r8, r2
 8005468:	d1a2      	bne.n	80053b0 <D32_1CH_HTONS_VOL_HP+0x48>
 800546a:	f8dd a014 	ldr.w	sl, [sp, #20]
 800546e:	464c      	mov	r4, r9
 8005470:	f8ca 3008 	str.w	r3, [sl, #8]
 8005474:	9b04      	ldr	r3, [sp, #16]
 8005476:	f8ca e00c 	str.w	lr, [sl, #12]
 800547a:	2000      	movs	r0, #0
 800547c:	f8ca 601c 	str.w	r6, [sl, #28]
 8005480:	f8ca 4010 	str.w	r4, [sl, #16]
 8005484:	f8ca 2014 	str.w	r2, [sl, #20]
 8005488:	f8ca 3018 	str.w	r3, [sl, #24]
 800548c:	b007      	add	sp, #28
 800548e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005492:	4642      	mov	r2, r8
 8005494:	e7ec      	b.n	8005470 <D32_1CH_HTONS_VOL_HP+0x108>
 8005496:	bf00      	nop
 8005498:	20000000 	.word	0x20000000
 800549c:	00060003 	.word	0x00060003
 80054a0:	000a000c 	.word	0x000a000c
 80054a4:	000c000a 	.word	0x000c000a
 80054a8:	00030006 	.word	0x00030006

080054ac <D48_1CH_HTONS_VOL_HP>:
 80054ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054b0:	4613      	mov	r3, r2
 80054b2:	461c      	mov	r4, r3
 80054b4:	b087      	sub	sp, #28
 80054b6:	4625      	mov	r5, r4
 80054b8:	4626      	mov	r6, r4
 80054ba:	6b2d      	ldr	r5, [r5, #48]	; 0x30
 80054bc:	9205      	str	r2, [sp, #20]
 80054be:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 80054c0:	f8d3 9014 	ldr.w	r9, [r3, #20]
 80054c4:	9501      	str	r5, [sp, #4]
 80054c6:	4680      	mov	r8, r0
 80054c8:	6a35      	ldr	r5, [r6, #32]
 80054ca:	6918      	ldr	r0, [r3, #16]
 80054cc:	699b      	ldr	r3, [r3, #24]
 80054ce:	9304      	str	r3, [sp, #16]
 80054d0:	f8d4 e01c 	ldr.w	lr, [r4, #28]
 80054d4:	68a3      	ldr	r3, [r4, #8]
 80054d6:	9502      	str	r5, [sp, #8]
 80054d8:	68e4      	ldr	r4, [r4, #12]
 80054da:	2a00      	cmp	r2, #0
 80054dc:	f000 808c 	beq.w	80055f8 <D48_1CH_HTONS_VOL_HP+0x14c>
 80054e0:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 80054e4:	4d45      	ldr	r5, [pc, #276]	; (80055fc <D48_1CH_HTONS_VOL_HP+0x150>)
 80054e6:	9203      	str	r2, [sp, #12]
 80054e8:	468c      	mov	ip, r1
 80054ea:	e898 0044 	ldmia.w	r8, {r2, r6}
 80054ee:	f108 0806 	add.w	r8, r8, #6
 80054f2:	ba52      	rev16	r2, r2
 80054f4:	ba76      	rev16	r6, r6
 80054f6:	b2d7      	uxtb	r7, r2
 80054f8:	f3c2 2107 	ubfx	r1, r2, #8, #8
 80054fc:	f855 a027 	ldr.w	sl, [r5, r7, lsl #2]
 8005500:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8005504:	f3c2 4707 	ubfx	r7, r2, #16, #8
 8005508:	0e12      	lsrs	r2, r2, #24
 800550a:	eb0a 2a9e 	add.w	sl, sl, lr, lsr #10
 800550e:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
 8005512:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8005516:	fa5f fb86 	uxtb.w	fp, r6
 800551a:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 800551e:	f3c6 2e07 	ubfx	lr, r6, #8, #8
 8005522:	eb07 2791 	add.w	r7, r7, r1, lsr #10
 8005526:	f855 602b 	ldr.w	r6, [r5, fp, lsl #2]
 800552a:	f855 e02e 	ldr.w	lr, [r5, lr, lsl #2]
 800552e:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 8005532:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 8005536:	eb0e 2e96 	add.w	lr, lr, r6, lsr #10
 800553a:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800553e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8005542:	f3ce 0b09 	ubfx	fp, lr, #0, #10
 8005546:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800554a:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800554e:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8005552:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
 8005556:	ea41 4a0a 	orr.w	sl, r1, sl, lsl #16
 800555a:	ea4b 4606 	orr.w	r6, fp, r6, lsl #16
 800555e:	4a28      	ldr	r2, [pc, #160]	; (8005600 <D48_1CH_HTONS_VOL_HP+0x154>)
 8005560:	fb2a 4202 	smlad	r2, sl, r2, r4
 8005564:	4927      	ldr	r1, [pc, #156]	; (8005604 <D48_1CH_HTONS_VOL_HP+0x158>)
 8005566:	fb27 2201 	smlad	r2, r7, r1, r2
 800556a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800556e:	fb26 2201 	smlad	r2, r6, r1, r2
 8005572:	4925      	ldr	r1, [pc, #148]	; (8005608 <D48_1CH_HTONS_VOL_HP+0x15c>)
 8005574:	fb2a 3401 	smlad	r4, sl, r1, r3
 8005578:	f04f 131b 	mov.w	r3, #1769499	; 0x1b001b
 800557c:	fb27 4403 	smlad	r4, r7, r3, r4
 8005580:	4b22      	ldr	r3, [pc, #136]	; (800560c <D48_1CH_HTONS_VOL_HP+0x160>)
 8005582:	fb26 4403 	smlad	r4, r6, r3, r4
 8005586:	2101      	movs	r1, #1
 8005588:	fb2a fa01 	smuad	sl, sl, r1
 800558c:	4b20      	ldr	r3, [pc, #128]	; (8005610 <D48_1CH_HTONS_VOL_HP+0x164>)
 800558e:	fb27 a703 	smlad	r7, r7, r3, sl
 8005592:	4b20      	ldr	r3, [pc, #128]	; (8005614 <D48_1CH_HTONS_VOL_HP+0x168>)
 8005594:	fb26 7303 	smlad	r3, r6, r3, r7
 8005598:	f5a2 4258 	sub.w	r2, r2, #55296	; 0xd800
 800559c:	9e02      	ldr	r6, [sp, #8]
 800559e:	9f01      	ldr	r7, [sp, #4]
 80055a0:	4410      	add	r0, r2
 80055a2:	eba0 0009 	sub.w	r0, r0, r9
 80055a6:	ea4f 7ae0 	mov.w	sl, r0, asr #31
 80055aa:	fba0 0106 	umull	r0, r1, r0, r6
 80055ae:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 80055b2:	fb06 110a 	mla	r1, r6, sl, r1
 80055b6:	f141 0100 	adc.w	r1, r1, #0
 80055ba:	0308      	lsls	r0, r1, #12
 80055bc:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 80055c0:	f04f 0a00 	mov.w	sl, #0
 80055c4:	fbc0 9a07 	smlal	r9, sl, r0, r7
 80055c8:	4657      	mov	r7, sl
 80055ca:	10b8      	asrs	r0, r7, #2
 80055cc:	f300 000f 	ssat	r0, #16, r0
 80055d0:	f82c 0b02 	strh.w	r0, [ip], #2
 80055d4:	0048      	lsls	r0, r1, #1
 80055d6:	9903      	ldr	r1, [sp, #12]
 80055d8:	458c      	cmp	ip, r1
 80055da:	4691      	mov	r9, r2
 80055dc:	d185      	bne.n	80054ea <D48_1CH_HTONS_VOL_HP+0x3e>
 80055de:	9d05      	ldr	r5, [sp, #20]
 80055e0:	616a      	str	r2, [r5, #20]
 80055e2:	9a04      	ldr	r2, [sp, #16]
 80055e4:	6128      	str	r0, [r5, #16]
 80055e6:	2000      	movs	r0, #0
 80055e8:	60ab      	str	r3, [r5, #8]
 80055ea:	60ec      	str	r4, [r5, #12]
 80055ec:	f8c5 e01c 	str.w	lr, [r5, #28]
 80055f0:	61aa      	str	r2, [r5, #24]
 80055f2:	b007      	add	sp, #28
 80055f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055f8:	464a      	mov	r2, r9
 80055fa:	e7f0      	b.n	80055de <D48_1CH_HTONS_VOL_HP+0x132>
 80055fc:	20000000 	.word	0x20000000
 8005600:	000f000a 	.word	0x000f000a
 8005604:	00060003 	.word	0x00060003
 8005608:	00150019 	.word	0x00150019
 800560c:	00190015 	.word	0x00190015
 8005610:	00030006 	.word	0x00030006
 8005614:	000a000f 	.word	0x000a000f

08005618 <D64_1CH_HTONS_VOL_HP>:
 8005618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800561c:	b089      	sub	sp, #36	; 0x24
 800561e:	4614      	mov	r4, r2
 8005620:	9207      	str	r2, [sp, #28]
 8005622:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8005624:	f8d2 c010 	ldr.w	ip, [r2, #16]
 8005628:	f8d2 8014 	ldr.w	r8, [r2, #20]
 800562c:	6992      	ldr	r2, [r2, #24]
 800562e:	9206      	str	r2, [sp, #24]
 8005630:	68e2      	ldr	r2, [r4, #12]
 8005632:	9201      	str	r2, [sp, #4]
 8005634:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005636:	9203      	str	r2, [sp, #12]
 8005638:	6a22      	ldr	r2, [r4, #32]
 800563a:	69e5      	ldr	r5, [r4, #28]
 800563c:	68a6      	ldr	r6, [r4, #8]
 800563e:	9204      	str	r2, [sp, #16]
 8005640:	2b00      	cmp	r3, #0
 8005642:	f000 80b0 	beq.w	80057a6 <D64_1CH_HTONS_VOL_HP+0x18e>
 8005646:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800564a:	4f58      	ldr	r7, [pc, #352]	; (80057ac <D64_1CH_HTONS_VOL_HP+0x194>)
 800564c:	9305      	str	r3, [sp, #20]
 800564e:	9102      	str	r1, [sp, #8]
 8005650:	f850 2b08 	ldr.w	r2, [r0], #8
 8005654:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8005658:	ba52      	rev16	r2, r2
 800565a:	fa93 f993 	rev16.w	r9, r3
 800565e:	b2d4      	uxtb	r4, r2
 8005660:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8005664:	f857 b024 	ldr.w	fp, [r7, r4, lsl #2]
 8005668:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800566c:	9901      	ldr	r1, [sp, #4]
 800566e:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8005672:	0e12      	lsrs	r2, r2, #24
 8005674:	44ab      	add	fp, r5
 8005676:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800567a:	f857 4022 	ldr.w	r4, [r7, r2, lsl #2]
 800567e:	fa5f f289 	uxtb.w	r2, r9
 8005682:	eb03 2e9b 	add.w	lr, r3, fp, lsr #10
 8005686:	f3c9 2307 	ubfx	r3, r9, #8, #8
 800568a:	eb05 2a9e 	add.w	sl, r5, lr, lsr #10
 800568e:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8005692:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 8005696:	f3c9 4507 	ubfx	r5, r9, #16, #8
 800569a:	eb04 249a 	add.w	r4, r4, sl, lsr #10
 800569e:	ea4f 6919 	mov.w	r9, r9, lsr #24
 80056a2:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 80056a6:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 80056aa:	f857 9029 	ldr.w	r9, [r7, r9, lsl #2]
 80056ae:	eb03 2392 	add.w	r3, r3, r2, lsr #10
 80056b2:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 80056b6:	eb09 2995 	add.w	r9, r9, r5, lsr #10
 80056ba:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 80056be:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 80056c2:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 80056c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80056ca:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80056ce:	ea4e 4b0b 	orr.w	fp, lr, fp, lsl #16
 80056d2:	f3c4 0409 	ubfx	r4, r4, #0, #10
 80056d6:	f3c9 0e09 	ubfx	lr, r9, #0, #10
 80056da:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80056de:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80056e2:	ea4e 4e05 	orr.w	lr, lr, r5, lsl #16
 80056e6:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80056ea:	ea4f 2599 	mov.w	r5, r9, lsr #10
 80056ee:	4b30      	ldr	r3, [pc, #192]	; (80057b0 <D64_1CH_HTONS_VOL_HP+0x198>)
 80056f0:	fb2b 1303 	smlad	r3, fp, r3, r1
 80056f4:	492f      	ldr	r1, [pc, #188]	; (80057b4 <D64_1CH_HTONS_VOL_HP+0x19c>)
 80056f6:	fb24 3301 	smlad	r3, r4, r1, r3
 80056fa:	492f      	ldr	r1, [pc, #188]	; (80057b8 <D64_1CH_HTONS_VOL_HP+0x1a0>)
 80056fc:	fb22 3301 	smlad	r3, r2, r1, r3
 8005700:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 8005704:	fb2e 390a 	smlad	r9, lr, sl, r3
 8005708:	4b2c      	ldr	r3, [pc, #176]	; (80057bc <D64_1CH_HTONS_VOL_HP+0x1a4>)
 800570a:	fb2b 6603 	smlad	r6, fp, r3, r6
 800570e:	fb2e 6613 	smladx	r6, lr, r3, r6
 8005712:	4b2b      	ldr	r3, [pc, #172]	; (80057c0 <D64_1CH_HTONS_VOL_HP+0x1a8>)
 8005714:	fb24 6603 	smlad	r6, r4, r3, r6
 8005718:	fb22 6313 	smladx	r3, r2, r3, r6
 800571c:	f04f 0a01 	mov.w	sl, #1
 8005720:	9301      	str	r3, [sp, #4]
 8005722:	fb2b fb0a 	smuad	fp, fp, sl
 8005726:	4b27      	ldr	r3, [pc, #156]	; (80057c4 <D64_1CH_HTONS_VOL_HP+0x1ac>)
 8005728:	fb24 ba03 	smlad	sl, r4, r3, fp
 800572c:	4b26      	ldr	r3, [pc, #152]	; (80057c8 <D64_1CH_HTONS_VOL_HP+0x1b0>)
 800572e:	fb22 a203 	smlad	r2, r2, r3, sl
 8005732:	4b26      	ldr	r3, [pc, #152]	; (80057cc <D64_1CH_HTONS_VOL_HP+0x1b4>)
 8005734:	fb2e 2603 	smlad	r6, lr, r3, r2
 8005738:	f5a9 3a00 	sub.w	sl, r9, #131072	; 0x20000
 800573c:	eb0a 020c 	add.w	r2, sl, ip
 8005740:	9c04      	ldr	r4, [sp, #16]
 8005742:	9903      	ldr	r1, [sp, #12]
 8005744:	eba2 0208 	sub.w	r2, r2, r8
 8005748:	ea4f 79e2 	mov.w	r9, r2, asr #31
 800574c:	fba2 2304 	umull	r2, r3, r2, r4
 8005750:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 8005754:	fb04 3309 	mla	r3, r4, r9, r3
 8005758:	f143 0300 	adc.w	r3, r3, #0
 800575c:	02da      	lsls	r2, r3, #11
 800575e:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8005762:	f04f 0900 	mov.w	r9, #0
 8005766:	fbc1 8902 	smlal	r8, r9, r1, r2
 800576a:	9902      	ldr	r1, [sp, #8]
 800576c:	ea4f 02a9 	mov.w	r2, r9, asr #2
 8005770:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8005774:	f302 020f 	ssat	r2, #16, r2
 8005778:	9b05      	ldr	r3, [sp, #20]
 800577a:	f821 2b02 	strh.w	r2, [r1], #2
 800577e:	4299      	cmp	r1, r3
 8005780:	9102      	str	r1, [sp, #8]
 8005782:	46d0      	mov	r8, sl
 8005784:	f47f af64 	bne.w	8005650 <D64_1CH_HTONS_VOL_HP+0x38>
 8005788:	9a07      	ldr	r2, [sp, #28]
 800578a:	9901      	ldr	r1, [sp, #4]
 800578c:	60d1      	str	r1, [r2, #12]
 800578e:	9906      	ldr	r1, [sp, #24]
 8005790:	6096      	str	r6, [r2, #8]
 8005792:	2000      	movs	r0, #0
 8005794:	61d5      	str	r5, [r2, #28]
 8005796:	f8c2 c010 	str.w	ip, [r2, #16]
 800579a:	f8c2 a014 	str.w	sl, [r2, #20]
 800579e:	6191      	str	r1, [r2, #24]
 80057a0:	b009      	add	sp, #36	; 0x24
 80057a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057a6:	46c2      	mov	sl, r8
 80057a8:	4622      	mov	r2, r4
 80057aa:	e7ee      	b.n	800578a <D64_1CH_HTONS_VOL_HP+0x172>
 80057ac:	20000000 	.word	0x20000000
 80057b0:	001c0015 	.word	0x001c0015
 80057b4:	000f000a 	.word	0x000f000a
 80057b8:	00060003 	.word	0x00060003
 80057bc:	0024002a 	.word	0x0024002a
 80057c0:	002e0030 	.word	0x002e0030
 80057c4:	00030006 	.word	0x00030006
 80057c8:	000a000f 	.word	0x000a000f
 80057cc:	0015001c 	.word	0x0015001c

080057d0 <D80_1CH_HTONS_VOL_HP>:
 80057d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057d4:	4613      	mov	r3, r2
 80057d6:	b089      	sub	sp, #36	; 0x24
 80057d8:	4686      	mov	lr, r0
 80057da:	6918      	ldr	r0, [r3, #16]
 80057dc:	9000      	str	r0, [sp, #0]
 80057de:	4618      	mov	r0, r3
 80057e0:	461c      	mov	r4, r3
 80057e2:	695b      	ldr	r3, [r3, #20]
 80057e4:	9302      	str	r3, [sp, #8]
 80057e6:	6983      	ldr	r3, [r0, #24]
 80057e8:	9306      	str	r3, [sp, #24]
 80057ea:	f8d0 c008 	ldr.w	ip, [r0, #8]
 80057ee:	69c3      	ldr	r3, [r0, #28]
 80057f0:	68c0      	ldr	r0, [r0, #12]
 80057f2:	9207      	str	r2, [sp, #28]
 80057f4:	9001      	str	r0, [sp, #4]
 80057f6:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 80057f8:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80057fa:	9003      	str	r0, [sp, #12]
 80057fc:	6a20      	ldr	r0, [r4, #32]
 80057fe:	9004      	str	r0, [sp, #16]
 8005800:	2a00      	cmp	r2, #0
 8005802:	f000 80d2 	beq.w	80059aa <D80_1CH_HTONS_VOL_HP+0x1da>
 8005806:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800580a:	4869      	ldr	r0, [pc, #420]	; (80059b0 <D80_1CH_HTONS_VOL_HP+0x1e0>)
 800580c:	9205      	str	r2, [sp, #20]
 800580e:	461c      	mov	r4, r3
 8005810:	f8de 5000 	ldr.w	r5, [lr]
 8005814:	f8de 2004 	ldr.w	r2, [lr, #4]
 8005818:	f8de 3008 	ldr.w	r3, [lr, #8]
 800581c:	f10e 0e0a 	add.w	lr, lr, #10
 8005820:	ba6d      	rev16	r5, r5
 8005822:	ba52      	rev16	r2, r2
 8005824:	fa93 fb93 	rev16.w	fp, r3
 8005828:	b2ee      	uxtb	r6, r5
 800582a:	f3c5 2307 	ubfx	r3, r5, #8, #8
 800582e:	f850 7026 	ldr.w	r7, [r0, r6, lsl #2]
 8005832:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005836:	f3c5 4607 	ubfx	r6, r5, #16, #8
 800583a:	eb04 0a07 	add.w	sl, r4, r7
 800583e:	0e2d      	lsrs	r5, r5, #24
 8005840:	f850 4026 	ldr.w	r4, [r0, r6, lsl #2]
 8005844:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
 8005848:	eb03 239a 	add.w	r3, r3, sl, lsr #10
 800584c:	eb04 2993 	add.w	r9, r4, r3, lsr #10
 8005850:	b2d5      	uxtb	r5, r2
 8005852:	f3c2 2407 	ubfx	r4, r2, #8, #8
 8005856:	f850 7025 	ldr.w	r7, [r0, r5, lsl #2]
 800585a:	f850 5024 	ldr.w	r5, [r0, r4, lsl #2]
 800585e:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8005862:	eb06 2699 	add.w	r6, r6, r9, lsr #10
 8005866:	0e12      	lsrs	r2, r2, #24
 8005868:	eb07 2896 	add.w	r8, r7, r6, lsr #10
 800586c:	f850 7024 	ldr.w	r7, [r0, r4, lsl #2]
 8005870:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8005874:	fa5f f48b 	uxtb.w	r4, fp
 8005878:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 800587c:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 8005880:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 8005884:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
 8005888:	f850 b02b 	ldr.w	fp, [r0, fp, lsl #2]
 800588c:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 8005890:	eb04 2492 	add.w	r4, r4, r2, lsr #10
 8005894:	eb0b 2b94 	add.w	fp, fp, r4, lsr #10
 8005898:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800589c:	f3c9 0909 	ubfx	r9, r9, #0, #10
 80058a0:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 80058a4:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80058a8:	f3c7 0709 	ubfx	r7, r7, #0, #10
 80058ac:	f3c4 0409 	ubfx	r4, r4, #0, #10
 80058b0:	ea46 4909 	orr.w	r9, r6, r9, lsl #16
 80058b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80058b8:	f3cb 0609 	ubfx	r6, fp, #0, #10
 80058bc:	f3c8 0809 	ubfx	r8, r8, #0, #10
 80058c0:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80058c4:	ea45 4808 	orr.w	r8, r5, r8, lsl #16
 80058c8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80058cc:	ea46 4604 	orr.w	r6, r6, r4, lsl #16
 80058d0:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 80058d4:	ea4f 249b 	mov.w	r4, fp, lsr #10
 80058d8:	4d36      	ldr	r5, [pc, #216]	; (80059b4 <D80_1CH_HTONS_VOL_HP+0x1e4>)
 80058da:	9f01      	ldr	r7, [sp, #4]
 80058dc:	fb23 7505 	smlad	r5, r3, r5, r7
 80058e0:	4f35      	ldr	r7, [pc, #212]	; (80059b8 <D80_1CH_HTONS_VOL_HP+0x1e8>)
 80058e2:	fb29 5507 	smlad	r5, r9, r7, r5
 80058e6:	4f35      	ldr	r7, [pc, #212]	; (80059bc <D80_1CH_HTONS_VOL_HP+0x1ec>)
 80058e8:	fb28 5507 	smlad	r5, r8, r7, r5
 80058ec:	4f34      	ldr	r7, [pc, #208]	; (80059c0 <D80_1CH_HTONS_VOL_HP+0x1f0>)
 80058ee:	fb22 5507 	smlad	r5, r2, r7, r5
 80058f2:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 80058f6:	fb26 5b0a 	smlad	fp, r6, sl, r5
 80058fa:	4d32      	ldr	r5, [pc, #200]	; (80059c4 <D80_1CH_HTONS_VOL_HP+0x1f4>)
 80058fc:	fb23 cc05 	smlad	ip, r3, r5, ip
 8005900:	4d31      	ldr	r5, [pc, #196]	; (80059c8 <D80_1CH_HTONS_VOL_HP+0x1f8>)
 8005902:	fb29 cc05 	smlad	ip, r9, r5, ip
 8005906:	f04f 154b 	mov.w	r5, #4915275	; 0x4b004b
 800590a:	fb28 c505 	smlad	r5, r8, r5, ip
 800590e:	4f2f      	ldr	r7, [pc, #188]	; (80059cc <D80_1CH_HTONS_VOL_HP+0x1fc>)
 8005910:	fb22 5507 	smlad	r5, r2, r7, r5
 8005914:	4f2e      	ldr	r7, [pc, #184]	; (80059d0 <D80_1CH_HTONS_VOL_HP+0x200>)
 8005916:	fb26 5507 	smlad	r5, r6, r7, r5
 800591a:	f04f 0a01 	mov.w	sl, #1
 800591e:	9501      	str	r5, [sp, #4]
 8005920:	fb23 fa0a 	smuad	sl, r3, sl
 8005924:	4b2b      	ldr	r3, [pc, #172]	; (80059d4 <D80_1CH_HTONS_VOL_HP+0x204>)
 8005926:	fb29 a903 	smlad	r9, r9, r3, sl
 800592a:	4d2b      	ldr	r5, [pc, #172]	; (80059d8 <D80_1CH_HTONS_VOL_HP+0x208>)
 800592c:	fb28 9805 	smlad	r8, r8, r5, r9
 8005930:	4d2a      	ldr	r5, [pc, #168]	; (80059dc <D80_1CH_HTONS_VOL_HP+0x20c>)
 8005932:	fb22 8205 	smlad	r2, r2, r5, r8
 8005936:	4b2a      	ldr	r3, [pc, #168]	; (80059e0 <D80_1CH_HTONS_VOL_HP+0x210>)
 8005938:	fb26 2c03 	smlad	ip, r6, r3, r2
 800593c:	9b00      	ldr	r3, [sp, #0]
 800593e:	9d04      	ldr	r5, [sp, #16]
 8005940:	f5ab 3a7a 	sub.w	sl, fp, #256000	; 0x3e800
 8005944:	4453      	add	r3, sl
 8005946:	461a      	mov	r2, r3
 8005948:	9b02      	ldr	r3, [sp, #8]
 800594a:	f8cd a008 	str.w	sl, [sp, #8]
 800594e:	1ad2      	subs	r2, r2, r3
 8005950:	17d7      	asrs	r7, r2, #31
 8005952:	fba2 2305 	umull	r2, r3, r2, r5
 8005956:	fb05 3307 	mla	r3, r5, r7, r3
 800595a:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800595e:	f143 0300 	adc.w	r3, r3, #0
 8005962:	9d03      	ldr	r5, [sp, #12]
 8005964:	029a      	lsls	r2, r3, #10
 8005966:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800596a:	2700      	movs	r7, #0
 800596c:	005b      	lsls	r3, r3, #1
 800596e:	fbc5 6702 	smlal	r6, r7, r5, r2
 8005972:	10ba      	asrs	r2, r7, #2
 8005974:	9300      	str	r3, [sp, #0]
 8005976:	f302 020f 	ssat	r2, #16, r2
 800597a:	9b05      	ldr	r3, [sp, #20]
 800597c:	f821 2b02 	strh.w	r2, [r1], #2
 8005980:	4299      	cmp	r1, r3
 8005982:	f47f af45 	bne.w	8005810 <D80_1CH_HTONS_VOL_HP+0x40>
 8005986:	4623      	mov	r3, r4
 8005988:	9907      	ldr	r1, [sp, #28]
 800598a:	9801      	ldr	r0, [sp, #4]
 800598c:	60c8      	str	r0, [r1, #12]
 800598e:	9a00      	ldr	r2, [sp, #0]
 8005990:	f8c1 c008 	str.w	ip, [r1, #8]
 8005994:	4608      	mov	r0, r1
 8005996:	61cb      	str	r3, [r1, #28]
 8005998:	610a      	str	r2, [r1, #16]
 800599a:	f8c1 a014 	str.w	sl, [r1, #20]
 800599e:	9906      	ldr	r1, [sp, #24]
 80059a0:	6181      	str	r1, [r0, #24]
 80059a2:	2000      	movs	r0, #0
 80059a4:	b009      	add	sp, #36	; 0x24
 80059a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059aa:	f8dd a008 	ldr.w	sl, [sp, #8]
 80059ae:	e7eb      	b.n	8005988 <D80_1CH_HTONS_VOL_HP+0x1b8>
 80059b0:	20000000 	.word	0x20000000
 80059b4:	002d0024 	.word	0x002d0024
 80059b8:	001c0015 	.word	0x001c0015
 80059bc:	000f000a 	.word	0x000f000a
 80059c0:	00060003 	.word	0x00060003
 80059c4:	0037003f 	.word	0x0037003f
 80059c8:	00450049 	.word	0x00450049
 80059cc:	00490045 	.word	0x00490045
 80059d0:	003f0037 	.word	0x003f0037
 80059d4:	00030006 	.word	0x00030006
 80059d8:	000a000f 	.word	0x000a000f
 80059dc:	0015001c 	.word	0x0015001c
 80059e0:	0024002d 	.word	0x0024002d

080059e4 <D128_1CH_HTONS_VOL_HP>:
 80059e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059e8:	b093      	sub	sp, #76	; 0x4c
 80059ea:	4614      	mov	r4, r2
 80059ec:	9211      	str	r2, [sp, #68]	; 0x44
 80059ee:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 80059f0:	6912      	ldr	r2, [r2, #16]
 80059f2:	9203      	str	r2, [sp, #12]
 80059f4:	4622      	mov	r2, r4
 80059f6:	4615      	mov	r5, r2
 80059f8:	6964      	ldr	r4, [r4, #20]
 80059fa:	9406      	str	r4, [sp, #24]
 80059fc:	4614      	mov	r4, r2
 80059fe:	6992      	ldr	r2, [r2, #24]
 8005a00:	9210      	str	r2, [sp, #64]	; 0x40
 8005a02:	68ea      	ldr	r2, [r5, #12]
 8005a04:	9204      	str	r2, [sp, #16]
 8005a06:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8005a08:	69e6      	ldr	r6, [r4, #28]
 8005a0a:	920d      	str	r2, [sp, #52]	; 0x34
 8005a0c:	68a4      	ldr	r4, [r4, #8]
 8005a0e:	6a2a      	ldr	r2, [r5, #32]
 8005a10:	9405      	str	r4, [sp, #20]
 8005a12:	920e      	str	r2, [sp, #56]	; 0x38
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	f000 8145 	beq.w	8005ca4 <D128_1CH_HTONS_VOL_HP+0x2c0>
 8005a1a:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8005a1e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005a20:	f8df 82dc 	ldr.w	r8, [pc, #732]	; 8005d00 <D128_1CH_HTONS_VOL_HP+0x31c>
 8005a24:	9107      	str	r1, [sp, #28]
 8005a26:	f100 0310 	add.w	r3, r0, #16
 8005a2a:	4699      	mov	r9, r3
 8005a2c:	f1a9 0110 	sub.w	r1, r9, #16
 8005a30:	c90e      	ldmia	r1, {r1, r2, r3}
 8005a32:	f859 0c04 	ldr.w	r0, [r9, #-4]
 8005a36:	ba49      	rev16	r1, r1
 8005a38:	ba52      	rev16	r2, r2
 8005a3a:	ba5b      	rev16	r3, r3
 8005a3c:	fa90 fa90 	rev16.w	sl, r0
 8005a40:	f3c1 2007 	ubfx	r0, r1, #8, #8
 8005a44:	b2cc      	uxtb	r4, r1
 8005a46:	f858 5020 	ldr.w	r5, [r8, r0, lsl #2]
 8005a4a:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 8005a4e:	f3c1 4007 	ubfx	r0, r1, #16, #8
 8005a52:	0e09      	lsrs	r1, r1, #24
 8005a54:	4426      	add	r6, r4
 8005a56:	f858 4020 	ldr.w	r4, [r8, r0, lsl #2]
 8005a5a:	f858 7021 	ldr.w	r7, [r8, r1, lsl #2]
 8005a5e:	b2d0      	uxtb	r0, r2
 8005a60:	eb05 2596 	add.w	r5, r5, r6, lsr #10
 8005a64:	eb04 2b95 	add.w	fp, r4, r5, lsr #10
 8005a68:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8005a6c:	f858 4020 	ldr.w	r4, [r8, r0, lsl #2]
 8005a70:	f858 1021 	ldr.w	r1, [r8, r1, lsl #2]
 8005a74:	eb07 279b 	add.w	r7, r7, fp, lsr #10
 8005a78:	f3c2 4007 	ubfx	r0, r2, #16, #8
 8005a7c:	0e12      	lsrs	r2, r2, #24
 8005a7e:	eb04 2497 	add.w	r4, r4, r7, lsr #10
 8005a82:	9701      	str	r7, [sp, #4]
 8005a84:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 8005a88:	4627      	mov	r7, r4
 8005a8a:	f858 4022 	ldr.w	r4, [r8, r2, lsl #2]
 8005a8e:	9702      	str	r7, [sp, #8]
 8005a90:	b2da      	uxtb	r2, r3
 8005a92:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 8005a96:	eb00 2c91 	add.w	ip, r0, r1, lsr #10
 8005a9a:	f858 0022 	ldr.w	r0, [r8, r2, lsl #2]
 8005a9e:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 8005aa2:	eb00 2e94 	add.w	lr, r0, r4, lsr #10
 8005aa6:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8005aaa:	f3c3 4007 	ubfx	r0, r3, #16, #8
 8005aae:	0e1b      	lsrs	r3, r3, #24
 8005ab0:	f858 7020 	ldr.w	r7, [r8, r0, lsl #2]
 8005ab4:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 8005ab8:	f858 0023 	ldr.w	r0, [r8, r3, lsl #2]
 8005abc:	fa5f f38a 	uxtb.w	r3, sl
 8005ac0:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8005ac4:	960a      	str	r6, [sp, #40]	; 0x28
 8005ac6:	eb02 229e 	add.w	r2, r2, lr, lsr #10
 8005aca:	f858 6023 	ldr.w	r6, [r8, r3, lsl #2]
 8005ace:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8005ad2:	f3ca 2307 	ubfx	r3, sl, #8, #8
 8005ad6:	950b      	str	r5, [sp, #44]	; 0x2c
 8005ad8:	eb07 2792 	add.w	r7, r7, r2, lsr #10
 8005adc:	f3ca 4507 	ubfx	r5, sl, #16, #8
 8005ae0:	eb00 2097 	add.w	r0, r0, r7, lsr #10
 8005ae4:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8005ae8:	f858 5025 	ldr.w	r5, [r8, r5, lsl #2]
 8005aec:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 8005af0:	eb06 2690 	add.w	r6, r6, r0, lsr #10
 8005af4:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 8005af8:	f858 a02a 	ldr.w	sl, [r8, sl, lsl #2]
 8005afc:	9308      	str	r3, [sp, #32]
 8005afe:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 8005b02:	9b01      	ldr	r3, [sp, #4]
 8005b04:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 8005b08:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8005b0c:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8005b10:	9b02      	ldr	r3, [sp, #8]
 8005b12:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b16:	9302      	str	r3, [sp, #8]
 8005b18:	9b08      	ldr	r3, [sp, #32]
 8005b1a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b1e:	9308      	str	r3, [sp, #32]
 8005b20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b22:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8005b26:	950c      	str	r5, [sp, #48]	; 0x30
 8005b28:	461d      	mov	r5, r3
 8005b2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b2c:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8005b30:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8005b34:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 8005b38:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 8005b3c:	9301      	str	r3, [sp, #4]
 8005b3e:	9b02      	ldr	r3, [sp, #8]
 8005b40:	9202      	str	r2, [sp, #8]
 8005b42:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005b44:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005b46:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8005b4a:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8005b4e:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8005b52:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8005b56:	f3c2 0709 	ubfx	r7, r2, #0, #10
 8005b5a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8005b5e:	ea47 4505 	orr.w	r5, r7, r5, lsl #16
 8005b62:	9b08      	ldr	r3, [sp, #32]
 8005b64:	9f01      	ldr	r7, [sp, #4]
 8005b66:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8005b6a:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8005b6e:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8005b72:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8005b76:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8005b7a:	46be      	mov	lr, r7
 8005b7c:	0a96      	lsrs	r6, r2, #10
 8005b7e:	ea4a 4a0b 	orr.w	sl, sl, fp, lsl #16
 8005b82:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 8005b86:	4f49      	ldr	r7, [pc, #292]	; (8005cac <D128_1CH_HTONS_VOL_HP+0x2c8>)
 8005b88:	9a04      	ldr	r2, [sp, #16]
 8005b8a:	fb2e 2e07 	smlad	lr, lr, r7, r2
 8005b8e:	4a48      	ldr	r2, [pc, #288]	; (8005cb0 <D128_1CH_HTONS_VOL_HP+0x2cc>)
 8005b90:	fb2a ee02 	smlad	lr, sl, r2, lr
 8005b94:	4a47      	ldr	r2, [pc, #284]	; (8005cb4 <D128_1CH_HTONS_VOL_HP+0x2d0>)
 8005b96:	fb21 ee02 	smlad	lr, r1, r2, lr
 8005b9a:	4a47      	ldr	r2, [pc, #284]	; (8005cb8 <D128_1CH_HTONS_VOL_HP+0x2d4>)
 8005b9c:	fb24 ee02 	smlad	lr, r4, r2, lr
 8005ba0:	4a46      	ldr	r2, [pc, #280]	; (8005cbc <D128_1CH_HTONS_VOL_HP+0x2d8>)
 8005ba2:	9f02      	ldr	r7, [sp, #8]
 8005ba4:	fb27 ee02 	smlad	lr, r7, r2, lr
 8005ba8:	4a45      	ldr	r2, [pc, #276]	; (8005cc0 <D128_1CH_HTONS_VOL_HP+0x2dc>)
 8005baa:	fb20 ee02 	smlad	lr, r0, r2, lr
 8005bae:	4a45      	ldr	r2, [pc, #276]	; (8005cc4 <D128_1CH_HTONS_VOL_HP+0x2e0>)
 8005bb0:	fb23 e702 	smlad	r7, r3, r2, lr
 8005bb4:	f44f 3e80 	mov.w	lr, #65536	; 0x10000
 8005bb8:	fb25 7e0e 	smlad	lr, r5, lr, r7
 8005bbc:	9f01      	ldr	r7, [sp, #4]
 8005bbe:	4a42      	ldr	r2, [pc, #264]	; (8005cc8 <D128_1CH_HTONS_VOL_HP+0x2e4>)
 8005bc0:	46bc      	mov	ip, r7
 8005bc2:	9f05      	ldr	r7, [sp, #20]
 8005bc4:	fb2c 7c02 	smlad	ip, ip, r2, r7
 8005bc8:	4a40      	ldr	r2, [pc, #256]	; (8005ccc <D128_1CH_HTONS_VOL_HP+0x2e8>)
 8005bca:	fb2a cc02 	smlad	ip, sl, r2, ip
 8005bce:	4f40      	ldr	r7, [pc, #256]	; (8005cd0 <D128_1CH_HTONS_VOL_HP+0x2ec>)
 8005bd0:	fb21 cc07 	smlad	ip, r1, r7, ip
 8005bd4:	4f3f      	ldr	r7, [pc, #252]	; (8005cd4 <D128_1CH_HTONS_VOL_HP+0x2f0>)
 8005bd6:	fb24 cc07 	smlad	ip, r4, r7, ip
 8005bda:	4f3f      	ldr	r7, [pc, #252]	; (8005cd8 <D128_1CH_HTONS_VOL_HP+0x2f4>)
 8005bdc:	9a02      	ldr	r2, [sp, #8]
 8005bde:	fb22 cc07 	smlad	ip, r2, r7, ip
 8005be2:	4f3e      	ldr	r7, [pc, #248]	; (8005cdc <D128_1CH_HTONS_VOL_HP+0x2f8>)
 8005be4:	fb20 cc07 	smlad	ip, r0, r7, ip
 8005be8:	4f3d      	ldr	r7, [pc, #244]	; (8005ce0 <D128_1CH_HTONS_VOL_HP+0x2fc>)
 8005bea:	fb23 c707 	smlad	r7, r3, r7, ip
 8005bee:	f8df c114 	ldr.w	ip, [pc, #276]	; 8005d04 <D128_1CH_HTONS_VOL_HP+0x320>
 8005bf2:	fb25 720c 	smlad	r2, r5, ip, r7
 8005bf6:	f04f 0b01 	mov.w	fp, #1
 8005bfa:	9204      	str	r2, [sp, #16]
 8005bfc:	9f01      	ldr	r7, [sp, #4]
 8005bfe:	fb27 fb0b 	smuad	fp, r7, fp
 8005c02:	4f38      	ldr	r7, [pc, #224]	; (8005ce4 <D128_1CH_HTONS_VOL_HP+0x300>)
 8005c04:	fb2a ba07 	smlad	sl, sl, r7, fp
 8005c08:	4f37      	ldr	r7, [pc, #220]	; (8005ce8 <D128_1CH_HTONS_VOL_HP+0x304>)
 8005c0a:	fb21 aa07 	smlad	sl, r1, r7, sl
 8005c0e:	4f37      	ldr	r7, [pc, #220]	; (8005cec <D128_1CH_HTONS_VOL_HP+0x308>)
 8005c10:	fb24 aa07 	smlad	sl, r4, r7, sl
 8005c14:	4f36      	ldr	r7, [pc, #216]	; (8005cf0 <D128_1CH_HTONS_VOL_HP+0x30c>)
 8005c16:	9a02      	ldr	r2, [sp, #8]
 8005c18:	fb22 a707 	smlad	r7, r2, r7, sl
 8005c1c:	4a35      	ldr	r2, [pc, #212]	; (8005cf4 <D128_1CH_HTONS_VOL_HP+0x310>)
 8005c1e:	fb20 7702 	smlad	r7, r0, r2, r7
 8005c22:	4a35      	ldr	r2, [pc, #212]	; (8005cf8 <D128_1CH_HTONS_VOL_HP+0x314>)
 8005c24:	fb23 7702 	smlad	r7, r3, r2, r7
 8005c28:	4b34      	ldr	r3, [pc, #208]	; (8005cfc <D128_1CH_HTONS_VOL_HP+0x318>)
 8005c2a:	fb25 7303 	smlad	r3, r5, r3, r7
 8005c2e:	9305      	str	r3, [sp, #20]
 8005c30:	9b03      	ldr	r3, [sp, #12]
 8005c32:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8005c34:	f5ae 1e80 	sub.w	lr, lr, #1048576	; 0x100000
 8005c38:	4473      	add	r3, lr
 8005c3a:	461a      	mov	r2, r3
 8005c3c:	9b06      	ldr	r3, [sp, #24]
 8005c3e:	f8cd e018 	str.w	lr, [sp, #24]
 8005c42:	1ad2      	subs	r2, r2, r3
 8005c44:	17d1      	asrs	r1, r2, #31
 8005c46:	fba2 2304 	umull	r2, r3, r2, r4
 8005c4a:	fb04 3301 	mla	r3, r4, r1, r3
 8005c4e:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 8005c52:	f143 0300 	adc.w	r3, r3, #0
 8005c56:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8005c58:	021a      	lsls	r2, r3, #8
 8005c5a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8005c5e:	2100      	movs	r1, #0
 8005c60:	fbc4 0102 	smlal	r0, r1, r4, r2
 8005c64:	108a      	asrs	r2, r1, #2
 8005c66:	9907      	ldr	r1, [sp, #28]
 8005c68:	f302 020f 	ssat	r2, #16, r2
 8005c6c:	005b      	lsls	r3, r3, #1
 8005c6e:	f821 2b02 	strh.w	r2, [r1], #2
 8005c72:	9303      	str	r3, [sp, #12]
 8005c74:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005c76:	9107      	str	r1, [sp, #28]
 8005c78:	4299      	cmp	r1, r3
 8005c7a:	f109 0910 	add.w	r9, r9, #16
 8005c7e:	f47f aed5 	bne.w	8005a2c <D128_1CH_HTONS_VOL_HP+0x48>
 8005c82:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005c84:	9905      	ldr	r1, [sp, #20]
 8005c86:	6091      	str	r1, [r2, #8]
 8005c88:	9904      	ldr	r1, [sp, #16]
 8005c8a:	60d1      	str	r1, [r2, #12]
 8005c8c:	4613      	mov	r3, r2
 8005c8e:	61d6      	str	r6, [r2, #28]
 8005c90:	9910      	ldr	r1, [sp, #64]	; 0x40
 8005c92:	9a03      	ldr	r2, [sp, #12]
 8005c94:	611a      	str	r2, [r3, #16]
 8005c96:	2000      	movs	r0, #0
 8005c98:	f8c3 e014 	str.w	lr, [r3, #20]
 8005c9c:	6199      	str	r1, [r3, #24]
 8005c9e:	b013      	add	sp, #76	; 0x4c
 8005ca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ca4:	f8dd e018 	ldr.w	lr, [sp, #24]
 8005ca8:	e7eb      	b.n	8005c82 <D128_1CH_HTONS_VOL_HP+0x29e>
 8005caa:	bf00      	nop
 8005cac:	00780069 	.word	0x00780069
 8005cb0:	005b004e 	.word	0x005b004e
 8005cb4:	00420037 	.word	0x00420037
 8005cb8:	002d0024 	.word	0x002d0024
 8005cbc:	001c0015 	.word	0x001c0015
 8005cc0:	000f000a 	.word	0x000f000a
 8005cc4:	00060003 	.word	0x00060003
 8005cc8:	00880096 	.word	0x00880096
 8005ccc:	00a200ac 	.word	0x00a200ac
 8005cd0:	00b400ba 	.word	0x00b400ba
 8005cd4:	00be00c0 	.word	0x00be00c0
 8005cd8:	00c000be 	.word	0x00c000be
 8005cdc:	00ba00b4 	.word	0x00ba00b4
 8005ce0:	00ac00a2 	.word	0x00ac00a2
 8005ce4:	00030006 	.word	0x00030006
 8005ce8:	000a000f 	.word	0x000a000f
 8005cec:	0015001c 	.word	0x0015001c
 8005cf0:	0024002d 	.word	0x0024002d
 8005cf4:	00370042 	.word	0x00370042
 8005cf8:	004e005b 	.word	0x004e005b
 8005cfc:	00690078 	.word	0x00690078
 8005d00:	20000000 	.word	0x20000000
 8005d04:	00960088 	.word	0x00960088

08005d08 <PDM_Filter_Init>:
 8005d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d0a:	2240      	movs	r2, #64	; 0x40
 8005d0c:	4604      	mov	r4, r0
 8005d0e:	2100      	movs	r1, #0
 8005d10:	300c      	adds	r0, #12
 8005d12:	f000 f9f9 	bl	8006108 <memset>
 8005d16:	493b      	ldr	r1, [pc, #236]	; (8005e04 <PDM_Filter_Init+0xfc>)
 8005d18:	483b      	ldr	r0, [pc, #236]	; (8005e08 <PDM_Filter_Init+0x100>)
 8005d1a:	f000 f98d 	bl	8006038 <CRC_Lock>
 8005d1e:	8822      	ldrh	r2, [r4, #0]
 8005d20:	8963      	ldrh	r3, [r4, #10]
 8005d22:	4938      	ldr	r1, [pc, #224]	; (8005e04 <PDM_Filter_Init+0xfc>)
 8005d24:	8925      	ldrh	r5, [r4, #8]
 8005d26:	86a3      	strh	r3, [r4, #52]	; 0x34
 8005d28:	2801      	cmp	r0, #1
 8005d2a:	f04f 0300 	mov.w	r3, #0
 8005d2e:	bf18      	it	ne
 8005d30:	2100      	movne	r1, #0
 8005d32:	2a01      	cmp	r2, #1
 8005d34:	6461      	str	r1, [r4, #68]	; 0x44
 8005d36:	86e5      	strh	r5, [r4, #54]	; 0x36
 8005d38:	61a3      	str	r3, [r4, #24]
 8005d3a:	6123      	str	r3, [r4, #16]
 8005d3c:	6163      	str	r3, [r4, #20]
 8005d3e:	60e3      	str	r3, [r4, #12]
 8005d40:	6263      	str	r3, [r4, #36]	; 0x24
 8005d42:	61e3      	str	r3, [r4, #28]
 8005d44:	6223      	str	r3, [r4, #32]
 8005d46:	6423      	str	r3, [r4, #64]	; 0x40
 8005d48:	d918      	bls.n	8005d7c <PDM_Filter_Init+0x74>
 8005d4a:	2003      	movs	r0, #3
 8005d4c:	2302      	movs	r3, #2
 8005d4e:	8862      	ldrh	r2, [r4, #2]
 8005d50:	2a01      	cmp	r2, #1
 8005d52:	d91d      	bls.n	8005d90 <PDM_Filter_Init+0x88>
 8005d54:	2140      	movs	r1, #64	; 0x40
 8005d56:	2300      	movs	r3, #0
 8005d58:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8005d5a:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
 8005d5e:	6862      	ldr	r2, [r4, #4]
 8005d60:	bf04      	itt	eq
 8005d62:	6421      	streq	r1, [r4, #64]	; 0x40
 8005d64:	460b      	moveq	r3, r1
 8005d66:	b11a      	cbz	r2, 8005d70 <PDM_Filter_Init+0x68>
 8005d68:	f043 0310 	orr.w	r3, r3, #16
 8005d6c:	6423      	str	r3, [r4, #64]	; 0x40
 8005d6e:	62e2      	str	r2, [r4, #44]	; 0x2c
 8005d70:	2200      	movs	r2, #0
 8005d72:	8722      	strh	r2, [r4, #56]	; 0x38
 8005d74:	b908      	cbnz	r0, 8005d7a <PDM_Filter_Init+0x72>
 8005d76:	3380      	adds	r3, #128	; 0x80
 8005d78:	6423      	str	r3, [r4, #64]	; 0x40
 8005d7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d7c:	4d23      	ldr	r5, [pc, #140]	; (8005e0c <PDM_Filter_Init+0x104>)
 8005d7e:	d010      	beq.n	8005da2 <PDM_Filter_Init+0x9a>
 8005d80:	782a      	ldrb	r2, [r5, #0]
 8005d82:	2a01      	cmp	r2, #1
 8005d84:	d027      	beq.n	8005dd6 <PDM_Filter_Init+0xce>
 8005d86:	8862      	ldrh	r2, [r4, #2]
 8005d88:	2a01      	cmp	r2, #1
 8005d8a:	f04f 0001 	mov.w	r0, #1
 8005d8e:	d8e1      	bhi.n	8005d54 <PDM_Filter_Init+0x4c>
 8005d90:	d001      	beq.n	8005d96 <PDM_Filter_Init+0x8e>
 8005d92:	4618      	mov	r0, r3
 8005d94:	e7de      	b.n	8005d54 <PDM_Filter_Init+0x4c>
 8005d96:	2220      	movs	r2, #32
 8005d98:	4618      	mov	r0, r3
 8005d9a:	6422      	str	r2, [r4, #64]	; 0x40
 8005d9c:	4613      	mov	r3, r2
 8005d9e:	2160      	movs	r1, #96	; 0x60
 8005da0:	e7da      	b.n	8005d58 <PDM_Filter_Init+0x50>
 8005da2:	7829      	ldrb	r1, [r5, #0]
 8005da4:	2900      	cmp	r1, #0
 8005da6:	d1ee      	bne.n	8005d86 <PDM_Filter_Init+0x7e>
 8005da8:	4919      	ldr	r1, [pc, #100]	; (8005e10 <PDM_Filter_Init+0x108>)
 8005daa:	f8df e06c 	ldr.w	lr, [pc, #108]	; 8005e18 <PDM_Filter_Init+0x110>
 8005dae:	4f19      	ldr	r7, [pc, #100]	; (8005e14 <PDM_Filter_Init+0x10c>)
 8005db0:	f501 6680 	add.w	r6, r1, #1024	; 0x400
 8005db4:	684a      	ldr	r2, [r1, #4]
 8005db6:	ea0e 5302 	and.w	r3, lr, r2, lsl #20
 8005dba:	ea02 0007 	and.w	r0, r2, r7
 8005dbe:	4303      	orrs	r3, r0
 8005dc0:	f3c2 5209 	ubfx	r2, r2, #20, #10
 8005dc4:	4413      	add	r3, r2
 8005dc6:	f841 3f04 	str.w	r3, [r1, #4]!
 8005dca:	428e      	cmp	r6, r1
 8005dcc:	d1f2      	bne.n	8005db4 <PDM_Filter_Init+0xac>
 8005dce:	2001      	movs	r0, #1
 8005dd0:	7028      	strb	r0, [r5, #0]
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	e7bb      	b.n	8005d4e <PDM_Filter_Init+0x46>
 8005dd6:	490e      	ldr	r1, [pc, #56]	; (8005e10 <PDM_Filter_Init+0x108>)
 8005dd8:	f8df e03c 	ldr.w	lr, [pc, #60]	; 8005e18 <PDM_Filter_Init+0x110>
 8005ddc:	4f0d      	ldr	r7, [pc, #52]	; (8005e14 <PDM_Filter_Init+0x10c>)
 8005dde:	f501 6680 	add.w	r6, r1, #1024	; 0x400
 8005de2:	684a      	ldr	r2, [r1, #4]
 8005de4:	ea0e 5302 	and.w	r3, lr, r2, lsl #20
 8005de8:	ea02 0007 	and.w	r0, r2, r7
 8005dec:	4303      	orrs	r3, r0
 8005dee:	f3c2 5209 	ubfx	r2, r2, #20, #10
 8005df2:	4413      	add	r3, r2
 8005df4:	f841 3f04 	str.w	r3, [r1, #4]!
 8005df8:	428e      	cmp	r6, r1
 8005dfa:	d1f2      	bne.n	8005de2 <PDM_Filter_Init+0xda>
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	702b      	strb	r3, [r5, #0]
 8005e00:	e7c1      	b.n	8005d86 <PDM_Filter_Init+0x7e>
 8005e02:	bf00      	nop
 8005e04:	b5e8b5cd 	.word	0xb5e8b5cd
 8005e08:	f407a5c2 	.word	0xf407a5c2
 8005e0c:	2000048c 	.word	0x2000048c
 8005e10:	1ffffffc 	.word	0x1ffffffc
 8005e14:	000ffc00 	.word	0x000ffc00
 8005e18:	3ff00000 	.word	0x3ff00000

08005e1c <PDM_Filter_setConfig>:
 8005e1c:	4b66      	ldr	r3, [pc, #408]	; (8005fb8 <PDM_Filter_setConfig+0x19c>)
 8005e1e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005e20:	429a      	cmp	r2, r3
 8005e22:	d001      	beq.n	8005e28 <PDM_Filter_setConfig+0xc>
 8005e24:	2004      	movs	r0, #4
 8005e26:	4770      	bx	lr
 8005e28:	b530      	push	{r4, r5, lr}
 8005e2a:	880a      	ldrh	r2, [r1, #0]
 8005e2c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005e2e:	ed2d 8b04 	vpush	{d8-d9}
 8005e32:	4604      	mov	r4, r0
 8005e34:	460d      	mov	r5, r1
 8005e36:	1e51      	subs	r1, r2, #1
 8005e38:	f423 7080 	bic.w	r0, r3, #256	; 0x100
 8005e3c:	2906      	cmp	r1, #6
 8005e3e:	b083      	sub	sp, #12
 8005e40:	6420      	str	r0, [r4, #64]	; 0x40
 8005e42:	d91a      	bls.n	8005e7a <PDM_Filter_setConfig+0x5e>
 8005e44:	2008      	movs	r0, #8
 8005e46:	f9b4 1038 	ldrsh.w	r1, [r4, #56]	; 0x38
 8005e4a:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8005e4e:	4299      	cmp	r1, r3
 8005e50:	d07e      	beq.n	8005f50 <PDM_Filter_setConfig+0x134>
 8005e52:	f113 0f0c 	cmn.w	r3, #12
 8005e56:	da2a      	bge.n	8005eae <PDM_Filter_setConfig+0x92>
 8005e58:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 8005e5c:	3040      	adds	r0, #64	; 0x40
 8005e5e:	80ab      	strh	r3, [r5, #4]
 8005e60:	8622      	strh	r2, [r4, #48]	; 0x30
 8005e62:	886b      	ldrh	r3, [r5, #2]
 8005e64:	8663      	strh	r3, [r4, #50]	; 0x32
 8005e66:	b920      	cbnz	r0, 8005e72 <PDM_Filter_setConfig+0x56>
 8005e68:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005e6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e6e:	6423      	str	r3, [r4, #64]	; 0x40
 8005e70:	2000      	movs	r0, #0
 8005e72:	b003      	add	sp, #12
 8005e74:	ecbd 8b04 	vpop	{d8-d9}
 8005e78:	bd30      	pop	{r4, r5, pc}
 8005e7a:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 8005e7c:	4291      	cmp	r1, r2
 8005e7e:	d06c      	beq.n	8005f5a <PDM_Filter_setConfig+0x13e>
 8005e80:	f423 7387 	bic.w	r3, r3, #270	; 0x10e
 8005e84:	f023 0301 	bic.w	r3, r3, #1
 8005e88:	4313      	orrs	r3, r2
 8005e8a:	f003 0170 	and.w	r1, r3, #112	; 0x70
 8005e8e:	6423      	str	r3, [r4, #64]	; 0x40
 8005e90:	2970      	cmp	r1, #112	; 0x70
 8005e92:	f003 030f 	and.w	r3, r3, #15
 8005e96:	f103 33ff 	add.w	r3, r3, #4294967295
 8005e9a:	d066      	beq.n	8005f6a <PDM_Filter_setConfig+0x14e>
 8005e9c:	2b06      	cmp	r3, #6
 8005e9e:	f200 8089 	bhi.w	8005fb4 <PDM_Filter_setConfig+0x198>
 8005ea2:	e8df f003 	tbb	[pc, r3]
 8005ea6:	4f52      	.short	0x4f52
 8005ea8:	3d43494c 	.word	0x3d43494c
 8005eac:	46          	.byte	0x46
 8005ead:	00          	.byte	0x00
 8005eae:	2b33      	cmp	r3, #51	; 0x33
 8005eb0:	dc32      	bgt.n	8005f18 <PDM_Filter_setConfig+0xfc>
 8005eb2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005eb4:	f002 020f 	and.w	r2, r2, #15
 8005eb8:	3a01      	subs	r2, #1
 8005eba:	2a06      	cmp	r2, #6
 8005ebc:	d872      	bhi.n	8005fa4 <PDM_Filter_setConfig+0x188>
 8005ebe:	493f      	ldr	r1, [pc, #252]	; (8005fbc <PDM_Filter_setConfig+0x1a0>)
 8005ec0:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8005ec4:	ed92 9a00 	vldr	s18, [r2]
 8005ec8:	ed92 8a07 	vldr	s16, [r2, #28]
 8005ecc:	9001      	str	r0, [sp, #4]
 8005ece:	ee07 3a90 	vmov	s15, r3
 8005ed2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005ed6:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 8005eda:	eec7 0aa0 	vdiv.f32	s1, s15, s1
 8005ede:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8005ee2:	f000 f93d 	bl	8006160 <powf>
 8005ee6:	eddf 0a36 	vldr	s1, [pc, #216]	; 8005fc0 <PDM_Filter_setConfig+0x1a4>
 8005eea:	eef0 8a40 	vmov.f32	s17, s0
 8005eee:	ee70 0ac9 	vsub.f32	s1, s1, s18
 8005ef2:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8005ef6:	f000 f933 	bl	8006160 <powf>
 8005efa:	ee28 8a28 	vmul.f32	s16, s16, s17
 8005efe:	ee28 0a00 	vmul.f32	s0, s16, s0
 8005f02:	f000 f909 	bl	8006118 <roundf>
 8005f06:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8005f0a:	88ab      	ldrh	r3, [r5, #4]
 8005f0c:	882a      	ldrh	r2, [r5, #0]
 8005f0e:	9801      	ldr	r0, [sp, #4]
 8005f10:	ed84 0a0f 	vstr	s0, [r4, #60]	; 0x3c
 8005f14:	8723      	strh	r3, [r4, #56]	; 0x38
 8005f16:	e7a3      	b.n	8005e60 <PDM_Filter_setConfig+0x44>
 8005f18:	2333      	movs	r3, #51	; 0x33
 8005f1a:	3040      	adds	r0, #64	; 0x40
 8005f1c:	80ab      	strh	r3, [r5, #4]
 8005f1e:	e79f      	b.n	8005e60 <PDM_Filter_setConfig+0x44>
 8005f20:	4b28      	ldr	r3, [pc, #160]	; (8005fc4 <PDM_Filter_setConfig+0x1a8>)
 8005f22:	64a3      	str	r3, [r4, #72]	; 0x48
 8005f24:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8005f28:	2000      	movs	r0, #0
 8005f2a:	e792      	b.n	8005e52 <PDM_Filter_setConfig+0x36>
 8005f2c:	4b26      	ldr	r3, [pc, #152]	; (8005fc8 <PDM_Filter_setConfig+0x1ac>)
 8005f2e:	64a3      	str	r3, [r4, #72]	; 0x48
 8005f30:	e7f8      	b.n	8005f24 <PDM_Filter_setConfig+0x108>
 8005f32:	4b26      	ldr	r3, [pc, #152]	; (8005fcc <PDM_Filter_setConfig+0x1b0>)
 8005f34:	64a3      	str	r3, [r4, #72]	; 0x48
 8005f36:	e7f5      	b.n	8005f24 <PDM_Filter_setConfig+0x108>
 8005f38:	4b25      	ldr	r3, [pc, #148]	; (8005fd0 <PDM_Filter_setConfig+0x1b4>)
 8005f3a:	64a3      	str	r3, [r4, #72]	; 0x48
 8005f3c:	e7f2      	b.n	8005f24 <PDM_Filter_setConfig+0x108>
 8005f3e:	4b25      	ldr	r3, [pc, #148]	; (8005fd4 <PDM_Filter_setConfig+0x1b8>)
 8005f40:	64a3      	str	r3, [r4, #72]	; 0x48
 8005f42:	e7ef      	b.n	8005f24 <PDM_Filter_setConfig+0x108>
 8005f44:	4b24      	ldr	r3, [pc, #144]	; (8005fd8 <PDM_Filter_setConfig+0x1bc>)
 8005f46:	64a3      	str	r3, [r4, #72]	; 0x48
 8005f48:	e7ec      	b.n	8005f24 <PDM_Filter_setConfig+0x108>
 8005f4a:	4b24      	ldr	r3, [pc, #144]	; (8005fdc <PDM_Filter_setConfig+0x1c0>)
 8005f4c:	64a3      	str	r3, [r4, #72]	; 0x48
 8005f4e:	e7e9      	b.n	8005f24 <PDM_Filter_setConfig+0x108>
 8005f50:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 8005f52:	4291      	cmp	r1, r2
 8005f54:	f47f af7d 	bne.w	8005e52 <PDM_Filter_setConfig+0x36>
 8005f58:	e783      	b.n	8005e62 <PDM_Filter_setConfig+0x46>
 8005f5a:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8005f5e:	f9b4 1038 	ldrsh.w	r1, [r4, #56]	; 0x38
 8005f62:	4299      	cmp	r1, r3
 8005f64:	d023      	beq.n	8005fae <PDM_Filter_setConfig+0x192>
 8005f66:	2000      	movs	r0, #0
 8005f68:	e773      	b.n	8005e52 <PDM_Filter_setConfig+0x36>
 8005f6a:	2b06      	cmp	r3, #6
 8005f6c:	d822      	bhi.n	8005fb4 <PDM_Filter_setConfig+0x198>
 8005f6e:	e8df f003 	tbb	[pc, r3]
 8005f72:	1316      	.short	0x1316
 8005f74:	070a0d10 	.word	0x070a0d10
 8005f78:	04          	.byte	0x04
 8005f79:	00          	.byte	0x00
 8005f7a:	4b19      	ldr	r3, [pc, #100]	; (8005fe0 <PDM_Filter_setConfig+0x1c4>)
 8005f7c:	64a3      	str	r3, [r4, #72]	; 0x48
 8005f7e:	e7d1      	b.n	8005f24 <PDM_Filter_setConfig+0x108>
 8005f80:	4b18      	ldr	r3, [pc, #96]	; (8005fe4 <PDM_Filter_setConfig+0x1c8>)
 8005f82:	64a3      	str	r3, [r4, #72]	; 0x48
 8005f84:	e7ce      	b.n	8005f24 <PDM_Filter_setConfig+0x108>
 8005f86:	4b18      	ldr	r3, [pc, #96]	; (8005fe8 <PDM_Filter_setConfig+0x1cc>)
 8005f88:	64a3      	str	r3, [r4, #72]	; 0x48
 8005f8a:	e7cb      	b.n	8005f24 <PDM_Filter_setConfig+0x108>
 8005f8c:	4b17      	ldr	r3, [pc, #92]	; (8005fec <PDM_Filter_setConfig+0x1d0>)
 8005f8e:	64a3      	str	r3, [r4, #72]	; 0x48
 8005f90:	e7c8      	b.n	8005f24 <PDM_Filter_setConfig+0x108>
 8005f92:	4b17      	ldr	r3, [pc, #92]	; (8005ff0 <PDM_Filter_setConfig+0x1d4>)
 8005f94:	64a3      	str	r3, [r4, #72]	; 0x48
 8005f96:	e7c5      	b.n	8005f24 <PDM_Filter_setConfig+0x108>
 8005f98:	4b16      	ldr	r3, [pc, #88]	; (8005ff4 <PDM_Filter_setConfig+0x1d8>)
 8005f9a:	64a3      	str	r3, [r4, #72]	; 0x48
 8005f9c:	e7c2      	b.n	8005f24 <PDM_Filter_setConfig+0x108>
 8005f9e:	4b16      	ldr	r3, [pc, #88]	; (8005ff8 <PDM_Filter_setConfig+0x1dc>)
 8005fa0:	64a3      	str	r3, [r4, #72]	; 0x48
 8005fa2:	e7bf      	b.n	8005f24 <PDM_Filter_setConfig+0x108>
 8005fa4:	ed9f 8a15 	vldr	s16, [pc, #84]	; 8005ffc <PDM_Filter_setConfig+0x1e0>
 8005fa8:	eeb0 9a48 	vmov.f32	s18, s16
 8005fac:	e78e      	b.n	8005ecc <PDM_Filter_setConfig+0xb0>
 8005fae:	886b      	ldrh	r3, [r5, #2]
 8005fb0:	8663      	strh	r3, [r4, #50]	; 0x32
 8005fb2:	e759      	b.n	8005e68 <PDM_Filter_setConfig+0x4c>
 8005fb4:	2000      	movs	r0, #0
 8005fb6:	e746      	b.n	8005e46 <PDM_Filter_setConfig+0x2a>
 8005fb8:	b5e8b5cd 	.word	0xb5e8b5cd
 8005fbc:	08006930 	.word	0x08006930
 8005fc0:	42000000 	.word	0x42000000
 8005fc4:	08004389 	.word	0x08004389
 8005fc8:	08004269 	.word	0x08004269
 8005fcc:	08004519 	.word	0x08004519
 8005fd0:	08004d5d 	.word	0x08004d5d
 8005fd4:	08004abd 	.word	0x08004abd
 8005fd8:	0800489d 	.word	0x0800489d
 8005fdc:	080046b1 	.word	0x080046b1
 8005fe0:	08005369 	.word	0x08005369
 8005fe4:	08005231 	.word	0x08005231
 8005fe8:	0800514d 	.word	0x0800514d
 8005fec:	080059e5 	.word	0x080059e5
 8005ff0:	080057d1 	.word	0x080057d1
 8005ff4:	08005619 	.word	0x08005619
 8005ff8:	080054ad 	.word	0x080054ad
 8005ffc:	00000000 	.word	0x00000000

08006000 <PDM_Filter>:
 8006000:	b410      	push	{r4}
 8006002:	4b0c      	ldr	r3, [pc, #48]	; (8006034 <PDM_Filter+0x34>)
 8006004:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8006006:	429c      	cmp	r4, r3
 8006008:	d003      	beq.n	8006012 <PDM_Filter+0x12>
 800600a:	2004      	movs	r0, #4
 800600c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006010:	4770      	bx	lr
 8006012:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8006014:	05dc      	lsls	r4, r3, #23
 8006016:	d407      	bmi.n	8006028 <PDM_Filter+0x28>
 8006018:	f013 0f80 	tst.w	r3, #128	; 0x80
 800601c:	bf14      	ite	ne
 800601e:	2020      	movne	r0, #32
 8006020:	2030      	moveq	r0, #48	; 0x30
 8006022:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006026:	4770      	bx	lr
 8006028:	6c93      	ldr	r3, [r2, #72]	; 0x48
 800602a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800602e:	320c      	adds	r2, #12
 8006030:	4718      	bx	r3
 8006032:	bf00      	nop
 8006034:	b5e8b5cd 	.word	0xb5e8b5cd

08006038 <CRC_Lock>:
 8006038:	4a17      	ldr	r2, [pc, #92]	; (8006098 <CRC_Lock+0x60>)
 800603a:	6813      	ldr	r3, [r2, #0]
 800603c:	b410      	push	{r4}
 800603e:	f023 0301 	bic.w	r3, r3, #1
 8006042:	4c16      	ldr	r4, [pc, #88]	; (800609c <CRC_Lock+0x64>)
 8006044:	6013      	str	r3, [r2, #0]
 8006046:	6823      	ldr	r3, [r4, #0]
 8006048:	b933      	cbnz	r3, 8006058 <CRC_Lock+0x20>
 800604a:	4b15      	ldr	r3, [pc, #84]	; (80060a0 <CRC_Lock+0x68>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006052:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8006056:	d00f      	beq.n	8006078 <CRC_Lock+0x40>
 8006058:	4a12      	ldr	r2, [pc, #72]	; (80060a4 <CRC_Lock+0x6c>)
 800605a:	2301      	movs	r3, #1
 800605c:	6013      	str	r3, [r2, #0]
 800605e:	6813      	ldr	r3, [r2, #0]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d1fc      	bne.n	800605e <CRC_Lock+0x26>
 8006064:	4b10      	ldr	r3, [pc, #64]	; (80060a8 <CRC_Lock+0x70>)
 8006066:	f85d 4b04 	ldr.w	r4, [sp], #4
 800606a:	6018      	str	r0, [r3, #0]
 800606c:	6818      	ldr	r0, [r3, #0]
 800606e:	1a08      	subs	r0, r1, r0
 8006070:	fab0 f080 	clz	r0, r0
 8006074:	0940      	lsrs	r0, r0, #5
 8006076:	4770      	bx	lr
 8006078:	4a0c      	ldr	r2, [pc, #48]	; (80060ac <CRC_Lock+0x74>)
 800607a:	2301      	movs	r3, #1
 800607c:	6013      	str	r3, [r2, #0]
 800607e:	6813      	ldr	r3, [r2, #0]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d1fc      	bne.n	800607e <CRC_Lock+0x46>
 8006084:	4b0a      	ldr	r3, [pc, #40]	; (80060b0 <CRC_Lock+0x78>)
 8006086:	f85d 4b04 	ldr.w	r4, [sp], #4
 800608a:	6018      	str	r0, [r3, #0]
 800608c:	6818      	ldr	r0, [r3, #0]
 800608e:	1a40      	subs	r0, r0, r1
 8006090:	fab0 f080 	clz	r0, r0
 8006094:	0940      	lsrs	r0, r0, #5
 8006096:	4770      	bx	lr
 8006098:	e0002000 	.word	0xe0002000
 800609c:	e0042000 	.word	0xe0042000
 80060a0:	5c001000 	.word	0x5c001000
 80060a4:	40023008 	.word	0x40023008
 80060a8:	40023000 	.word	0x40023000
 80060ac:	58024c08 	.word	0x58024c08
 80060b0:	58024c00 	.word	0x58024c00

080060b4 <__errno>:
 80060b4:	4b01      	ldr	r3, [pc, #4]	; (80060bc <__errno+0x8>)
 80060b6:	6818      	ldr	r0, [r3, #0]
 80060b8:	4770      	bx	lr
 80060ba:	bf00      	nop
 80060bc:	2000040c 	.word	0x2000040c

080060c0 <__libc_init_array>:
 80060c0:	b570      	push	{r4, r5, r6, lr}
 80060c2:	4d0d      	ldr	r5, [pc, #52]	; (80060f8 <__libc_init_array+0x38>)
 80060c4:	4c0d      	ldr	r4, [pc, #52]	; (80060fc <__libc_init_array+0x3c>)
 80060c6:	1b64      	subs	r4, r4, r5
 80060c8:	10a4      	asrs	r4, r4, #2
 80060ca:	2600      	movs	r6, #0
 80060cc:	42a6      	cmp	r6, r4
 80060ce:	d109      	bne.n	80060e4 <__libc_init_array+0x24>
 80060d0:	4d0b      	ldr	r5, [pc, #44]	; (8006100 <__libc_init_array+0x40>)
 80060d2:	4c0c      	ldr	r4, [pc, #48]	; (8006104 <__libc_init_array+0x44>)
 80060d4:	f000 fc16 	bl	8006904 <_init>
 80060d8:	1b64      	subs	r4, r4, r5
 80060da:	10a4      	asrs	r4, r4, #2
 80060dc:	2600      	movs	r6, #0
 80060de:	42a6      	cmp	r6, r4
 80060e0:	d105      	bne.n	80060ee <__libc_init_array+0x2e>
 80060e2:	bd70      	pop	{r4, r5, r6, pc}
 80060e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80060e8:	4798      	blx	r3
 80060ea:	3601      	adds	r6, #1
 80060ec:	e7ee      	b.n	80060cc <__libc_init_array+0xc>
 80060ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80060f2:	4798      	blx	r3
 80060f4:	3601      	adds	r6, #1
 80060f6:	e7f2      	b.n	80060de <__libc_init_array+0x1e>
 80060f8:	080069a8 	.word	0x080069a8
 80060fc:	080069a8 	.word	0x080069a8
 8006100:	080069a8 	.word	0x080069a8
 8006104:	080069ac 	.word	0x080069ac

08006108 <memset>:
 8006108:	4402      	add	r2, r0
 800610a:	4603      	mov	r3, r0
 800610c:	4293      	cmp	r3, r2
 800610e:	d100      	bne.n	8006112 <memset+0xa>
 8006110:	4770      	bx	lr
 8006112:	f803 1b01 	strb.w	r1, [r3], #1
 8006116:	e7f9      	b.n	800610c <memset+0x4>

08006118 <roundf>:
 8006118:	ee10 0a10 	vmov	r0, s0
 800611c:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8006120:	3a7f      	subs	r2, #127	; 0x7f
 8006122:	2a16      	cmp	r2, #22
 8006124:	dc15      	bgt.n	8006152 <roundf+0x3a>
 8006126:	2a00      	cmp	r2, #0
 8006128:	da08      	bge.n	800613c <roundf+0x24>
 800612a:	3201      	adds	r2, #1
 800612c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8006130:	d101      	bne.n	8006136 <roundf+0x1e>
 8006132:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 8006136:	ee00 3a10 	vmov	s0, r3
 800613a:	4770      	bx	lr
 800613c:	4907      	ldr	r1, [pc, #28]	; (800615c <roundf+0x44>)
 800613e:	4111      	asrs	r1, r2
 8006140:	4208      	tst	r0, r1
 8006142:	d0fa      	beq.n	800613a <roundf+0x22>
 8006144:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006148:	4113      	asrs	r3, r2
 800614a:	4403      	add	r3, r0
 800614c:	ea23 0301 	bic.w	r3, r3, r1
 8006150:	e7f1      	b.n	8006136 <roundf+0x1e>
 8006152:	2a80      	cmp	r2, #128	; 0x80
 8006154:	d1f1      	bne.n	800613a <roundf+0x22>
 8006156:	ee30 0a00 	vadd.f32	s0, s0, s0
 800615a:	4770      	bx	lr
 800615c:	007fffff 	.word	0x007fffff

08006160 <powf>:
 8006160:	b508      	push	{r3, lr}
 8006162:	ed2d 8b04 	vpush	{d8-d9}
 8006166:	eeb0 8a60 	vmov.f32	s16, s1
 800616a:	eeb0 9a40 	vmov.f32	s18, s0
 800616e:	f000 f84f 	bl	8006210 <__ieee754_powf>
 8006172:	eeb4 8a48 	vcmp.f32	s16, s16
 8006176:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800617a:	eef0 8a40 	vmov.f32	s17, s0
 800617e:	d63e      	bvs.n	80061fe <powf+0x9e>
 8006180:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8006184:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006188:	d112      	bne.n	80061b0 <powf+0x50>
 800618a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800618e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006192:	d039      	beq.n	8006208 <powf+0xa8>
 8006194:	eeb0 0a48 	vmov.f32	s0, s16
 8006198:	f000 fb35 	bl	8006806 <finitef>
 800619c:	b378      	cbz	r0, 80061fe <powf+0x9e>
 800619e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80061a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061a6:	d52a      	bpl.n	80061fe <powf+0x9e>
 80061a8:	f7ff ff84 	bl	80060b4 <__errno>
 80061ac:	2322      	movs	r3, #34	; 0x22
 80061ae:	e014      	b.n	80061da <powf+0x7a>
 80061b0:	f000 fb29 	bl	8006806 <finitef>
 80061b4:	b998      	cbnz	r0, 80061de <powf+0x7e>
 80061b6:	eeb0 0a49 	vmov.f32	s0, s18
 80061ba:	f000 fb24 	bl	8006806 <finitef>
 80061be:	b170      	cbz	r0, 80061de <powf+0x7e>
 80061c0:	eeb0 0a48 	vmov.f32	s0, s16
 80061c4:	f000 fb1f 	bl	8006806 <finitef>
 80061c8:	b148      	cbz	r0, 80061de <powf+0x7e>
 80061ca:	eef4 8a68 	vcmp.f32	s17, s17
 80061ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061d2:	d7e9      	bvc.n	80061a8 <powf+0x48>
 80061d4:	f7ff ff6e 	bl	80060b4 <__errno>
 80061d8:	2321      	movs	r3, #33	; 0x21
 80061da:	6003      	str	r3, [r0, #0]
 80061dc:	e00f      	b.n	80061fe <powf+0x9e>
 80061de:	eef5 8a40 	vcmp.f32	s17, #0.0
 80061e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061e6:	d10a      	bne.n	80061fe <powf+0x9e>
 80061e8:	eeb0 0a49 	vmov.f32	s0, s18
 80061ec:	f000 fb0b 	bl	8006806 <finitef>
 80061f0:	b128      	cbz	r0, 80061fe <powf+0x9e>
 80061f2:	eeb0 0a48 	vmov.f32	s0, s16
 80061f6:	f000 fb06 	bl	8006806 <finitef>
 80061fa:	2800      	cmp	r0, #0
 80061fc:	d1d4      	bne.n	80061a8 <powf+0x48>
 80061fe:	eeb0 0a68 	vmov.f32	s0, s17
 8006202:	ecbd 8b04 	vpop	{d8-d9}
 8006206:	bd08      	pop	{r3, pc}
 8006208:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800620c:	e7f7      	b.n	80061fe <powf+0x9e>
	...

08006210 <__ieee754_powf>:
 8006210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006214:	ee10 4a90 	vmov	r4, s1
 8006218:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 800621c:	ed2d 8b02 	vpush	{d8}
 8006220:	ee10 6a10 	vmov	r6, s0
 8006224:	eeb0 8a40 	vmov.f32	s16, s0
 8006228:	eef0 8a60 	vmov.f32	s17, s1
 800622c:	d10c      	bne.n	8006248 <__ieee754_powf+0x38>
 800622e:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 8006232:	0076      	lsls	r6, r6, #1
 8006234:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 8006238:	f240 8296 	bls.w	8006768 <__ieee754_powf+0x558>
 800623c:	ee38 0a28 	vadd.f32	s0, s16, s17
 8006240:	ecbd 8b02 	vpop	{d8}
 8006244:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006248:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800624c:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8006250:	dcf4      	bgt.n	800623c <__ieee754_powf+0x2c>
 8006252:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 8006256:	dd08      	ble.n	800626a <__ieee754_powf+0x5a>
 8006258:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 800625c:	d1ee      	bne.n	800623c <__ieee754_powf+0x2c>
 800625e:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 8006262:	0064      	lsls	r4, r4, #1
 8006264:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 8006268:	e7e6      	b.n	8006238 <__ieee754_powf+0x28>
 800626a:	2e00      	cmp	r6, #0
 800626c:	da20      	bge.n	80062b0 <__ieee754_powf+0xa0>
 800626e:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 8006272:	da2d      	bge.n	80062d0 <__ieee754_powf+0xc0>
 8006274:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8006278:	f2c0 827f 	blt.w	800677a <__ieee754_powf+0x56a>
 800627c:	ea4f 53e8 	mov.w	r3, r8, asr #23
 8006280:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8006284:	fa48 f703 	asr.w	r7, r8, r3
 8006288:	fa07 f303 	lsl.w	r3, r7, r3
 800628c:	4543      	cmp	r3, r8
 800628e:	f040 8274 	bne.w	800677a <__ieee754_powf+0x56a>
 8006292:	f007 0701 	and.w	r7, r7, #1
 8006296:	f1c7 0702 	rsb	r7, r7, #2
 800629a:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800629e:	d11f      	bne.n	80062e0 <__ieee754_powf+0xd0>
 80062a0:	2c00      	cmp	r4, #0
 80062a2:	f280 8267 	bge.w	8006774 <__ieee754_powf+0x564>
 80062a6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80062aa:	ee87 0a88 	vdiv.f32	s0, s15, s16
 80062ae:	e7c7      	b.n	8006240 <__ieee754_powf+0x30>
 80062b0:	2700      	movs	r7, #0
 80062b2:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 80062b6:	d1f0      	bne.n	800629a <__ieee754_powf+0x8a>
 80062b8:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 80062bc:	f000 8254 	beq.w	8006768 <__ieee754_powf+0x558>
 80062c0:	dd08      	ble.n	80062d4 <__ieee754_powf+0xc4>
 80062c2:	ed9f 0ac2 	vldr	s0, [pc, #776]	; 80065cc <__ieee754_powf+0x3bc>
 80062c6:	2c00      	cmp	r4, #0
 80062c8:	bfa8      	it	ge
 80062ca:	eeb0 0a68 	vmovge.f32	s0, s17
 80062ce:	e7b7      	b.n	8006240 <__ieee754_powf+0x30>
 80062d0:	2702      	movs	r7, #2
 80062d2:	e7ee      	b.n	80062b2 <__ieee754_powf+0xa2>
 80062d4:	2c00      	cmp	r4, #0
 80062d6:	f280 824a 	bge.w	800676e <__ieee754_powf+0x55e>
 80062da:	eeb1 0a68 	vneg.f32	s0, s17
 80062de:	e7af      	b.n	8006240 <__ieee754_powf+0x30>
 80062e0:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 80062e4:	d102      	bne.n	80062ec <__ieee754_powf+0xdc>
 80062e6:	ee28 0a08 	vmul.f32	s0, s16, s16
 80062ea:	e7a9      	b.n	8006240 <__ieee754_powf+0x30>
 80062ec:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 80062f0:	eeb0 0a48 	vmov.f32	s0, s16
 80062f4:	d107      	bne.n	8006306 <__ieee754_powf+0xf6>
 80062f6:	2e00      	cmp	r6, #0
 80062f8:	db05      	blt.n	8006306 <__ieee754_powf+0xf6>
 80062fa:	ecbd 8b02 	vpop	{d8}
 80062fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006302:	f000 ba53 	b.w	80067ac <__ieee754_sqrtf>
 8006306:	f000 fa77 	bl	80067f8 <fabsf>
 800630a:	b125      	cbz	r5, 8006316 <__ieee754_powf+0x106>
 800630c:	f026 4340 	bic.w	r3, r6, #3221225472	; 0xc0000000
 8006310:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8006314:	d116      	bne.n	8006344 <__ieee754_powf+0x134>
 8006316:	2c00      	cmp	r4, #0
 8006318:	bfbc      	itt	lt
 800631a:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 800631e:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8006322:	2e00      	cmp	r6, #0
 8006324:	da8c      	bge.n	8006240 <__ieee754_powf+0x30>
 8006326:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 800632a:	ea55 0307 	orrs.w	r3, r5, r7
 800632e:	d104      	bne.n	800633a <__ieee754_powf+0x12a>
 8006330:	ee70 7a40 	vsub.f32	s15, s0, s0
 8006334:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8006338:	e782      	b.n	8006240 <__ieee754_powf+0x30>
 800633a:	2f01      	cmp	r7, #1
 800633c:	d180      	bne.n	8006240 <__ieee754_powf+0x30>
 800633e:	eeb1 0a40 	vneg.f32	s0, s0
 8006342:	e77d      	b.n	8006240 <__ieee754_powf+0x30>
 8006344:	0ff0      	lsrs	r0, r6, #31
 8006346:	3801      	subs	r0, #1
 8006348:	ea57 0300 	orrs.w	r3, r7, r0
 800634c:	d104      	bne.n	8006358 <__ieee754_powf+0x148>
 800634e:	ee38 8a48 	vsub.f32	s16, s16, s16
 8006352:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8006356:	e773      	b.n	8006240 <__ieee754_powf+0x30>
 8006358:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 800635c:	dd74      	ble.n	8006448 <__ieee754_powf+0x238>
 800635e:	4b9c      	ldr	r3, [pc, #624]	; (80065d0 <__ieee754_powf+0x3c0>)
 8006360:	429d      	cmp	r5, r3
 8006362:	dc08      	bgt.n	8006376 <__ieee754_powf+0x166>
 8006364:	2c00      	cmp	r4, #0
 8006366:	da0b      	bge.n	8006380 <__ieee754_powf+0x170>
 8006368:	2000      	movs	r0, #0
 800636a:	ecbd 8b02 	vpop	{d8}
 800636e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006372:	f000 ba3b 	b.w	80067ec <__math_oflowf>
 8006376:	4b97      	ldr	r3, [pc, #604]	; (80065d4 <__ieee754_powf+0x3c4>)
 8006378:	429d      	cmp	r5, r3
 800637a:	dd08      	ble.n	800638e <__ieee754_powf+0x17e>
 800637c:	2c00      	cmp	r4, #0
 800637e:	dcf3      	bgt.n	8006368 <__ieee754_powf+0x158>
 8006380:	2000      	movs	r0, #0
 8006382:	ecbd 8b02 	vpop	{d8}
 8006386:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800638a:	f000 ba29 	b.w	80067e0 <__math_uflowf>
 800638e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8006392:	ee30 0a67 	vsub.f32	s0, s0, s15
 8006396:	eddf 6a90 	vldr	s13, [pc, #576]	; 80065d8 <__ieee754_powf+0x3c8>
 800639a:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800639e:	eee0 6a67 	vfms.f32	s13, s0, s15
 80063a2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80063a6:	eee6 7ac0 	vfms.f32	s15, s13, s0
 80063aa:	ee20 7a00 	vmul.f32	s14, s0, s0
 80063ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063b2:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 80065dc <__ieee754_powf+0x3cc>
 80063b6:	ee67 7a67 	vnmul.f32	s15, s14, s15
 80063ba:	ed9f 7a89 	vldr	s14, [pc, #548]	; 80065e0 <__ieee754_powf+0x3d0>
 80063be:	eee0 7a07 	vfma.f32	s15, s0, s14
 80063c2:	ed9f 7a88 	vldr	s14, [pc, #544]	; 80065e4 <__ieee754_powf+0x3d4>
 80063c6:	eef0 6a67 	vmov.f32	s13, s15
 80063ca:	eee0 6a07 	vfma.f32	s13, s0, s14
 80063ce:	ee16 3a90 	vmov	r3, s13
 80063d2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80063d6:	f023 030f 	bic.w	r3, r3, #15
 80063da:	ee00 3a90 	vmov	s1, r3
 80063de:	eee0 0a47 	vfms.f32	s1, s0, s14
 80063e2:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80063e6:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 80063ea:	f024 040f 	bic.w	r4, r4, #15
 80063ee:	ee07 4a10 	vmov	s14, r4
 80063f2:	ee67 0aa8 	vmul.f32	s1, s15, s17
 80063f6:	ee38 7ac7 	vsub.f32	s14, s17, s14
 80063fa:	ee07 3a90 	vmov	s15, r3
 80063fe:	eee7 0a27 	vfma.f32	s1, s14, s15
 8006402:	3f01      	subs	r7, #1
 8006404:	ea57 0200 	orrs.w	r2, r7, r0
 8006408:	ee07 4a10 	vmov	s14, r4
 800640c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006410:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8006414:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8006418:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800641c:	ee17 4a10 	vmov	r4, s14
 8006420:	bf08      	it	eq
 8006422:	eeb0 8a40 	vmoveq.f32	s16, s0
 8006426:	2c00      	cmp	r4, #0
 8006428:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800642c:	f340 817e 	ble.w	800672c <__ieee754_powf+0x51c>
 8006430:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8006434:	f340 80f8 	ble.w	8006628 <__ieee754_powf+0x418>
 8006438:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800643c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006440:	bf4c      	ite	mi
 8006442:	2001      	movmi	r0, #1
 8006444:	2000      	movpl	r0, #0
 8006446:	e790      	b.n	800636a <__ieee754_powf+0x15a>
 8006448:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 800644c:	bf01      	itttt	eq
 800644e:	eddf 7a66 	vldreq	s15, [pc, #408]	; 80065e8 <__ieee754_powf+0x3d8>
 8006452:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8006456:	f06f 0217 	mvneq.w	r2, #23
 800645a:	ee17 5a90 	vmoveq	r5, s15
 800645e:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8006462:	bf18      	it	ne
 8006464:	2200      	movne	r2, #0
 8006466:	3b7f      	subs	r3, #127	; 0x7f
 8006468:	4413      	add	r3, r2
 800646a:	4a60      	ldr	r2, [pc, #384]	; (80065ec <__ieee754_powf+0x3dc>)
 800646c:	f3c5 0516 	ubfx	r5, r5, #0, #23
 8006470:	4295      	cmp	r5, r2
 8006472:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 8006476:	dd06      	ble.n	8006486 <__ieee754_powf+0x276>
 8006478:	4a5d      	ldr	r2, [pc, #372]	; (80065f0 <__ieee754_powf+0x3e0>)
 800647a:	4295      	cmp	r5, r2
 800647c:	f340 80a4 	ble.w	80065c8 <__ieee754_powf+0x3b8>
 8006480:	3301      	adds	r3, #1
 8006482:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8006486:	2500      	movs	r5, #0
 8006488:	4a5a      	ldr	r2, [pc, #360]	; (80065f4 <__ieee754_powf+0x3e4>)
 800648a:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 800648e:	ee07 1a90 	vmov	s15, r1
 8006492:	ed92 7a00 	vldr	s14, [r2]
 8006496:	4a58      	ldr	r2, [pc, #352]	; (80065f8 <__ieee754_powf+0x3e8>)
 8006498:	ee37 6a27 	vadd.f32	s12, s14, s15
 800649c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80064a0:	eec5 6a86 	vdiv.f32	s13, s11, s12
 80064a4:	1049      	asrs	r1, r1, #1
 80064a6:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 80064aa:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 80064ae:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 80064b2:	ee37 5ac7 	vsub.f32	s10, s15, s14
 80064b6:	ee06 1a10 	vmov	s12, r1
 80064ba:	ee65 4a26 	vmul.f32	s9, s10, s13
 80064be:	ee36 7a47 	vsub.f32	s14, s12, s14
 80064c2:	ee14 6a90 	vmov	r6, s9
 80064c6:	4016      	ands	r6, r2
 80064c8:	ee05 6a90 	vmov	s11, r6
 80064cc:	eea5 5ac6 	vfms.f32	s10, s11, s12
 80064d0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80064d4:	ed9f 7a49 	vldr	s14, [pc, #292]	; 80065fc <__ieee754_powf+0x3ec>
 80064d8:	eea5 5ae7 	vfms.f32	s10, s11, s15
 80064dc:	ee64 7aa4 	vmul.f32	s15, s9, s9
 80064e0:	ee25 6a26 	vmul.f32	s12, s10, s13
 80064e4:	eddf 6a46 	vldr	s13, [pc, #280]	; 8006600 <__ieee754_powf+0x3f0>
 80064e8:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80064ec:	eddf 6a45 	vldr	s13, [pc, #276]	; 8006604 <__ieee754_powf+0x3f4>
 80064f0:	eee7 6a27 	vfma.f32	s13, s14, s15
 80064f4:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80065d8 <__ieee754_powf+0x3c8>
 80064f8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80064fc:	eddf 6a42 	vldr	s13, [pc, #264]	; 8006608 <__ieee754_powf+0x3f8>
 8006500:	eee7 6a27 	vfma.f32	s13, s14, s15
 8006504:	ed9f 7a41 	vldr	s14, [pc, #260]	; 800660c <__ieee754_powf+0x3fc>
 8006508:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800650c:	ee74 6aa5 	vadd.f32	s13, s9, s11
 8006510:	ee27 5aa7 	vmul.f32	s10, s15, s15
 8006514:	ee66 6a86 	vmul.f32	s13, s13, s12
 8006518:	eee5 6a07 	vfma.f32	s13, s10, s14
 800651c:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 8006520:	eef0 7a45 	vmov.f32	s15, s10
 8006524:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8006528:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800652c:	ee17 1a90 	vmov	r1, s15
 8006530:	4011      	ands	r1, r2
 8006532:	ee07 1a90 	vmov	s15, r1
 8006536:	ee37 7ac5 	vsub.f32	s14, s15, s10
 800653a:	eea5 7ae5 	vfms.f32	s14, s11, s11
 800653e:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8006542:	ee27 7a24 	vmul.f32	s14, s14, s9
 8006546:	eea6 7a27 	vfma.f32	s14, s12, s15
 800654a:	eeb0 6a47 	vmov.f32	s12, s14
 800654e:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8006552:	ee16 1a10 	vmov	r1, s12
 8006556:	4011      	ands	r1, r2
 8006558:	ee06 1a90 	vmov	s13, r1
 800655c:	eee5 6ae7 	vfms.f32	s13, s11, s15
 8006560:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8006610 <__ieee754_powf+0x400>
 8006564:	eddf 5a2b 	vldr	s11, [pc, #172]	; 8006614 <__ieee754_powf+0x404>
 8006568:	ee37 7a66 	vsub.f32	s14, s14, s13
 800656c:	ee06 1a10 	vmov	s12, r1
 8006570:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006574:	eddf 7a28 	vldr	s15, [pc, #160]	; 8006618 <__ieee754_powf+0x408>
 8006578:	4928      	ldr	r1, [pc, #160]	; (800661c <__ieee754_powf+0x40c>)
 800657a:	eea6 7a27 	vfma.f32	s14, s12, s15
 800657e:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8006582:	edd1 7a00 	vldr	s15, [r1]
 8006586:	ee37 7a27 	vadd.f32	s14, s14, s15
 800658a:	ee07 3a90 	vmov	s15, r3
 800658e:	4b24      	ldr	r3, [pc, #144]	; (8006620 <__ieee754_powf+0x410>)
 8006590:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8006594:	eef0 7a47 	vmov.f32	s15, s14
 8006598:	eee6 7a25 	vfma.f32	s15, s12, s11
 800659c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 80065a0:	edd5 0a00 	vldr	s1, [r5]
 80065a4:	ee77 7aa0 	vadd.f32	s15, s15, s1
 80065a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065ac:	ee17 3a90 	vmov	r3, s15
 80065b0:	4013      	ands	r3, r2
 80065b2:	ee07 3a90 	vmov	s15, r3
 80065b6:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80065ba:	ee76 6ae0 	vsub.f32	s13, s13, s1
 80065be:	eee6 6a65 	vfms.f32	s13, s12, s11
 80065c2:	ee77 7a66 	vsub.f32	s15, s14, s13
 80065c6:	e70e      	b.n	80063e6 <__ieee754_powf+0x1d6>
 80065c8:	2501      	movs	r5, #1
 80065ca:	e75d      	b.n	8006488 <__ieee754_powf+0x278>
 80065cc:	00000000 	.word	0x00000000
 80065d0:	3f7ffff3 	.word	0x3f7ffff3
 80065d4:	3f800007 	.word	0x3f800007
 80065d8:	3eaaaaab 	.word	0x3eaaaaab
 80065dc:	3fb8aa3b 	.word	0x3fb8aa3b
 80065e0:	36eca570 	.word	0x36eca570
 80065e4:	3fb8aa00 	.word	0x3fb8aa00
 80065e8:	4b800000 	.word	0x4b800000
 80065ec:	001cc471 	.word	0x001cc471
 80065f0:	005db3d6 	.word	0x005db3d6
 80065f4:	08006988 	.word	0x08006988
 80065f8:	fffff000 	.word	0xfffff000
 80065fc:	3e6c3255 	.word	0x3e6c3255
 8006600:	3e53f142 	.word	0x3e53f142
 8006604:	3e8ba305 	.word	0x3e8ba305
 8006608:	3edb6db7 	.word	0x3edb6db7
 800660c:	3f19999a 	.word	0x3f19999a
 8006610:	3f76384f 	.word	0x3f76384f
 8006614:	3f763800 	.word	0x3f763800
 8006618:	369dc3a0 	.word	0x369dc3a0
 800661c:	08006998 	.word	0x08006998
 8006620:	08006990 	.word	0x08006990
 8006624:	3338aa3c 	.word	0x3338aa3c
 8006628:	f040 8095 	bne.w	8006756 <__ieee754_powf+0x546>
 800662c:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8006624 <__ieee754_powf+0x414>
 8006630:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006634:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8006638:	eef4 6ac7 	vcmpe.f32	s13, s14
 800663c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006640:	f73f aefa 	bgt.w	8006438 <__ieee754_powf+0x228>
 8006644:	15db      	asrs	r3, r3, #23
 8006646:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 800664a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800664e:	4103      	asrs	r3, r0
 8006650:	4423      	add	r3, r4
 8006652:	494b      	ldr	r1, [pc, #300]	; (8006780 <__ieee754_powf+0x570>)
 8006654:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8006658:	3a7f      	subs	r2, #127	; 0x7f
 800665a:	4111      	asrs	r1, r2
 800665c:	ea23 0101 	bic.w	r1, r3, r1
 8006660:	ee07 1a10 	vmov	s14, r1
 8006664:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8006668:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800666c:	f1c2 0217 	rsb	r2, r2, #23
 8006670:	4110      	asrs	r0, r2
 8006672:	2c00      	cmp	r4, #0
 8006674:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006678:	bfb8      	it	lt
 800667a:	4240      	neglt	r0, r0
 800667c:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8006680:	ed9f 0a40 	vldr	s0, [pc, #256]	; 8006784 <__ieee754_powf+0x574>
 8006684:	eddf 6a40 	vldr	s13, [pc, #256]	; 8006788 <__ieee754_powf+0x578>
 8006688:	ee17 3a10 	vmov	r3, s14
 800668c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8006690:	f023 030f 	bic.w	r3, r3, #15
 8006694:	ee07 3a10 	vmov	s14, r3
 8006698:	ee77 7a67 	vsub.f32	s15, s14, s15
 800669c:	ee27 0a00 	vmul.f32	s0, s14, s0
 80066a0:	ee70 0ae7 	vsub.f32	s1, s1, s15
 80066a4:	eddf 7a39 	vldr	s15, [pc, #228]	; 800678c <__ieee754_powf+0x57c>
 80066a8:	eea0 0aa7 	vfma.f32	s0, s1, s15
 80066ac:	eef0 7a40 	vmov.f32	s15, s0
 80066b0:	eee7 7a26 	vfma.f32	s15, s14, s13
 80066b4:	eeb0 6a67 	vmov.f32	s12, s15
 80066b8:	eea7 6a66 	vfms.f32	s12, s14, s13
 80066bc:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80066c0:	ee30 0a46 	vsub.f32	s0, s0, s12
 80066c4:	eddf 6a32 	vldr	s13, [pc, #200]	; 8006790 <__ieee754_powf+0x580>
 80066c8:	ed9f 6a32 	vldr	s12, [pc, #200]	; 8006794 <__ieee754_powf+0x584>
 80066cc:	eee7 6a06 	vfma.f32	s13, s14, s12
 80066d0:	ed9f 6a31 	vldr	s12, [pc, #196]	; 8006798 <__ieee754_powf+0x588>
 80066d4:	eea6 6a87 	vfma.f32	s12, s13, s14
 80066d8:	eddf 6a30 	vldr	s13, [pc, #192]	; 800679c <__ieee754_powf+0x58c>
 80066dc:	eee6 6a07 	vfma.f32	s13, s12, s14
 80066e0:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 80067a0 <__ieee754_powf+0x590>
 80066e4:	eea6 6a87 	vfma.f32	s12, s13, s14
 80066e8:	eef0 6a67 	vmov.f32	s13, s15
 80066ec:	eee6 6a47 	vfms.f32	s13, s12, s14
 80066f0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80066f4:	ee27 6aa6 	vmul.f32	s12, s15, s13
 80066f8:	ee76 6ac7 	vsub.f32	s13, s13, s14
 80066fc:	eea7 0a80 	vfma.f32	s0, s15, s0
 8006700:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8006704:	ee37 0a40 	vsub.f32	s0, s14, s0
 8006708:	ee70 7a67 	vsub.f32	s15, s0, s15
 800670c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8006710:	ee30 0a67 	vsub.f32	s0, s0, s15
 8006714:	ee10 3a10 	vmov	r3, s0
 8006718:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800671c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006720:	da1f      	bge.n	8006762 <__ieee754_powf+0x552>
 8006722:	f000 f87d 	bl	8006820 <scalbnf>
 8006726:	ee20 0a08 	vmul.f32	s0, s0, s16
 800672a:	e589      	b.n	8006240 <__ieee754_powf+0x30>
 800672c:	4a1d      	ldr	r2, [pc, #116]	; (80067a4 <__ieee754_powf+0x594>)
 800672e:	4293      	cmp	r3, r2
 8006730:	dd07      	ble.n	8006742 <__ieee754_powf+0x532>
 8006732:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8006736:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800673a:	bf4c      	ite	mi
 800673c:	2001      	movmi	r0, #1
 800673e:	2000      	movpl	r0, #0
 8006740:	e61f      	b.n	8006382 <__ieee754_powf+0x172>
 8006742:	d108      	bne.n	8006756 <__ieee754_powf+0x546>
 8006744:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006748:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800674c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006750:	f6ff af78 	blt.w	8006644 <__ieee754_powf+0x434>
 8006754:	e7ed      	b.n	8006732 <__ieee754_powf+0x522>
 8006756:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 800675a:	f73f af73 	bgt.w	8006644 <__ieee754_powf+0x434>
 800675e:	2000      	movs	r0, #0
 8006760:	e78c      	b.n	800667c <__ieee754_powf+0x46c>
 8006762:	ee00 3a10 	vmov	s0, r3
 8006766:	e7de      	b.n	8006726 <__ieee754_powf+0x516>
 8006768:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800676c:	e568      	b.n	8006240 <__ieee754_powf+0x30>
 800676e:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 80067a8 <__ieee754_powf+0x598>
 8006772:	e565      	b.n	8006240 <__ieee754_powf+0x30>
 8006774:	eeb0 0a48 	vmov.f32	s0, s16
 8006778:	e562      	b.n	8006240 <__ieee754_powf+0x30>
 800677a:	2700      	movs	r7, #0
 800677c:	e58d      	b.n	800629a <__ieee754_powf+0x8a>
 800677e:	bf00      	nop
 8006780:	007fffff 	.word	0x007fffff
 8006784:	35bfbe8c 	.word	0x35bfbe8c
 8006788:	3f317200 	.word	0x3f317200
 800678c:	3f317218 	.word	0x3f317218
 8006790:	b5ddea0e 	.word	0xb5ddea0e
 8006794:	3331bb4c 	.word	0x3331bb4c
 8006798:	388ab355 	.word	0x388ab355
 800679c:	bb360b61 	.word	0xbb360b61
 80067a0:	3e2aaaab 	.word	0x3e2aaaab
 80067a4:	43160000 	.word	0x43160000
 80067a8:	00000000 	.word	0x00000000

080067ac <__ieee754_sqrtf>:
 80067ac:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80067b0:	4770      	bx	lr

080067b2 <with_errnof>:
 80067b2:	b513      	push	{r0, r1, r4, lr}
 80067b4:	4604      	mov	r4, r0
 80067b6:	ed8d 0a01 	vstr	s0, [sp, #4]
 80067ba:	f7ff fc7b 	bl	80060b4 <__errno>
 80067be:	ed9d 0a01 	vldr	s0, [sp, #4]
 80067c2:	6004      	str	r4, [r0, #0]
 80067c4:	b002      	add	sp, #8
 80067c6:	bd10      	pop	{r4, pc}

080067c8 <xflowf>:
 80067c8:	b130      	cbz	r0, 80067d8 <xflowf+0x10>
 80067ca:	eef1 7a40 	vneg.f32	s15, s0
 80067ce:	ee27 0a80 	vmul.f32	s0, s15, s0
 80067d2:	2022      	movs	r0, #34	; 0x22
 80067d4:	f7ff bfed 	b.w	80067b2 <with_errnof>
 80067d8:	eef0 7a40 	vmov.f32	s15, s0
 80067dc:	e7f7      	b.n	80067ce <xflowf+0x6>
	...

080067e0 <__math_uflowf>:
 80067e0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80067e8 <__math_uflowf+0x8>
 80067e4:	f7ff bff0 	b.w	80067c8 <xflowf>
 80067e8:	10000000 	.word	0x10000000

080067ec <__math_oflowf>:
 80067ec:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80067f4 <__math_oflowf+0x8>
 80067f0:	f7ff bfea 	b.w	80067c8 <xflowf>
 80067f4:	70000000 	.word	0x70000000

080067f8 <fabsf>:
 80067f8:	ee10 3a10 	vmov	r3, s0
 80067fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006800:	ee00 3a10 	vmov	s0, r3
 8006804:	4770      	bx	lr

08006806 <finitef>:
 8006806:	b082      	sub	sp, #8
 8006808:	ed8d 0a01 	vstr	s0, [sp, #4]
 800680c:	9801      	ldr	r0, [sp, #4]
 800680e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8006812:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8006816:	bfac      	ite	ge
 8006818:	2000      	movge	r0, #0
 800681a:	2001      	movlt	r0, #1
 800681c:	b002      	add	sp, #8
 800681e:	4770      	bx	lr

08006820 <scalbnf>:
 8006820:	ee10 3a10 	vmov	r3, s0
 8006824:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8006828:	d025      	beq.n	8006876 <scalbnf+0x56>
 800682a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800682e:	d302      	bcc.n	8006836 <scalbnf+0x16>
 8006830:	ee30 0a00 	vadd.f32	s0, s0, s0
 8006834:	4770      	bx	lr
 8006836:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800683a:	d122      	bne.n	8006882 <scalbnf+0x62>
 800683c:	4b2a      	ldr	r3, [pc, #168]	; (80068e8 <scalbnf+0xc8>)
 800683e:	eddf 7a2b 	vldr	s15, [pc, #172]	; 80068ec <scalbnf+0xcc>
 8006842:	4298      	cmp	r0, r3
 8006844:	ee20 0a27 	vmul.f32	s0, s0, s15
 8006848:	db16      	blt.n	8006878 <scalbnf+0x58>
 800684a:	ee10 3a10 	vmov	r3, s0
 800684e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8006852:	3a19      	subs	r2, #25
 8006854:	4402      	add	r2, r0
 8006856:	2afe      	cmp	r2, #254	; 0xfe
 8006858:	dd15      	ble.n	8006886 <scalbnf+0x66>
 800685a:	ee10 3a10 	vmov	r3, s0
 800685e:	eddf 7a24 	vldr	s15, [pc, #144]	; 80068f0 <scalbnf+0xd0>
 8006862:	eddf 6a24 	vldr	s13, [pc, #144]	; 80068f4 <scalbnf+0xd4>
 8006866:	2b00      	cmp	r3, #0
 8006868:	eeb0 7a67 	vmov.f32	s14, s15
 800686c:	bfb8      	it	lt
 800686e:	eef0 7a66 	vmovlt.f32	s15, s13
 8006872:	ee27 0a27 	vmul.f32	s0, s14, s15
 8006876:	4770      	bx	lr
 8006878:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80068f8 <scalbnf+0xd8>
 800687c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8006880:	4770      	bx	lr
 8006882:	0dd2      	lsrs	r2, r2, #23
 8006884:	e7e6      	b.n	8006854 <scalbnf+0x34>
 8006886:	2a00      	cmp	r2, #0
 8006888:	dd06      	ble.n	8006898 <scalbnf+0x78>
 800688a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800688e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8006892:	ee00 3a10 	vmov	s0, r3
 8006896:	4770      	bx	lr
 8006898:	f112 0f16 	cmn.w	r2, #22
 800689c:	da1a      	bge.n	80068d4 <scalbnf+0xb4>
 800689e:	f24c 3350 	movw	r3, #50000	; 0xc350
 80068a2:	4298      	cmp	r0, r3
 80068a4:	ee10 3a10 	vmov	r3, s0
 80068a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80068ac:	dd0a      	ble.n	80068c4 <scalbnf+0xa4>
 80068ae:	ed9f 0a10 	vldr	s0, [pc, #64]	; 80068f0 <scalbnf+0xd0>
 80068b2:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80068f4 <scalbnf+0xd4>
 80068b6:	eef0 7a40 	vmov.f32	s15, s0
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	bf18      	it	ne
 80068be:	eeb0 0a47 	vmovne.f32	s0, s14
 80068c2:	e7db      	b.n	800687c <scalbnf+0x5c>
 80068c4:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 80068f8 <scalbnf+0xd8>
 80068c8:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80068fc <scalbnf+0xdc>
 80068cc:	eef0 7a40 	vmov.f32	s15, s0
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	e7f3      	b.n	80068bc <scalbnf+0x9c>
 80068d4:	3219      	adds	r2, #25
 80068d6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80068da:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80068de:	eddf 7a08 	vldr	s15, [pc, #32]	; 8006900 <scalbnf+0xe0>
 80068e2:	ee07 3a10 	vmov	s14, r3
 80068e6:	e7c4      	b.n	8006872 <scalbnf+0x52>
 80068e8:	ffff3cb0 	.word	0xffff3cb0
 80068ec:	4c000000 	.word	0x4c000000
 80068f0:	7149f2ca 	.word	0x7149f2ca
 80068f4:	f149f2ca 	.word	0xf149f2ca
 80068f8:	0da24260 	.word	0x0da24260
 80068fc:	8da24260 	.word	0x8da24260
 8006900:	33000000 	.word	0x33000000

08006904 <_init>:
 8006904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006906:	bf00      	nop
 8006908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800690a:	bc08      	pop	{r3}
 800690c:	469e      	mov	lr, r3
 800690e:	4770      	bx	lr

08006910 <_fini>:
 8006910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006912:	bf00      	nop
 8006914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006916:	bc08      	pop	{r3}
 8006918:	469e      	mov	lr, r3
 800691a:	4770      	bx	lr
